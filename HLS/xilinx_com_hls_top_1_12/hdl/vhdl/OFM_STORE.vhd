-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity OFM_STORE is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_dma_O_TDATA : OUT STD_LOGIC_VECTOR (55 downto 0);
    output_dma_O_TVALID : OUT STD_LOGIC;
    output_dma_O_TREADY : IN STD_LOGIC;
    output_dma_O_TLAST : OUT STD_LOGIC;
    input_dma_B_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input_dma_B_TVALID : IN STD_LOGIC;
    input_dma_B_TREADY : OUT STD_LOGIC;
    input_dma_B_TLAST : IN STD_LOGIC;
    OFM_0_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OFM_0_V_ce0 : OUT STD_LOGIC;
    OFM_0_V_q0 : IN STD_LOGIC_VECTOR (25 downto 0);
    OFM_0_V_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OFM_0_V_ce1 : OUT STD_LOGIC;
    OFM_0_V_we1 : OUT STD_LOGIC;
    OFM_0_V_d1 : OUT STD_LOGIC_VECTOR (25 downto 0);
    OFM_1_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OFM_1_V_ce0 : OUT STD_LOGIC;
    OFM_1_V_q0 : IN STD_LOGIC_VECTOR (25 downto 0);
    OFM_1_V_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OFM_1_V_ce1 : OUT STD_LOGIC;
    OFM_1_V_we1 : OUT STD_LOGIC;
    OFM_1_V_d1 : OUT STD_LOGIC_VECTOR (25 downto 0);
    OFM_2_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OFM_2_V_ce0 : OUT STD_LOGIC;
    OFM_2_V_q0 : IN STD_LOGIC_VECTOR (25 downto 0);
    OFM_2_V_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OFM_2_V_ce1 : OUT STD_LOGIC;
    OFM_2_V_we1 : OUT STD_LOGIC;
    OFM_2_V_d1 : OUT STD_LOGIC_VECTOR (25 downto 0);
    OFM_3_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OFM_3_V_ce0 : OUT STD_LOGIC;
    OFM_3_V_q0 : IN STD_LOGIC_VECTOR (25 downto 0);
    OFM_3_V_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OFM_3_V_ce1 : OUT STD_LOGIC;
    OFM_3_V_we1 : OUT STD_LOGIC;
    OFM_3_V_d1 : OUT STD_LOGIC_VECTOR (25 downto 0);
    OFM_4_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OFM_4_V_ce0 : OUT STD_LOGIC;
    OFM_4_V_q0 : IN STD_LOGIC_VECTOR (25 downto 0);
    OFM_4_V_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OFM_4_V_ce1 : OUT STD_LOGIC;
    OFM_4_V_we1 : OUT STD_LOGIC;
    OFM_4_V_d1 : OUT STD_LOGIC_VECTOR (25 downto 0);
    OFM_5_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OFM_5_V_ce0 : OUT STD_LOGIC;
    OFM_5_V_q0 : IN STD_LOGIC_VECTOR (25 downto 0);
    OFM_5_V_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OFM_5_V_ce1 : OUT STD_LOGIC;
    OFM_5_V_we1 : OUT STD_LOGIC;
    OFM_5_V_d1 : OUT STD_LOGIC_VECTOR (25 downto 0);
    OFM_6_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OFM_6_V_ce0 : OUT STD_LOGIC;
    OFM_6_V_q0 : IN STD_LOGIC_VECTOR (25 downto 0);
    OFM_6_V_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OFM_6_V_ce1 : OUT STD_LOGIC;
    OFM_6_V_we1 : OUT STD_LOGIC;
    OFM_6_V_d1 : OUT STD_LOGIC_VECTOR (25 downto 0);
    OFM_7_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OFM_7_V_ce0 : OUT STD_LOGIC;
    OFM_7_V_q0 : IN STD_LOGIC_VECTOR (25 downto 0);
    OFM_7_V_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OFM_7_V_ce1 : OUT STD_LOGIC;
    OFM_7_V_we1 : OUT STD_LOGIC;
    OFM_7_V_d1 : OUT STD_LOGIC_VECTOR (25 downto 0);
    BIAS_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    BIAS_V_ce0 : OUT STD_LOGIC;
    BIAS_V_we0 : OUT STD_LOGIC;
    BIAS_V_d0 : OUT STD_LOGIC_VECTOR (25 downto 0);
    BIAS_V_q0 : IN STD_LOGIC_VECTOR (25 downto 0);
    custom_Tr : IN STD_LOGIC_VECTOR (31 downto 0);
    custom_Tc : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of OFM_STORE is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv66_0 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv26_0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv66_1 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv26_1FFFFFF : STD_LOGIC_VECTOR (25 downto 0) := "01111111111111111111111111";
    constant ap_const_lv26_2000000 : STD_LOGIC_VECTOR (25 downto 0) := "10000000000000000000000000";
    constant ap_const_lv9_D : STD_LOGIC_VECTOR (8 downto 0) := "000001101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal output_dma_O_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal exitcond_flatten1_reg_1181 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_dma_B_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond1_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten1_reg_379 : STD_LOGIC_VECTOR (65 downto 0);
    signal i1_reg_390 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_reg_401 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_reg_412 : STD_LOGIC_VECTOR (30 downto 0);
    signal k_reg_423 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_1_fu_473_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal tmp_fu_493_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_1149 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_s_fu_498_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_1155 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_509_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_reg_1160 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_515_p3 : STD_LOGIC_VECTOR (65 downto 0);
    signal tmp_3_reg_1166 : STD_LOGIC_VECTOR (65 downto 0);
    signal notrhs_mid_fu_523_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs_mid_reg_1171 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_mid_fu_529_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_mid_reg_1176 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten1_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state4_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp1_stage0_iter1 : BOOLEAN;
    signal ap_sig_ioackin_output_dma_O_TREADY : STD_LOGIC;
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal indvar_flatten_next1_fu_557_p2 : STD_LOGIC_VECTOR (65 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal tmp_4_mid2_v_fu_590_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_mid2_v_reg_1190 : STD_LOGIC_VECTOR (2 downto 0);
    signal sel_tmp_mid2_fu_635_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_mid2_reg_1195 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_mid2_fu_649_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_mid2_reg_1201 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp8_mid2_fu_669_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp8_mid2_reg_1207 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_mid2_fu_750_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_last_fu_769_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_reg_1218 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_2_fu_790_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvar_flatten_next_fu_802_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvar_flatten_next2_fu_1055_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_7_mid2_v_fu_1075_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal exitcond_flatten2_fu_1050_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_1_fu_1102_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state4 : STD_LOGIC;
    signal i_reg_368 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_i1_phi_fu_394_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten2_reg_434 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal j2_reg_445 : STD_LOGIC_VECTOR (30 downto 0);
    signal k3_reg_456 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_2_fu_488_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_cast_fu_779_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_mid2_fu_598_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_cast_fu_1091_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal ap_reg_ioackin_output_dma_O_TREADY : STD_LOGIC := '0';
    signal bound_fu_509_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_509_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_534_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_cast_fu_543_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_flatten_fu_569_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_563_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal notlhs_mid1_fu_603_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_609_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_mid1_fu_623_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_629_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_fu_643_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp8_mid1_fu_657_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_fu_663_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs_fu_538_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_547_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_mid_fu_574_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_11_mid1_fu_684_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_mid_fu_582_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_2_fu_691_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_11_fu_709_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_13_fu_713_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_22_fu_721_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_mid1_fu_705_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal notrhs_mid3_fu_677_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs_mid1_fu_733_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_mid2_fu_697_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal k_cast_mid2_cast_fu_746_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal notlhs_mid2_fu_615_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_758_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp6_fu_763_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs_mid2_fu_738_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1108_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvar_flatten_op_fu_796_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sel_tmp5_fu_810_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal sel_tmp7_fu_817_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal p_Val2_s_fu_824_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_14_fu_831_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_15_fu_835_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_Val2_2_fu_839_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_Val2_3_fu_853_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal newsignbit_fu_859_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_fu_845_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_867_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_not_fu_885_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i1_fu_879_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_873_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_fu_891_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_3_mux_fu_897_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal p_Val2_3_45_fu_905_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal sel_tmp1_fu_921_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal sel_tmp2_fu_928_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal p_Val2_4_fu_935_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_17_fu_942_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_Val2_5_fu_946_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_Val2_6_fu_960_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal newsignbit_1_fu_966_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_1_fu_952_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_974_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_1_not_fu_992_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_fu_986_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_1_fu_980_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge5_fu_998_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_6_mux_fu_1004_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal p_Val2_6_46_fu_1012_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_data_data2_V_fu_1020_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_data_data1_V_fu_913_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_data_fu_1028_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal k3_cast_fu_1041_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_1045_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_1061_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal k3_mid2_fu_1067_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_1117_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1108_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_1108_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1108_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1117_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_1117_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1117_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal bound_fu_509_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_fu_509_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_condition_793 : BOOLEAN;

    component top_mac_muladd_5ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;



begin
    top_mac_muladd_5ncud_U230 : component top_mac_muladd_5ncud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 9,
        din2_WIDTH => 9,
        dout_WIDTH => 9)
    port map (
        din0 => grp_fu_1108_p0,
        din1 => grp_fu_1108_p1,
        din2 => grp_fu_1108_p2,
        dout => grp_fu_1108_p3);

    top_mac_muladd_5ncud_U231 : component top_mac_muladd_5ncud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 9,
        din2_WIDTH => 9,
        dout_WIDTH => 9)
    port map (
        din0 => grp_fu_1117_p0,
        din1 => grp_fu_1117_p1,
        din2 => grp_fu_1117_p2,
        dout => grp_fu_1117_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state4) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state4))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state4);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_output_dma_O_TREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_output_dma_O_TREADY <= ap_const_logic_0;
            else
                if ((ap_const_boolean_1 = ap_condition_793)) then
                    if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then 
                        ap_reg_ioackin_output_dma_O_TREADY <= ap_const_logic_0;
                    elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_01001) and (output_dma_O_TREADY = ap_const_logic_1))) then 
                        ap_reg_ioackin_output_dma_O_TREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    i1_reg_390_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten1_reg_1181 = ap_const_lv1_0))) then 
                i1_reg_390 <= tmp_4_mid2_v_reg_1190;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i1_reg_390 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_reg_368_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((input_dma_B_TVALID = ap_const_logic_0) and (exitcond1_fu_467_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_467_p2 = ap_const_lv1_0))) then 
                i_reg_368 <= i_1_fu_473_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_368 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    indvar_flatten1_reg_379_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten1_fu_552_p2 = ap_const_lv1_0))) then 
                indvar_flatten1_reg_379 <= indvar_flatten_next1_fu_557_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                indvar_flatten1_reg_379 <= ap_const_lv66_0;
            end if; 
        end if;
    end process;

    indvar_flatten2_reg_434_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                indvar_flatten2_reg_434 <= ap_const_lv64_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond_flatten2_fu_1050_p2 = ap_const_lv1_0))) then 
                indvar_flatten2_reg_434 <= indvar_flatten_next2_fu_1055_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_401_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten1_fu_552_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_401 <= indvar_flatten_next_fu_802_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                indvar_flatten_reg_401 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    j2_reg_445_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                j2_reg_445 <= ap_const_lv31_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond_flatten2_fu_1050_p2 = ap_const_lv1_0))) then 
                j2_reg_445 <= tmp_7_mid2_v_fu_1075_p3;
            end if; 
        end if;
    end process;

    j_reg_412_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten1_fu_552_p2 = ap_const_lv1_0))) then 
                j_reg_412 <= j_mid2_fu_750_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                j_reg_412 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    k3_reg_456_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                k3_reg_456 <= ap_const_lv31_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond_flatten2_fu_1050_p2 = ap_const_lv1_0))) then 
                k3_reg_456 <= k_1_fu_1102_p2;
            end if; 
        end if;
    end process;

    k_reg_423_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten1_fu_552_p2 = ap_const_lv1_0))) then 
                k_reg_423 <= k_2_fu_790_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                k_reg_423 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                bound_reg_1160 <= bound_fu_509_p2;
                notrhs_mid_reg_1171 <= notrhs_mid_fu_523_p2;
                tmp_11_mid_reg_1176 <= tmp_11_mid_fu_529_p2;
                    tmp_3_reg_1166(65 downto 2) <= tmp_3_fu_515_p3(65 downto 2);
                tmp_reg_1149 <= tmp_fu_493_p2;
                tmp_s_reg_1155 <= tmp_s_fu_498_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                exitcond_flatten1_reg_1181 <= exitcond_flatten1_fu_552_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten1_fu_552_p2 = ap_const_lv1_0))) then
                sel_tmp6_mid2_reg_1201 <= sel_tmp6_mid2_fu_649_p3;
                sel_tmp8_mid2_reg_1207 <= sel_tmp8_mid2_fu_669_p3;
                sel_tmp_mid2_reg_1195 <= sel_tmp_mid2_fu_635_p3;
                tmp_last_reg_1218 <= tmp_last_fu_769_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten1_fu_552_p2 = ap_const_lv1_0))) then
                tmp_4_mid2_v_reg_1190 <= tmp_4_mid2_v_fu_590_p3;
            end if;
        end if;
    end process;
    tmp_3_reg_1166(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, input_dma_B_TVALID, ap_CS_fsm_state2, exitcond1_fu_467_p2, exitcond_flatten1_fu_552_p2, ap_enable_reg_pp1_iter0, ap_CS_fsm_state7, exitcond_flatten2_fu_1050_p2, ap_block_pp1_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((input_dma_B_TVALID = ap_const_logic_0) and (exitcond1_fu_467_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_467_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not(((input_dma_B_TVALID = ap_const_logic_0) and (exitcond1_fu_467_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_467_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond_flatten1_fu_552_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond_flatten1_fu_552_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond_flatten2_fu_1050_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;

    BIAS_V_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, ap_CS_fsm_state2, ap_enable_reg_pp1_iter0, tmp_2_fu_488_p1, tmp_4_mid2_fu_598_p1)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            BIAS_V_address0 <= tmp_4_mid2_fu_598_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            BIAS_V_address0 <= tmp_2_fu_488_p1(3 - 1 downto 0);
        else 
            BIAS_V_address0 <= "XXX";
        end if; 
    end process;


    BIAS_V_ce0_assign_proc : process(input_dma_B_TVALID, ap_CS_fsm_pp1_stage0, ap_CS_fsm_state2, exitcond1_fu_467_p2, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((not(((input_dma_B_TVALID = ap_const_logic_0) and (exitcond1_fu_467_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            BIAS_V_ce0 <= ap_const_logic_1;
        else 
            BIAS_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    BIAS_V_d0 <= input_dma_B_TDATA(26 - 1 downto 0);

    BIAS_V_we0_assign_proc : process(input_dma_B_TVALID, ap_CS_fsm_state2, exitcond1_fu_467_p2)
    begin
        if ((not(((input_dma_B_TVALID = ap_const_logic_0) and (exitcond1_fu_467_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_467_p2 = ap_const_lv1_0))) then 
            BIAS_V_we0 <= ap_const_logic_1;
        else 
            BIAS_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    OFM_0_V_address0 <= tmp_14_cast_fu_779_p1(8 - 1 downto 0);
    OFM_0_V_address1 <= tmp_21_cast_fu_1091_p1(8 - 1 downto 0);

    OFM_0_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            OFM_0_V_ce0 <= ap_const_logic_1;
        else 
            OFM_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OFM_0_V_ce1_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            OFM_0_V_ce1 <= ap_const_logic_1;
        else 
            OFM_0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    OFM_0_V_d1 <= ap_const_lv26_0;

    OFM_0_V_we1_assign_proc : process(ap_CS_fsm_state7, exitcond_flatten2_fu_1050_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond_flatten2_fu_1050_p2 = ap_const_lv1_0))) then 
            OFM_0_V_we1 <= ap_const_logic_1;
        else 
            OFM_0_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    OFM_1_V_address0 <= tmp_14_cast_fu_779_p1(8 - 1 downto 0);
    OFM_1_V_address1 <= tmp_21_cast_fu_1091_p1(8 - 1 downto 0);

    OFM_1_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            OFM_1_V_ce0 <= ap_const_logic_1;
        else 
            OFM_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OFM_1_V_ce1_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            OFM_1_V_ce1 <= ap_const_logic_1;
        else 
            OFM_1_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    OFM_1_V_d1 <= ap_const_lv26_0;

    OFM_1_V_we1_assign_proc : process(ap_CS_fsm_state7, exitcond_flatten2_fu_1050_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond_flatten2_fu_1050_p2 = ap_const_lv1_0))) then 
            OFM_1_V_we1 <= ap_const_logic_1;
        else 
            OFM_1_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    OFM_2_V_address0 <= tmp_14_cast_fu_779_p1(8 - 1 downto 0);
    OFM_2_V_address1 <= tmp_21_cast_fu_1091_p1(8 - 1 downto 0);

    OFM_2_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            OFM_2_V_ce0 <= ap_const_logic_1;
        else 
            OFM_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OFM_2_V_ce1_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            OFM_2_V_ce1 <= ap_const_logic_1;
        else 
            OFM_2_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    OFM_2_V_d1 <= ap_const_lv26_0;

    OFM_2_V_we1_assign_proc : process(ap_CS_fsm_state7, exitcond_flatten2_fu_1050_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond_flatten2_fu_1050_p2 = ap_const_lv1_0))) then 
            OFM_2_V_we1 <= ap_const_logic_1;
        else 
            OFM_2_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    OFM_3_V_address0 <= tmp_14_cast_fu_779_p1(8 - 1 downto 0);
    OFM_3_V_address1 <= tmp_21_cast_fu_1091_p1(8 - 1 downto 0);

    OFM_3_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            OFM_3_V_ce0 <= ap_const_logic_1;
        else 
            OFM_3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OFM_3_V_ce1_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            OFM_3_V_ce1 <= ap_const_logic_1;
        else 
            OFM_3_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    OFM_3_V_d1 <= ap_const_lv26_0;

    OFM_3_V_we1_assign_proc : process(ap_CS_fsm_state7, exitcond_flatten2_fu_1050_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond_flatten2_fu_1050_p2 = ap_const_lv1_0))) then 
            OFM_3_V_we1 <= ap_const_logic_1;
        else 
            OFM_3_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    OFM_4_V_address0 <= tmp_14_cast_fu_779_p1(8 - 1 downto 0);
    OFM_4_V_address1 <= tmp_21_cast_fu_1091_p1(8 - 1 downto 0);

    OFM_4_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            OFM_4_V_ce0 <= ap_const_logic_1;
        else 
            OFM_4_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OFM_4_V_ce1_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            OFM_4_V_ce1 <= ap_const_logic_1;
        else 
            OFM_4_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    OFM_4_V_d1 <= ap_const_lv26_0;

    OFM_4_V_we1_assign_proc : process(ap_CS_fsm_state7, exitcond_flatten2_fu_1050_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond_flatten2_fu_1050_p2 = ap_const_lv1_0))) then 
            OFM_4_V_we1 <= ap_const_logic_1;
        else 
            OFM_4_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    OFM_5_V_address0 <= tmp_14_cast_fu_779_p1(8 - 1 downto 0);
    OFM_5_V_address1 <= tmp_21_cast_fu_1091_p1(8 - 1 downto 0);

    OFM_5_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            OFM_5_V_ce0 <= ap_const_logic_1;
        else 
            OFM_5_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OFM_5_V_ce1_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            OFM_5_V_ce1 <= ap_const_logic_1;
        else 
            OFM_5_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    OFM_5_V_d1 <= ap_const_lv26_0;

    OFM_5_V_we1_assign_proc : process(ap_CS_fsm_state7, exitcond_flatten2_fu_1050_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond_flatten2_fu_1050_p2 = ap_const_lv1_0))) then 
            OFM_5_V_we1 <= ap_const_logic_1;
        else 
            OFM_5_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    OFM_6_V_address0 <= tmp_14_cast_fu_779_p1(8 - 1 downto 0);
    OFM_6_V_address1 <= tmp_21_cast_fu_1091_p1(8 - 1 downto 0);

    OFM_6_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            OFM_6_V_ce0 <= ap_const_logic_1;
        else 
            OFM_6_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OFM_6_V_ce1_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            OFM_6_V_ce1 <= ap_const_logic_1;
        else 
            OFM_6_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    OFM_6_V_d1 <= ap_const_lv26_0;

    OFM_6_V_we1_assign_proc : process(ap_CS_fsm_state7, exitcond_flatten2_fu_1050_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond_flatten2_fu_1050_p2 = ap_const_lv1_0))) then 
            OFM_6_V_we1 <= ap_const_logic_1;
        else 
            OFM_6_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    OFM_7_V_address0 <= tmp_14_cast_fu_779_p1(8 - 1 downto 0);
    OFM_7_V_address1 <= tmp_21_cast_fu_1091_p1(8 - 1 downto 0);

    OFM_7_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            OFM_7_V_ce0 <= ap_const_logic_1;
        else 
            OFM_7_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OFM_7_V_ce1_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            OFM_7_V_ce1 <= ap_const_logic_1;
        else 
            OFM_7_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    OFM_7_V_d1 <= ap_const_lv26_0;

    OFM_7_V_we1_assign_proc : process(ap_CS_fsm_state7, exitcond_flatten2_fu_1050_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond_flatten2_fu_1050_p2 = ap_const_lv1_0))) then 
            OFM_7_V_we1 <= ap_const_logic_1;
        else 
            OFM_7_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter1, ap_block_state5_io)
    begin
                ap_block_pp1_stage0_11001 <= ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_io));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter1, ap_block_state5_io)
    begin
                ap_block_pp1_stage0_subdone <= ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_io));
    end process;


    ap_block_state2_assign_proc : process(input_dma_B_TVALID, exitcond1_fu_467_p2)
    begin
                ap_block_state2 <= ((input_dma_B_TVALID = ap_const_logic_0) and (exitcond1_fu_467_p2 = ap_const_lv1_0));
    end process;

        ap_block_state4_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_io_assign_proc : process(exitcond_flatten1_reg_1181, ap_sig_ioackin_output_dma_O_TREADY)
    begin
                ap_block_state5_io <= ((ap_sig_ioackin_output_dma_O_TREADY = ap_const_logic_0) and (exitcond_flatten1_reg_1181 = ap_const_lv1_0));
    end process;

        ap_block_state5_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_793_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond_flatten1_reg_1181)
    begin
                ap_condition_793 <= ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten1_reg_1181 = ap_const_lv1_0));
    end process;


    ap_condition_pp1_exit_iter0_state4_assign_proc : process(exitcond_flatten1_fu_552_p2)
    begin
        if ((exitcond_flatten1_fu_552_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i1_phi_fu_394_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond_flatten1_reg_1181, i1_reg_390, tmp_4_mid2_v_reg_1190)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten1_reg_1181 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            ap_phi_mux_i1_phi_fu_394_p4 <= tmp_4_mid2_v_reg_1190;
        else 
            ap_phi_mux_i1_phi_fu_394_p4 <= i1_reg_390;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_output_dma_O_TREADY_assign_proc : process(output_dma_O_TREADY, ap_reg_ioackin_output_dma_O_TREADY)
    begin
        if ((ap_reg_ioackin_output_dma_O_TREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_output_dma_O_TREADY <= output_dma_O_TREADY;
        else 
            ap_sig_ioackin_output_dma_O_TREADY <= ap_const_logic_1;
        end if; 
    end process;

    bound_fu_509_p0 <= bound_fu_509_p00(32 - 1 downto 0);
    bound_fu_509_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(custom_Tr),64));
    bound_fu_509_p1 <= bound_fu_509_p10(32 - 1 downto 0);
    bound_fu_509_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(custom_Tc),64));
    bound_fu_509_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound_fu_509_p0) * unsigned(bound_fu_509_p1), 64));
    brmerge5_fu_998_p2 <= (newsignbit_1_fu_966_p3 or isneg_1_not_fu_992_p2);
    brmerge_fu_891_p2 <= (newsignbit_fu_859_p3 or isneg_not_fu_885_p2);
    brmerge_i_i1_fu_879_p2 <= (newsignbit_fu_859_p3 xor isneg_fu_845_p3);
    brmerge_i_i_fu_986_p2 <= (newsignbit_1_fu_966_p3 xor isneg_1_fu_952_p3);
    exitcond1_fu_467_p2 <= "1" when (i_reg_368 = ap_const_lv4_8) else "0";
    exitcond_flatten1_fu_552_p2 <= "1" when (indvar_flatten1_reg_379 = tmp_3_reg_1166) else "0";
    exitcond_flatten2_fu_1050_p2 <= "1" when (indvar_flatten2_reg_434 = bound_reg_1160) else "0";
    exitcond_flatten_fu_569_p2 <= "1" when (indvar_flatten_reg_401 = bound_reg_1160) else "0";
    grp_fu_1108_p0 <= ap_const_lv9_D(5 - 1 downto 0);
    grp_fu_1108_p1 <= 
        tmp_13_fu_713_p3 when (tmp_11_mid1_fu_684_p3(0) = '1') else 
        tmp_22_fu_721_p1;
    grp_fu_1108_p2 <= k_mid2_fu_697_p3(9 - 1 downto 0);
    grp_fu_1117_p0 <= ap_const_lv9_D(5 - 1 downto 0);
    grp_fu_1117_p1 <= tmp_7_mid2_v_fu_1075_p3(9 - 1 downto 0);
    grp_fu_1117_p2 <= k3_mid2_fu_1067_p3(9 - 1 downto 0);
    i_1_fu_473_p2 <= std_logic_vector(unsigned(i_reg_368) + unsigned(ap_const_lv4_1));
    i_2_fu_563_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(ap_phi_mux_i1_phi_fu_394_p4));
    indvar_flatten_next1_fu_557_p2 <= std_logic_vector(unsigned(indvar_flatten1_reg_379) + unsigned(ap_const_lv66_1));
    indvar_flatten_next2_fu_1055_p2 <= std_logic_vector(unsigned(indvar_flatten2_reg_434) + unsigned(ap_const_lv64_1));
    indvar_flatten_next_fu_802_p3 <= 
        ap_const_lv64_1 when (exitcond_flatten_fu_569_p2(0) = '1') else 
        indvar_flatten_op_fu_796_p2;
    indvar_flatten_op_fu_796_p2 <= std_logic_vector(unsigned(ap_const_lv64_1) + unsigned(indvar_flatten_reg_401));

    input_dma_B_TDATA_blk_n_assign_proc : process(input_dma_B_TVALID, ap_CS_fsm_state2, exitcond1_fu_467_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_467_p2 = ap_const_lv1_0))) then 
            input_dma_B_TDATA_blk_n <= input_dma_B_TVALID;
        else 
            input_dma_B_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_dma_B_TREADY_assign_proc : process(input_dma_B_TVALID, ap_CS_fsm_state2, exitcond1_fu_467_p2)
    begin
        if ((not(((input_dma_B_TVALID = ap_const_logic_0) and (exitcond1_fu_467_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_467_p2 = ap_const_lv1_0))) then 
            input_dma_B_TREADY <= ap_const_logic_1;
        else 
            input_dma_B_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    isneg_1_fu_952_p3 <= p_Val2_5_fu_946_p2(26 downto 26);
    isneg_1_not_fu_992_p2 <= (isneg_1_fu_952_p3 xor ap_const_lv1_1);
    isneg_fu_845_p3 <= p_Val2_2_fu_839_p2(26 downto 26);
    isneg_not_fu_885_p2 <= (isneg_fu_845_p3 xor ap_const_lv1_1);
    j_1_fu_1061_p2 <= std_logic_vector(unsigned(ap_const_lv31_1) + unsigned(j2_reg_445));
    j_2_fu_691_p2 <= std_logic_vector(unsigned(ap_const_lv31_1) + unsigned(j_mid_fu_574_p3));
    j_mid2_fu_750_p3 <= 
        j_mid_fu_574_p3 when (tmp_11_mid1_fu_684_p3(0) = '1') else 
        j_2_fu_691_p2;
    j_mid_fu_574_p3 <= 
        ap_const_lv31_0 when (exitcond_flatten_fu_569_p2(0) = '1') else 
        j_reg_412;
    k3_cast_fu_1041_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k3_reg_456),32));
    k3_mid2_fu_1067_p3 <= 
        k3_reg_456 when (tmp_9_fu_1045_p2(0) = '1') else 
        ap_const_lv31_0;
    k_1_fu_1102_p2 <= std_logic_vector(unsigned(ap_const_lv31_1) + unsigned(k3_mid2_fu_1067_p3));
    k_2_fu_790_p2 <= std_logic_vector(unsigned(ap_const_lv31_1) + unsigned(k_mid2_fu_697_p3));
    k_cast_fu_543_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_423),32));
    k_cast_mid2_cast_fu_746_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_mid2_fu_697_p3),32));
    k_mid2_fu_697_p3 <= 
        k_mid_fu_582_p3 when (tmp_11_mid1_fu_684_p3(0) = '1') else 
        ap_const_lv31_0;
    k_mid_fu_582_p3 <= 
        ap_const_lv31_0 when (exitcond_flatten_fu_569_p2(0) = '1') else 
        k_reg_423;
    newsignbit_1_fu_966_p3 <= p_Val2_6_fu_960_p2(25 downto 25);
    newsignbit_fu_859_p3 <= p_Val2_3_fu_853_p2(25 downto 25);
    notlhs_fu_609_p2 <= "1" when (ap_phi_mux_i1_phi_fu_394_p4 = ap_const_lv3_3) else "0";
    notlhs_mid1_fu_603_p2 <= "1" when (i_2_fu_563_p2 = ap_const_lv3_3) else "0";
    notlhs_mid2_fu_615_p3 <= 
        notlhs_mid1_fu_603_p2 when (exitcond_flatten_fu_569_p2(0) = '1') else 
        notlhs_fu_609_p2;
    notrhs_fu_538_p2 <= "1" when (tmp_4_fu_534_p1 = tmp_reg_1149) else "0";
    notrhs_mid1_fu_733_p2 <= "1" when (p_mid1_fu_705_p1 = tmp_reg_1149) else "0";
    notrhs_mid2_fu_738_p3 <= 
        notrhs_mid3_fu_677_p3 when (tmp_11_mid1_fu_684_p3(0) = '1') else 
        notrhs_mid1_fu_733_p2;
    notrhs_mid3_fu_677_p3 <= 
        notrhs_mid_reg_1171 when (exitcond_flatten_fu_569_p2(0) = '1') else 
        notrhs_fu_538_p2;
    notrhs_mid_fu_523_p2 <= "1" when (tmp_fu_493_p2 = ap_const_lv32_0) else "0";
        output_dma_O_TDATA <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_data_fu_1028_p3),56));


    output_dma_O_TDATA_blk_n_assign_proc : process(output_dma_O_TREADY, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond_flatten1_reg_1181)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten1_reg_1181 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            output_dma_O_TDATA_blk_n <= output_dma_O_TREADY;
        else 
            output_dma_O_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_dma_O_TLAST <= tmp_last_reg_1218(0);

    output_dma_O_TVALID_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond_flatten1_reg_1181, ap_block_pp1_stage0_01001, ap_reg_ioackin_output_dma_O_TREADY)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_01001) and (ap_reg_ioackin_output_dma_O_TREADY = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten1_reg_1181 = ap_const_lv1_0))) then 
            output_dma_O_TVALID <= ap_const_logic_1;
        else 
            output_dma_O_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    p_Val2_2_fu_839_p2 <= std_logic_vector(signed(tmp_14_fu_831_p1) + signed(tmp_15_fu_835_p1));
    p_Val2_3_45_fu_905_p3 <= 
        ap_const_lv26_2000000 when (underflow_fu_873_p2(0) = '1') else 
        p_Val2_3_fu_853_p2;
    p_Val2_3_fu_853_p2 <= std_logic_vector(unsigned(p_Val2_s_fu_824_p3) + unsigned(BIAS_V_q0));
    p_Val2_3_mux_fu_897_p3 <= 
        ap_const_lv26_1FFFFFF when (brmerge_i_i1_fu_879_p2(0) = '1') else 
        p_Val2_3_fu_853_p2;
    p_Val2_4_fu_935_p3 <= 
        OFM_6_V_q0 when (sel_tmp8_mid2_reg_1207(0) = '1') else 
        sel_tmp2_fu_928_p3;
    p_Val2_5_fu_946_p2 <= std_logic_vector(signed(tmp_15_fu_835_p1) + signed(tmp_17_fu_942_p1));
    p_Val2_6_46_fu_1012_p3 <= 
        ap_const_lv26_2000000 when (underflow_1_fu_980_p2(0) = '1') else 
        p_Val2_6_fu_960_p2;
    p_Val2_6_fu_960_p2 <= std_logic_vector(unsigned(p_Val2_4_fu_935_p3) + unsigned(BIAS_V_q0));
    p_Val2_6_mux_fu_1004_p3 <= 
        ap_const_lv26_1FFFFFF when (brmerge_i_i_fu_986_p2(0) = '1') else 
        p_Val2_6_fu_960_p2;
    p_Val2_s_fu_824_p3 <= 
        OFM_2_V_q0 when (sel_tmp8_mid2_reg_1207(0) = '1') else 
        sel_tmp7_fu_817_p3;
    p_mid1_fu_705_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_2_fu_691_p2),32));
    sel_tmp1_fu_921_p3 <= 
        OFM_4_V_q0 when (sel_tmp_mid2_reg_1195(0) = '1') else 
        OFM_7_V_q0;
    sel_tmp2_fu_928_p3 <= 
        OFM_5_V_q0 when (sel_tmp6_mid2_reg_1201(0) = '1') else 
        sel_tmp1_fu_921_p3;
    sel_tmp3_fu_643_p2 <= "1" when (ap_phi_mux_i1_phi_fu_394_p4 = ap_const_lv3_1) else "0";
    sel_tmp4_fu_663_p2 <= "1" when (ap_phi_mux_i1_phi_fu_394_p4 = ap_const_lv3_2) else "0";
    sel_tmp5_fu_810_p3 <= 
        OFM_0_V_q0 when (sel_tmp_mid2_reg_1195(0) = '1') else 
        OFM_3_V_q0;
    sel_tmp6_mid2_fu_649_p3 <= 
        sel_tmp_fu_629_p2 when (exitcond_flatten_fu_569_p2(0) = '1') else 
        sel_tmp3_fu_643_p2;
    sel_tmp7_fu_817_p3 <= 
        OFM_1_V_q0 when (sel_tmp6_mid2_reg_1201(0) = '1') else 
        sel_tmp5_fu_810_p3;
    sel_tmp8_mid1_fu_657_p2 <= "1" when (i_2_fu_563_p2 = ap_const_lv3_2) else "0";
    sel_tmp8_mid2_fu_669_p3 <= 
        sel_tmp8_mid1_fu_657_p2 when (exitcond_flatten_fu_569_p2(0) = '1') else 
        sel_tmp4_fu_663_p2;
    sel_tmp_fu_629_p2 <= "1" when (ap_phi_mux_i1_phi_fu_394_p4 = ap_const_lv3_0) else "0";
    sel_tmp_mid1_fu_623_p2 <= "1" when (i_2_fu_563_p2 = ap_const_lv3_0) else "0";
    sel_tmp_mid2_fu_635_p3 <= 
        sel_tmp_mid1_fu_623_p2 when (exitcond_flatten_fu_569_p2(0) = '1') else 
        sel_tmp_fu_629_p2;
    tmp6_fu_763_p2 <= (tmp_5_fu_758_p2 and notlhs_mid2_fu_615_p3);
    tmp_11_fu_709_p1 <= j_reg_412(9 - 1 downto 0);
    tmp_11_mid1_fu_684_p3 <= 
        tmp_11_mid_reg_1176 when (exitcond_flatten_fu_569_p2(0) = '1') else 
        tmp_6_fu_547_p2;
    tmp_11_mid_fu_529_p2 <= "1" when (signed(custom_Tc) > signed(ap_const_lv32_0)) else "0";
    tmp_13_fu_713_p3 <= 
        ap_const_lv9_0 when (exitcond_flatten_fu_569_p2(0) = '1') else 
        tmp_11_fu_709_p1;
        tmp_14_cast_fu_779_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1108_p3),64));

        tmp_14_fu_831_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_s_fu_824_p3),27));

        tmp_15_fu_835_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(BIAS_V_q0),27));

    tmp_16_fu_867_p2 <= (newsignbit_fu_859_p3 xor ap_const_lv1_1);
        tmp_17_fu_942_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_4_fu_935_p3),27));

    tmp_18_fu_974_p2 <= (newsignbit_1_fu_966_p3 xor ap_const_lv1_1);
        tmp_21_cast_fu_1091_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1117_p3),64));

    tmp_22_fu_721_p1 <= j_2_fu_691_p2(9 - 1 downto 0);
    tmp_2_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_368),64));
    tmp_3_fu_515_p3 <= (bound_fu_509_p2 & ap_const_lv2_0);
    tmp_4_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_412),32));
    tmp_4_mid2_fu_598_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_mid2_v_fu_590_p3),64));
    tmp_4_mid2_v_fu_590_p3 <= 
        i_2_fu_563_p2 when (exitcond_flatten_fu_569_p2(0) = '1') else 
        ap_phi_mux_i1_phi_fu_394_p4;
    tmp_5_fu_758_p2 <= "1" when (k_cast_mid2_cast_fu_746_p1 = tmp_s_reg_1155) else "0";
    tmp_6_fu_547_p2 <= "1" when (signed(k_cast_fu_543_p1) < signed(custom_Tc)) else "0";
    tmp_7_mid2_v_fu_1075_p3 <= 
        j2_reg_445 when (tmp_9_fu_1045_p2(0) = '1') else 
        j_1_fu_1061_p2;
    tmp_9_fu_1045_p2 <= "1" when (signed(k3_cast_fu_1041_p1) < signed(custom_Tc)) else "0";
    tmp_data_data1_V_fu_913_p3 <= 
        p_Val2_3_mux_fu_897_p3 when (brmerge_fu_891_p2(0) = '1') else 
        p_Val2_3_45_fu_905_p3;
    tmp_data_data2_V_fu_1020_p3 <= 
        p_Val2_6_mux_fu_1004_p3 when (brmerge5_fu_998_p2(0) = '1') else 
        p_Val2_6_46_fu_1012_p3;
    tmp_data_fu_1028_p3 <= (tmp_data_data2_V_fu_1020_p3 & tmp_data_data1_V_fu_913_p3);
    tmp_fu_493_p2 <= std_logic_vector(unsigned(custom_Tr) + unsigned(ap_const_lv32_FFFFFFFF));
    tmp_last_fu_769_p2 <= (tmp6_fu_763_p2 and notrhs_mid2_fu_738_p3);
    tmp_s_fu_498_p2 <= std_logic_vector(unsigned(custom_Tc) + unsigned(ap_const_lv32_FFFFFFFF));
    underflow_1_fu_980_p2 <= (tmp_18_fu_974_p2 and isneg_1_fu_952_p3);
    underflow_fu_873_p2 <= (tmp_16_fu_867_p2 and isneg_fu_845_p3);
end behav;
