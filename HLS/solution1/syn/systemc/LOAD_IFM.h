// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _LOAD_IFM_HH_
#define _LOAD_IFM_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "top_mac_muladd_5ncud.h"

namespace ap_rtl {

struct LOAD_IFM : public sc_module {
    // Port declarations 40
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<56> > input_dma_I_TDATA;
    sc_in< sc_logic > input_dma_I_TVALID;
    sc_out< sc_logic > input_dma_I_TREADY;
    sc_in< sc_logic > input_dma_I_TLAST;
    sc_out< sc_lv<8> > IFM_0_V_address0;
    sc_out< sc_logic > IFM_0_V_ce0;
    sc_out< sc_logic > IFM_0_V_we0;
    sc_out< sc_lv<26> > IFM_0_V_d0;
    sc_out< sc_lv<8> > IFM_1_V_address0;
    sc_out< sc_logic > IFM_1_V_ce0;
    sc_out< sc_logic > IFM_1_V_we0;
    sc_out< sc_lv<26> > IFM_1_V_d0;
    sc_out< sc_lv<8> > IFM_2_V_address0;
    sc_out< sc_logic > IFM_2_V_ce0;
    sc_out< sc_logic > IFM_2_V_we0;
    sc_out< sc_lv<26> > IFM_2_V_d0;
    sc_out< sc_lv<8> > IFM_3_V_address0;
    sc_out< sc_logic > IFM_3_V_ce0;
    sc_out< sc_logic > IFM_3_V_we0;
    sc_out< sc_lv<26> > IFM_3_V_d0;
    sc_out< sc_lv<8> > IFM_4_V_address0;
    sc_out< sc_logic > IFM_4_V_ce0;
    sc_out< sc_logic > IFM_4_V_we0;
    sc_out< sc_lv<26> > IFM_4_V_d0;
    sc_out< sc_lv<8> > IFM_5_V_address0;
    sc_out< sc_logic > IFM_5_V_ce0;
    sc_out< sc_logic > IFM_5_V_we0;
    sc_out< sc_lv<26> > IFM_5_V_d0;
    sc_out< sc_lv<8> > IFM_6_V_address0;
    sc_out< sc_logic > IFM_6_V_ce0;
    sc_out< sc_logic > IFM_6_V_we0;
    sc_out< sc_lv<26> > IFM_6_V_d0;
    sc_in< sc_lv<32> > custom_Tr;
    sc_in< sc_lv<32> > custom_Tc;


    // Module declarations
    LOAD_IFM(sc_module_name name);
    SC_HAS_PROCESS(LOAD_IFM);

    ~LOAD_IFM();

    sc_trace_file* mVcdFile;

    top_mac_muladd_5ncud<1,1,5,9,9,9>* top_mac_muladd_5ncud_U62;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > input_dma_I_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > exitcond_flatten5_fu_284_p2;
    sc_signal< sc_lv<64> > bound_fu_255_p2;
    sc_signal< sc_lv<64> > bound_reg_496;
    sc_signal< sc_lv<66> > tmp_fu_261_p3;
    sc_signal< sc_lv<66> > tmp_reg_501;
    sc_signal< sc_lv<1> > tmp_43_mid_fu_269_p2;
    sc_signal< sc_lv<1> > tmp_43_mid_reg_506;
    sc_signal< sc_lv<66> > indvar_flatten_next5_fu_289_p2;
    sc_signal< bool > ap_block_state2;
    sc_signal< sc_lv<3> > i_mid2_fu_369_p3;
    sc_signal< sc_lv<31> > j_mid2_fu_415_p3;
    sc_signal< sc_lv<31> > m_2_fu_462_p2;
    sc_signal< sc_lv<64> > indvar_flatten_next_fu_474_p3;
    sc_signal< sc_lv<66> > indvar_flatten5_reg_192;
    sc_signal< sc_lv<3> > i_reg_203;
    sc_signal< sc_lv<64> > indvar_flatten_reg_214;
    sc_signal< sc_lv<31> > j_reg_225;
    sc_signal< sc_lv<31> > m_reg_236;
    sc_signal< sc_lv<64> > tmp_46_cast_fu_452_p1;
    sc_signal< sc_lv<26> > tmp_64_fu_427_p1;
    sc_signal< sc_lv<1> > tmp_mid2_fu_334_p3;
    sc_signal< sc_lv<3> > tmp_t_mid2_fu_354_p3;
    sc_signal< sc_lv<32> > bound_fu_255_p0;
    sc_signal< sc_lv<32> > bound_fu_255_p1;
    sc_signal< sc_lv<32> > m_cast_fu_275_p1;
    sc_signal< sc_lv<1> > exitcond_flatten_fu_301_p2;
    sc_signal< sc_lv<3> > i_5_fu_295_p2;
    sc_signal< sc_lv<1> > tmp_mid1_fu_322_p2;
    sc_signal< sc_lv<1> > tmp_40_fu_328_p2;
    sc_signal< sc_lv<3> > tmp_t_mid1_fu_342_p2;
    sc_signal< sc_lv<3> > tmp_t_fu_348_p2;
    sc_signal< sc_lv<1> > tmp_s_fu_279_p2;
    sc_signal< sc_lv<31> > j_mid_fu_306_p3;
    sc_signal< sc_lv<1> > tmp_43_mid1_fu_362_p3;
    sc_signal< sc_lv<31> > m_mid_fu_314_p3;
    sc_signal< sc_lv<9> > tmp_60_fu_391_p1;
    sc_signal< sc_lv<31> > j_4_fu_377_p2;
    sc_signal< sc_lv<9> > tmp_61_fu_395_p3;
    sc_signal< sc_lv<9> > tmp_62_fu_403_p1;
    sc_signal< sc_lv<31> > m_mid2_fu_383_p3;
    sc_signal< sc_lv<9> > grp_fu_482_p3;
    sc_signal< sc_lv<64> > indvar_flatten_op_fu_468_p2;
    sc_signal< sc_lv<5> > grp_fu_482_p0;
    sc_signal< sc_lv<9> > grp_fu_482_p1;
    sc_signal< sc_lv<9> > grp_fu_482_p2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_lv<64> > bound_fu_255_p00;
    sc_signal< sc_lv<64> > bound_fu_255_p10;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_state2;
    static const sc_lv<3> ap_ST_fsm_state3;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<66> ap_const_lv66_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<31> ap_const_lv31_0;
    static const sc_lv<3> ap_const_lv3_2;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<3> ap_const_lv3_5;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<66> ap_const_lv66_1;
    static const sc_lv<3> ap_const_lv3_3;
    static const sc_lv<31> ap_const_lv31_1;
    static const sc_lv<9> ap_const_lv9_0;
    static const sc_lv<32> ap_const_lv32_1A;
    static const sc_lv<32> ap_const_lv32_33;
    static const sc_lv<64> ap_const_lv64_1;
    static const sc_lv<9> ap_const_lv9_D;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_IFM_0_V_address0();
    void thread_IFM_0_V_ce0();
    void thread_IFM_0_V_d0();
    void thread_IFM_0_V_we0();
    void thread_IFM_1_V_address0();
    void thread_IFM_1_V_ce0();
    void thread_IFM_1_V_d0();
    void thread_IFM_1_V_we0();
    void thread_IFM_2_V_address0();
    void thread_IFM_2_V_ce0();
    void thread_IFM_2_V_d0();
    void thread_IFM_2_V_we0();
    void thread_IFM_3_V_address0();
    void thread_IFM_3_V_ce0();
    void thread_IFM_3_V_d0();
    void thread_IFM_3_V_we0();
    void thread_IFM_4_V_address0();
    void thread_IFM_4_V_ce0();
    void thread_IFM_4_V_d0();
    void thread_IFM_4_V_we0();
    void thread_IFM_5_V_address0();
    void thread_IFM_5_V_ce0();
    void thread_IFM_5_V_d0();
    void thread_IFM_5_V_we0();
    void thread_IFM_6_V_address0();
    void thread_IFM_6_V_ce0();
    void thread_IFM_6_V_d0();
    void thread_IFM_6_V_we0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_block_state2();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_bound_fu_255_p0();
    void thread_bound_fu_255_p00();
    void thread_bound_fu_255_p1();
    void thread_bound_fu_255_p10();
    void thread_bound_fu_255_p2();
    void thread_exitcond_flatten5_fu_284_p2();
    void thread_exitcond_flatten_fu_301_p2();
    void thread_grp_fu_482_p0();
    void thread_grp_fu_482_p1();
    void thread_grp_fu_482_p2();
    void thread_i_5_fu_295_p2();
    void thread_i_mid2_fu_369_p3();
    void thread_indvar_flatten_next5_fu_289_p2();
    void thread_indvar_flatten_next_fu_474_p3();
    void thread_indvar_flatten_op_fu_468_p2();
    void thread_input_dma_I_TDATA_blk_n();
    void thread_input_dma_I_TREADY();
    void thread_j_4_fu_377_p2();
    void thread_j_mid2_fu_415_p3();
    void thread_j_mid_fu_306_p3();
    void thread_m_2_fu_462_p2();
    void thread_m_cast_fu_275_p1();
    void thread_m_mid2_fu_383_p3();
    void thread_m_mid_fu_314_p3();
    void thread_tmp_40_fu_328_p2();
    void thread_tmp_43_mid1_fu_362_p3();
    void thread_tmp_43_mid_fu_269_p2();
    void thread_tmp_46_cast_fu_452_p1();
    void thread_tmp_60_fu_391_p1();
    void thread_tmp_61_fu_395_p3();
    void thread_tmp_62_fu_403_p1();
    void thread_tmp_64_fu_427_p1();
    void thread_tmp_fu_261_p3();
    void thread_tmp_mid1_fu_322_p2();
    void thread_tmp_mid2_fu_334_p3();
    void thread_tmp_s_fu_279_p2();
    void thread_tmp_t_fu_348_p2();
    void thread_tmp_t_mid1_fu_342_p2();
    void thread_tmp_t_mid2_fu_354_p3();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
