// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _LOAD_IFM_HH_
#define _LOAD_IFM_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "top_mac_muladd_5ncud.h"

namespace ap_rtl {

struct LOAD_IFM : public sc_module {
    // Port declarations 40
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<64> > input_dma_I_TDATA;
    sc_in< sc_logic > input_dma_I_TVALID;
    sc_out< sc_logic > input_dma_I_TREADY;
    sc_in< sc_logic > input_dma_I_TLAST;
    sc_out< sc_lv<8> > IFM_0_address0;
    sc_out< sc_logic > IFM_0_ce0;
    sc_out< sc_logic > IFM_0_we0;
    sc_out< sc_lv<32> > IFM_0_d0;
    sc_out< sc_lv<8> > IFM_1_address0;
    sc_out< sc_logic > IFM_1_ce0;
    sc_out< sc_logic > IFM_1_we0;
    sc_out< sc_lv<32> > IFM_1_d0;
    sc_out< sc_lv<8> > IFM_2_address0;
    sc_out< sc_logic > IFM_2_ce0;
    sc_out< sc_logic > IFM_2_we0;
    sc_out< sc_lv<32> > IFM_2_d0;
    sc_out< sc_lv<8> > IFM_3_address0;
    sc_out< sc_logic > IFM_3_ce0;
    sc_out< sc_logic > IFM_3_we0;
    sc_out< sc_lv<32> > IFM_3_d0;
    sc_out< sc_lv<8> > IFM_4_address0;
    sc_out< sc_logic > IFM_4_ce0;
    sc_out< sc_logic > IFM_4_we0;
    sc_out< sc_lv<32> > IFM_4_d0;
    sc_out< sc_lv<8> > IFM_5_address0;
    sc_out< sc_logic > IFM_5_ce0;
    sc_out< sc_logic > IFM_5_we0;
    sc_out< sc_lv<32> > IFM_5_d0;
    sc_out< sc_lv<8> > IFM_6_address0;
    sc_out< sc_logic > IFM_6_ce0;
    sc_out< sc_logic > IFM_6_we0;
    sc_out< sc_lv<32> > IFM_6_d0;
    sc_in< sc_lv<32> > custom_Tr;
    sc_in< sc_lv<32> > custom_Tc;


    // Module declarations
    LOAD_IFM(sc_module_name name);
    SC_HAS_PROCESS(LOAD_IFM);

    ~LOAD_IFM();

    sc_trace_file* mVcdFile;

    top_mac_muladd_5ncud<1,1,5,9,9,9>* top_mac_muladd_5ncud_U454;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > input_dma_I_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > exitcond_flatten5_fu_287_p2;
    sc_signal< sc_lv<64> > bound_fu_258_p2;
    sc_signal< sc_lv<64> > bound_reg_507;
    sc_signal< sc_lv<66> > tmp_fu_264_p3;
    sc_signal< sc_lv<66> > tmp_reg_512;
    sc_signal< sc_lv<1> > tmp_22_mid_fu_272_p2;
    sc_signal< sc_lv<1> > tmp_22_mid_reg_517;
    sc_signal< sc_lv<66> > indvar_flatten_next5_fu_292_p2;
    sc_signal< bool > ap_block_state2;
    sc_signal< sc_lv<3> > i_mid2_fu_372_p3;
    sc_signal< sc_lv<31> > j_mid2_fu_418_p3;
    sc_signal< sc_lv<31> > m_2_fu_473_p2;
    sc_signal< sc_lv<64> > indvar_flatten_next_fu_485_p3;
    sc_signal< sc_lv<66> > indvar_flatten5_reg_195;
    sc_signal< sc_lv<3> > i_reg_206;
    sc_signal< sc_lv<64> > indvar_flatten_reg_217;
    sc_signal< sc_lv<31> > j_reg_228;
    sc_signal< sc_lv<31> > m_reg_239;
    sc_signal< sc_lv<64> > tmp_27_cast_fu_463_p1;
    sc_signal< sc_lv<32> > ifm_input_dma_data_d_fu_434_p1;
    sc_signal< sc_lv<1> > tmp_19_mid2_fu_337_p3;
    sc_signal< sc_lv<3> > tmp_t_mid2_fu_357_p3;
    sc_signal< sc_lv<32> > ifm_input_dma_data_d_1_fu_452_p1;
    sc_signal< sc_lv<32> > bound_fu_258_p0;
    sc_signal< sc_lv<32> > bound_fu_258_p1;
    sc_signal< sc_lv<32> > m_cast_fu_278_p1;
    sc_signal< sc_lv<1> > exitcond_flatten_fu_304_p2;
    sc_signal< sc_lv<3> > i_5_fu_298_p2;
    sc_signal< sc_lv<1> > tmp_19_mid1_fu_325_p2;
    sc_signal< sc_lv<1> > tmp_s_fu_331_p2;
    sc_signal< sc_lv<3> > tmp_t_mid1_fu_345_p2;
    sc_signal< sc_lv<3> > tmp_t_fu_351_p2;
    sc_signal< sc_lv<1> > tmp_20_fu_282_p2;
    sc_signal< sc_lv<31> > j_mid_fu_309_p3;
    sc_signal< sc_lv<1> > tmp_22_mid1_fu_365_p3;
    sc_signal< sc_lv<31> > m_mid_fu_317_p3;
    sc_signal< sc_lv<9> > tmp_32_fu_394_p1;
    sc_signal< sc_lv<31> > j_4_fu_380_p2;
    sc_signal< sc_lv<9> > tmp_33_fu_398_p3;
    sc_signal< sc_lv<9> > tmp_34_fu_406_p1;
    sc_signal< sc_lv<32> > tmp_36_fu_430_p1;
    sc_signal< sc_lv<32> > ifm_input_dma_data_d_2_fu_442_p4;
    sc_signal< sc_lv<31> > m_mid2_fu_386_p3;
    sc_signal< sc_lv<9> > grp_fu_493_p3;
    sc_signal< sc_lv<64> > indvar_flatten_op_fu_479_p2;
    sc_signal< sc_lv<5> > grp_fu_493_p0;
    sc_signal< sc_lv<9> > grp_fu_493_p1;
    sc_signal< sc_lv<9> > grp_fu_493_p2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_lv<64> > bound_fu_258_p00;
    sc_signal< sc_lv<64> > bound_fu_258_p10;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_state2;
    static const sc_lv<3> ap_ST_fsm_state3;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<66> ap_const_lv66_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<31> ap_const_lv31_0;
    static const sc_lv<3> ap_const_lv3_2;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<3> ap_const_lv3_5;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<66> ap_const_lv66_1;
    static const sc_lv<3> ap_const_lv3_3;
    static const sc_lv<31> ap_const_lv31_1;
    static const sc_lv<9> ap_const_lv9_0;
    static const sc_lv<32> ap_const_lv32_20;
    static const sc_lv<32> ap_const_lv32_3F;
    static const sc_lv<64> ap_const_lv64_1;
    static const sc_lv<9> ap_const_lv9_D;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_IFM_0_address0();
    void thread_IFM_0_ce0();
    void thread_IFM_0_d0();
    void thread_IFM_0_we0();
    void thread_IFM_1_address0();
    void thread_IFM_1_ce0();
    void thread_IFM_1_d0();
    void thread_IFM_1_we0();
    void thread_IFM_2_address0();
    void thread_IFM_2_ce0();
    void thread_IFM_2_d0();
    void thread_IFM_2_we0();
    void thread_IFM_3_address0();
    void thread_IFM_3_ce0();
    void thread_IFM_3_d0();
    void thread_IFM_3_we0();
    void thread_IFM_4_address0();
    void thread_IFM_4_ce0();
    void thread_IFM_4_d0();
    void thread_IFM_4_we0();
    void thread_IFM_5_address0();
    void thread_IFM_5_ce0();
    void thread_IFM_5_d0();
    void thread_IFM_5_we0();
    void thread_IFM_6_address0();
    void thread_IFM_6_ce0();
    void thread_IFM_6_d0();
    void thread_IFM_6_we0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_block_state2();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_bound_fu_258_p0();
    void thread_bound_fu_258_p00();
    void thread_bound_fu_258_p1();
    void thread_bound_fu_258_p10();
    void thread_bound_fu_258_p2();
    void thread_exitcond_flatten5_fu_287_p2();
    void thread_exitcond_flatten_fu_304_p2();
    void thread_grp_fu_493_p0();
    void thread_grp_fu_493_p1();
    void thread_grp_fu_493_p2();
    void thread_i_5_fu_298_p2();
    void thread_i_mid2_fu_372_p3();
    void thread_ifm_input_dma_data_d_1_fu_452_p1();
    void thread_ifm_input_dma_data_d_2_fu_442_p4();
    void thread_ifm_input_dma_data_d_fu_434_p1();
    void thread_indvar_flatten_next5_fu_292_p2();
    void thread_indvar_flatten_next_fu_485_p3();
    void thread_indvar_flatten_op_fu_479_p2();
    void thread_input_dma_I_TDATA_blk_n();
    void thread_input_dma_I_TREADY();
    void thread_j_4_fu_380_p2();
    void thread_j_mid2_fu_418_p3();
    void thread_j_mid_fu_309_p3();
    void thread_m_2_fu_473_p2();
    void thread_m_cast_fu_278_p1();
    void thread_m_mid2_fu_386_p3();
    void thread_m_mid_fu_317_p3();
    void thread_tmp_19_mid1_fu_325_p2();
    void thread_tmp_19_mid2_fu_337_p3();
    void thread_tmp_20_fu_282_p2();
    void thread_tmp_22_mid1_fu_365_p3();
    void thread_tmp_22_mid_fu_272_p2();
    void thread_tmp_27_cast_fu_463_p1();
    void thread_tmp_32_fu_394_p1();
    void thread_tmp_33_fu_398_p3();
    void thread_tmp_34_fu_406_p1();
    void thread_tmp_36_fu_430_p1();
    void thread_tmp_fu_264_p3();
    void thread_tmp_s_fu_331_p2();
    void thread_tmp_t_fu_351_p2();
    void thread_tmp_t_mid1_fu_345_p2();
    void thread_tmp_t_mid2_fu_357_p3();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
