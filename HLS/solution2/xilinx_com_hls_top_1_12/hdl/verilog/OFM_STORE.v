// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module OFM_STORE (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        output_dma_O_TDATA,
        output_dma_O_TVALID,
        output_dma_O_TREADY,
        output_dma_O_TLAST,
        input_dma_B_TDATA,
        input_dma_B_TVALID,
        input_dma_B_TREADY,
        input_dma_B_TLAST,
        OFM_0_V_address0,
        OFM_0_V_ce0,
        OFM_0_V_q0,
        OFM_0_V_address1,
        OFM_0_V_ce1,
        OFM_0_V_we1,
        OFM_0_V_d1,
        OFM_1_V_address0,
        OFM_1_V_ce0,
        OFM_1_V_q0,
        OFM_1_V_address1,
        OFM_1_V_ce1,
        OFM_1_V_we1,
        OFM_1_V_d1,
        OFM_2_V_address0,
        OFM_2_V_ce0,
        OFM_2_V_q0,
        OFM_2_V_address1,
        OFM_2_V_ce1,
        OFM_2_V_we1,
        OFM_2_V_d1,
        OFM_3_V_address0,
        OFM_3_V_ce0,
        OFM_3_V_q0,
        OFM_3_V_address1,
        OFM_3_V_ce1,
        OFM_3_V_we1,
        OFM_3_V_d1,
        OFM_4_V_address0,
        OFM_4_V_ce0,
        OFM_4_V_q0,
        OFM_4_V_address1,
        OFM_4_V_ce1,
        OFM_4_V_we1,
        OFM_4_V_d1,
        OFM_5_V_address0,
        OFM_5_V_ce0,
        OFM_5_V_q0,
        OFM_5_V_address1,
        OFM_5_V_ce1,
        OFM_5_V_we1,
        OFM_5_V_d1,
        OFM_6_V_address0,
        OFM_6_V_ce0,
        OFM_6_V_q0,
        OFM_6_V_address1,
        OFM_6_V_ce1,
        OFM_6_V_we1,
        OFM_6_V_d1,
        OFM_7_V_address0,
        OFM_7_V_ce0,
        OFM_7_V_q0,
        OFM_7_V_address1,
        OFM_7_V_ce1,
        OFM_7_V_we1,
        OFM_7_V_d1,
        BIAS_V_2_address0,
        BIAS_V_2_ce0,
        BIAS_V_2_we0,
        BIAS_V_2_d0,
        BIAS_V_2_q0,
        custom_Tr,
        custom_Tc
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_pp1_stage0 = 7'd8;
parameter    ap_ST_fsm_state6 = 7'd16;
parameter    ap_ST_fsm_state7 = 7'd32;
parameter    ap_ST_fsm_state8 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [63:0] output_dma_O_TDATA;
output   output_dma_O_TVALID;
input   output_dma_O_TREADY;
output   output_dma_O_TLAST;
input  [31:0] input_dma_B_TDATA;
input   input_dma_B_TVALID;
output   input_dma_B_TREADY;
input   input_dma_B_TLAST;
output  [7:0] OFM_0_V_address0;
output   OFM_0_V_ce0;
input  [31:0] OFM_0_V_q0;
output  [7:0] OFM_0_V_address1;
output   OFM_0_V_ce1;
output   OFM_0_V_we1;
output  [31:0] OFM_0_V_d1;
output  [7:0] OFM_1_V_address0;
output   OFM_1_V_ce0;
input  [31:0] OFM_1_V_q0;
output  [7:0] OFM_1_V_address1;
output   OFM_1_V_ce1;
output   OFM_1_V_we1;
output  [31:0] OFM_1_V_d1;
output  [7:0] OFM_2_V_address0;
output   OFM_2_V_ce0;
input  [31:0] OFM_2_V_q0;
output  [7:0] OFM_2_V_address1;
output   OFM_2_V_ce1;
output   OFM_2_V_we1;
output  [31:0] OFM_2_V_d1;
output  [7:0] OFM_3_V_address0;
output   OFM_3_V_ce0;
input  [31:0] OFM_3_V_q0;
output  [7:0] OFM_3_V_address1;
output   OFM_3_V_ce1;
output   OFM_3_V_we1;
output  [31:0] OFM_3_V_d1;
output  [7:0] OFM_4_V_address0;
output   OFM_4_V_ce0;
input  [31:0] OFM_4_V_q0;
output  [7:0] OFM_4_V_address1;
output   OFM_4_V_ce1;
output   OFM_4_V_we1;
output  [31:0] OFM_4_V_d1;
output  [7:0] OFM_5_V_address0;
output   OFM_5_V_ce0;
input  [31:0] OFM_5_V_q0;
output  [7:0] OFM_5_V_address1;
output   OFM_5_V_ce1;
output   OFM_5_V_we1;
output  [31:0] OFM_5_V_d1;
output  [7:0] OFM_6_V_address0;
output   OFM_6_V_ce0;
input  [31:0] OFM_6_V_q0;
output  [7:0] OFM_6_V_address1;
output   OFM_6_V_ce1;
output   OFM_6_V_we1;
output  [31:0] OFM_6_V_d1;
output  [7:0] OFM_7_V_address0;
output   OFM_7_V_ce0;
input  [31:0] OFM_7_V_q0;
output  [7:0] OFM_7_V_address1;
output   OFM_7_V_ce1;
output   OFM_7_V_we1;
output  [31:0] OFM_7_V_d1;
output  [2:0] BIAS_V_2_address0;
output   BIAS_V_2_ce0;
output   BIAS_V_2_we0;
output  [31:0] BIAS_V_2_d0;
input  [31:0] BIAS_V_2_q0;
input  [31:0] custom_Tr;
input  [31:0] custom_Tc;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg output_dma_O_TVALID;
reg input_dma_B_TREADY;
reg OFM_0_V_ce0;
reg OFM_0_V_ce1;
reg OFM_0_V_we1;
reg OFM_1_V_ce0;
reg OFM_1_V_ce1;
reg OFM_1_V_we1;
reg OFM_2_V_ce0;
reg OFM_2_V_ce1;
reg OFM_2_V_we1;
reg OFM_3_V_ce0;
reg OFM_3_V_ce1;
reg OFM_3_V_we1;
reg OFM_4_V_ce0;
reg OFM_4_V_ce1;
reg OFM_4_V_we1;
reg OFM_5_V_ce0;
reg OFM_5_V_ce1;
reg OFM_5_V_we1;
reg OFM_6_V_ce0;
reg OFM_6_V_ce1;
reg OFM_6_V_we1;
reg OFM_7_V_ce0;
reg OFM_7_V_ce1;
reg OFM_7_V_we1;
reg[2:0] BIAS_V_2_address0;
reg BIAS_V_2_ce0;
reg BIAS_V_2_we0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    output_dma_O_TDATA_blk_n;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] exitcond_flatten1_reg_1182;
reg    input_dma_B_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond1_fu_497_p2;
reg   [65:0] indvar_flatten1_reg_392;
reg   [2:0] i1_reg_403;
reg   [63:0] indvar_flatten_reg_414;
reg   [30:0] j_reg_425;
reg   [30:0] k_reg_436;
wire   [3:0] i_1_fu_503_p2;
reg    ap_block_state2;
wire   [31:0] tmp_fu_519_p2;
reg   [31:0] tmp_reg_1150;
wire    ap_CS_fsm_state3;
wire   [31:0] tmp_s_fu_524_p2;
reg   [31:0] tmp_s_reg_1156;
wire   [63:0] bound_fu_535_p2;
reg   [63:0] bound_reg_1161;
wire   [65:0] tmp_3_fu_541_p3;
reg   [65:0] tmp_3_reg_1167;
wire   [0:0] notrhs_mid_fu_549_p2;
reg   [0:0] notrhs_mid_reg_1172;
wire   [0:0] tmp_11_mid_fu_555_p2;
reg   [0:0] tmp_11_mid_reg_1177;
wire   [0:0] exitcond_flatten1_fu_578_p2;
wire    ap_block_state4_pp1_stage0_iter0;
wire    ap_block_state5_pp1_stage0_iter1;
reg    ap_sig_ioackin_output_dma_O_TREADY;
reg    ap_block_state5_io;
reg    ap_block_pp1_stage0_11001;
wire   [65:0] indvar_flatten_next2_fu_583_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [2:0] tmp_4_mid2_v_fu_616_p3;
reg   [2:0] tmp_4_mid2_v_reg_1191;
wire   [0:0] sel_tmp_mid2_fu_661_p3;
reg   [0:0] sel_tmp_mid2_reg_1196;
wire   [0:0] sel_tmp2_mid2_fu_675_p3;
reg   [0:0] sel_tmp2_mid2_reg_1201;
wire   [0:0] sel_tmp4_mid2_fu_695_p3;
reg   [0:0] sel_tmp4_mid2_reg_1206;
wire   [30:0] j_mid2_fu_776_p3;
wire   [0:0] tmp_last_fu_795_p2;
reg   [0:0] tmp_last_reg_1216;
wire   [30:0] k_2_fu_816_p2;
wire   [63:0] indvar_flatten_next_fu_828_p3;
wire   [63:0] indvar_flatten_next1_fu_1056_p2;
wire    ap_CS_fsm_state7;
wire   [30:0] tmp_7_mid2_v_fu_1076_p3;
wire   [0:0] exitcond_flatten2_fu_1051_p2;
wire   [30:0] k_1_fu_1103_p2;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state4;
reg   [3:0] i_reg_381;
reg   [2:0] ap_phi_mux_i1_phi_fu_407_p4;
reg  signed [31:0] ap_phi_mux_p_Val2_s_phi_fu_450_p8;
wire  signed [31:0] ap_phi_reg_pp1_iter1_p_Val2_s_reg_447;
reg   [63:0] indvar_flatten2_reg_464;
wire    ap_CS_fsm_state6;
reg   [30:0] j2_reg_475;
reg   [30:0] k3_reg_486;
wire   [63:0] tmp_2_fu_514_p1;
wire  signed [63:0] tmp_14_cast_fu_805_p1;
wire   [63:0] tmp_4_mid2_fu_624_p1;
wire  signed [63:0] tmp_16_cast_fu_1092_p1;
wire    ap_block_pp1_stage0_01001;
reg    ap_reg_ioackin_output_dma_O_TREADY;
wire   [31:0] bound_fu_535_p0;
wire   [31:0] bound_fu_535_p1;
wire   [31:0] tmp_4_fu_560_p1;
wire   [31:0] k_cast_fu_569_p1;
wire   [0:0] exitcond_flatten_fu_595_p2;
wire   [2:0] i_2_fu_589_p2;
wire   [0:0] notlhs_mid1_fu_629_p2;
wire   [0:0] notlhs_fu_635_p2;
wire   [0:0] sel_tmp_mid1_fu_649_p2;
wire   [0:0] sel_tmp_fu_655_p2;
wire   [0:0] sel_tmp2_fu_669_p2;
wire   [0:0] sel_tmp4_mid1_fu_683_p2;
wire   [0:0] sel_tmp4_fu_689_p2;
wire   [0:0] notrhs_fu_564_p2;
wire   [0:0] tmp_6_fu_573_p2;
wire   [30:0] j_mid_fu_600_p3;
wire   [0:0] tmp_11_mid1_fu_710_p3;
wire   [30:0] k_mid_fu_608_p3;
wire   [30:0] j_2_fu_717_p2;
wire   [8:0] tmp_5_fu_735_p1;
wire   [8:0] tmp_11_fu_739_p3;
wire   [8:0] tmp_13_fu_747_p1;
wire   [31:0] p_mid1_fu_731_p1;
wire   [0:0] notrhs_mid3_fu_703_p3;
wire   [0:0] notrhs_mid1_fu_759_p2;
wire   [30:0] k_mid2_fu_723_p3;
wire   [31:0] k_cast_mid2_cast_fu_772_p1;
wire   [0:0] notlhs_mid2_fu_641_p3;
wire   [0:0] tmp_10_fu_784_p2;
wire   [0:0] tmp8_fu_789_p2;
wire   [0:0] notrhs_mid2_fu_764_p3;
wire  signed [8:0] grp_fu_1109_p3;
wire   [63:0] indvar_flatten_op_fu_822_p2;
wire  signed [31:0] tmp_18_fu_840_p0;
wire  signed [32:0] tmp_18_fu_840_p1;
wire  signed [32:0] tmp_17_fu_836_p1;
wire   [32:0] p_Val2_2_fu_844_p2;
wire  signed [31:0] p_Val2_3_fu_858_p0;
wire   [31:0] p_Val2_3_fu_858_p2;
wire   [0:0] newsignbit_fu_864_p3;
wire   [0:0] isneg_fu_850_p3;
wire   [0:0] tmp_19_fu_872_p2;
wire   [0:0] p_Result_not_fu_890_p2;
wire   [0:0] brmerge_i_i1_fu_884_p2;
wire   [0:0] underflow_fu_878_p2;
wire   [0:0] brmerge_fu_896_p2;
wire   [31:0] p_Val2_3_mux_fu_902_p3;
wire   [31:0] p_Val2_3_31_fu_910_p3;
wire   [31:0] sel_tmp1_fu_926_p3;
wire   [31:0] sel_tmp3_fu_933_p3;
wire  signed [31:0] p_Val2_4_fu_940_p3;
wire  signed [32:0] tmp_20_fu_947_p1;
wire   [32:0] p_Val2_5_fu_951_p2;
wire  signed [31:0] p_Val2_6_fu_965_p0;
wire   [31:0] p_Val2_6_fu_965_p2;
wire   [0:0] newsignbit_1_fu_971_p3;
wire   [0:0] isneg_1_fu_957_p3;
wire   [0:0] tmp_21_fu_979_p2;
wire   [0:0] p_Result_2_not_fu_997_p2;
wire   [0:0] brmerge_i_i_fu_991_p2;
wire   [0:0] underflow_1_fu_985_p2;
wire   [0:0] brmerge5_fu_1003_p2;
wire   [31:0] p_Val2_6_mux_fu_1009_p3;
wire   [31:0] p_Val2_6_32_fu_1017_p3;
wire   [31:0] tmp_data_data2_V_fu_1025_p3;
wire   [31:0] tmp_data_data1_V_fu_918_p3;
wire   [31:0] k3_cast_fu_1042_p1;
wire   [0:0] tmp_9_fu_1046_p2;
wire   [30:0] j_1_fu_1062_p2;
wire   [30:0] k3_mid2_fu_1068_p3;
wire  signed [8:0] grp_fu_1118_p3;
wire   [4:0] grp_fu_1109_p0;
wire  signed [8:0] grp_fu_1109_p1;
wire   [8:0] grp_fu_1109_p2;
wire   [4:0] grp_fu_1118_p0;
wire  signed [8:0] grp_fu_1118_p1;
wire   [8:0] grp_fu_1118_p2;
wire    ap_CS_fsm_state8;
reg   [6:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire   [63:0] bound_fu_535_p00;
wire   [63:0] bound_fu_535_p10;
reg    ap_condition_796;
reg    ap_condition_142;
reg    ap_condition_801;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_reg_ioackin_output_dma_O_TREADY = 1'b0;
end

top_mac_muladd_5ncud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 9 ),
    .dout_WIDTH( 9 ))
top_mac_muladd_5ncud_U173(
    .din0(grp_fu_1109_p0),
    .din1(grp_fu_1109_p1),
    .din2(grp_fu_1109_p2),
    .dout(grp_fu_1109_p3)
);

top_mac_muladd_5ncud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 9 ),
    .dout_WIDTH( 9 ))
top_mac_muladd_5ncud_U174(
    .din0(grp_fu_1118_p0),
    .din1(grp_fu_1118_p1),
    .din2(grp_fu_1118_p2),
    .dout(grp_fu_1118_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state4))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state4);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_output_dma_O_TREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_801)) begin
            if ((1'b0 == ap_block_pp1_stage0_11001)) begin
                ap_reg_ioackin_output_dma_O_TREADY <= 1'b0;
            end else if (((1'b0 == ap_block_pp1_stage0_01001) & (output_dma_O_TREADY == 1'b1))) begin
                ap_reg_ioackin_output_dma_O_TREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten1_reg_1182 == 1'd0))) begin
        i1_reg_403 <= tmp_4_mid2_v_reg_1191;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        i1_reg_403 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((input_dma_B_TVALID == 1'b0) & (exitcond1_fu_497_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_497_p2 == 1'd0))) begin
        i_reg_381 <= i_1_fu_503_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_381 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten1_fu_578_p2 == 1'd0))) begin
        indvar_flatten1_reg_392 <= indvar_flatten_next2_fu_583_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten1_reg_392 <= 66'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        indvar_flatten2_reg_464 <= 64'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (exitcond_flatten2_fu_1051_p2 == 1'd0))) begin
        indvar_flatten2_reg_464 <= indvar_flatten_next1_fu_1056_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten1_fu_578_p2 == 1'd0))) begin
        indvar_flatten_reg_414 <= indvar_flatten_next_fu_828_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten_reg_414 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j2_reg_475 <= 31'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (exitcond_flatten2_fu_1051_p2 == 1'd0))) begin
        j2_reg_475 <= tmp_7_mid2_v_fu_1076_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten1_fu_578_p2 == 1'd0))) begin
        j_reg_425 <= j_mid2_fu_776_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_425 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        k3_reg_486 <= 31'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (exitcond_flatten2_fu_1051_p2 == 1'd0))) begin
        k3_reg_486 <= k_1_fu_1103_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten1_fu_578_p2 == 1'd0))) begin
        k_reg_436 <= k_2_fu_816_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        k_reg_436 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        bound_reg_1161 <= bound_fu_535_p2;
        notrhs_mid_reg_1172 <= notrhs_mid_fu_549_p2;
        tmp_11_mid_reg_1177 <= tmp_11_mid_fu_555_p2;
        tmp_3_reg_1167[65 : 2] <= tmp_3_fu_541_p3[65 : 2];
        tmp_reg_1150 <= tmp_fu_519_p2;
        tmp_s_reg_1156 <= tmp_s_fu_524_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        exitcond_flatten1_reg_1182 <= exitcond_flatten1_fu_578_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten1_fu_578_p2 == 1'd0))) begin
        sel_tmp2_mid2_reg_1201 <= sel_tmp2_mid2_fu_675_p3;
        sel_tmp4_mid2_reg_1206 <= sel_tmp4_mid2_fu_695_p3;
        sel_tmp_mid2_reg_1196 <= sel_tmp_mid2_fu_661_p3;
        tmp_last_reg_1216 <= tmp_last_fu_795_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten1_fu_578_p2 == 1'd0))) begin
        tmp_4_mid2_v_reg_1191 <= tmp_4_mid2_v_fu_616_p3;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        BIAS_V_2_address0 = tmp_4_mid2_fu_624_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        BIAS_V_2_address0 = tmp_2_fu_514_p1;
    end else begin
        BIAS_V_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((~((input_dma_B_TVALID == 1'b0) & (exitcond1_fu_497_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state2)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        BIAS_V_2_ce0 = 1'b1;
    end else begin
        BIAS_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((input_dma_B_TVALID == 1'b0) & (exitcond1_fu_497_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_497_p2 == 1'd0))) begin
        BIAS_V_2_we0 = 1'b1;
    end else begin
        BIAS_V_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        OFM_0_V_ce0 = 1'b1;
    end else begin
        OFM_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        OFM_0_V_ce1 = 1'b1;
    end else begin
        OFM_0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (exitcond_flatten2_fu_1051_p2 == 1'd0))) begin
        OFM_0_V_we1 = 1'b1;
    end else begin
        OFM_0_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        OFM_1_V_ce0 = 1'b1;
    end else begin
        OFM_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        OFM_1_V_ce1 = 1'b1;
    end else begin
        OFM_1_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (exitcond_flatten2_fu_1051_p2 == 1'd0))) begin
        OFM_1_V_we1 = 1'b1;
    end else begin
        OFM_1_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        OFM_2_V_ce0 = 1'b1;
    end else begin
        OFM_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        OFM_2_V_ce1 = 1'b1;
    end else begin
        OFM_2_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (exitcond_flatten2_fu_1051_p2 == 1'd0))) begin
        OFM_2_V_we1 = 1'b1;
    end else begin
        OFM_2_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        OFM_3_V_ce0 = 1'b1;
    end else begin
        OFM_3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        OFM_3_V_ce1 = 1'b1;
    end else begin
        OFM_3_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (exitcond_flatten2_fu_1051_p2 == 1'd0))) begin
        OFM_3_V_we1 = 1'b1;
    end else begin
        OFM_3_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        OFM_4_V_ce0 = 1'b1;
    end else begin
        OFM_4_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        OFM_4_V_ce1 = 1'b1;
    end else begin
        OFM_4_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (exitcond_flatten2_fu_1051_p2 == 1'd0))) begin
        OFM_4_V_we1 = 1'b1;
    end else begin
        OFM_4_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        OFM_5_V_ce0 = 1'b1;
    end else begin
        OFM_5_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        OFM_5_V_ce1 = 1'b1;
    end else begin
        OFM_5_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (exitcond_flatten2_fu_1051_p2 == 1'd0))) begin
        OFM_5_V_we1 = 1'b1;
    end else begin
        OFM_5_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        OFM_6_V_ce0 = 1'b1;
    end else begin
        OFM_6_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        OFM_6_V_ce1 = 1'b1;
    end else begin
        OFM_6_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (exitcond_flatten2_fu_1051_p2 == 1'd0))) begin
        OFM_6_V_we1 = 1'b1;
    end else begin
        OFM_6_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        OFM_7_V_ce0 = 1'b1;
    end else begin
        OFM_7_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        OFM_7_V_ce1 = 1'b1;
    end else begin
        OFM_7_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (exitcond_flatten2_fu_1051_p2 == 1'd0))) begin
        OFM_7_V_we1 = 1'b1;
    end else begin
        OFM_7_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_flatten1_fu_578_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten1_reg_1182 == 1'd0) & (1'b0 == ap_block_pp1_stage0))) begin
        ap_phi_mux_i1_phi_fu_407_p4 = tmp_4_mid2_v_reg_1191;
    end else begin
        ap_phi_mux_i1_phi_fu_407_p4 = i1_reg_403;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_142)) begin
        if ((1'b1 == ap_condition_796)) begin
            ap_phi_mux_p_Val2_s_phi_fu_450_p8 = OFM_3_V_q0;
        end else if ((tmp_4_mid2_v_reg_1191 == 3'd2)) begin
            ap_phi_mux_p_Val2_s_phi_fu_450_p8 = OFM_2_V_q0;
        end else if ((tmp_4_mid2_v_reg_1191 == 3'd1)) begin
            ap_phi_mux_p_Val2_s_phi_fu_450_p8 = OFM_1_V_q0;
        end else if ((tmp_4_mid2_v_reg_1191 == 3'd0)) begin
            ap_phi_mux_p_Val2_s_phi_fu_450_p8 = OFM_0_V_q0;
        end else begin
            ap_phi_mux_p_Val2_s_phi_fu_450_p8 = ap_phi_reg_pp1_iter1_p_Val2_s_reg_447;
        end
    end else begin
        ap_phi_mux_p_Val2_s_phi_fu_450_p8 = ap_phi_reg_pp1_iter1_p_Val2_s_reg_447;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_output_dma_O_TREADY == 1'b0)) begin
        ap_sig_ioackin_output_dma_O_TREADY = output_dma_O_TREADY;
    end else begin
        ap_sig_ioackin_output_dma_O_TREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_497_p2 == 1'd0))) begin
        input_dma_B_TDATA_blk_n = input_dma_B_TVALID;
    end else begin
        input_dma_B_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((input_dma_B_TVALID == 1'b0) & (exitcond1_fu_497_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_497_p2 == 1'd0))) begin
        input_dma_B_TREADY = 1'b1;
    end else begin
        input_dma_B_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten1_reg_1182 == 1'd0) & (1'b0 == ap_block_pp1_stage0))) begin
        output_dma_O_TDATA_blk_n = output_dma_O_TREADY;
    end else begin
        output_dma_O_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_01001) & (ap_reg_ioackin_output_dma_O_TREADY == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten1_reg_1182 == 1'd0))) begin
        output_dma_O_TVALID = 1'b1;
    end else begin
        output_dma_O_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((input_dma_B_TVALID == 1'b0) & (exitcond1_fu_497_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_497_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((input_dma_B_TVALID == 1'b0) & (exitcond1_fu_497_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_497_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (exitcond_flatten1_fu_578_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (exitcond_flatten1_fu_578_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (exitcond_flatten2_fu_1051_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign BIAS_V_2_d0 = input_dma_B_TDATA;

assign OFM_0_V_address0 = tmp_14_cast_fu_805_p1;

assign OFM_0_V_address1 = tmp_16_cast_fu_1092_p1;

assign OFM_0_V_d1 = 32'd0;

assign OFM_1_V_address0 = tmp_14_cast_fu_805_p1;

assign OFM_1_V_address1 = tmp_16_cast_fu_1092_p1;

assign OFM_1_V_d1 = 32'd0;

assign OFM_2_V_address0 = tmp_14_cast_fu_805_p1;

assign OFM_2_V_address1 = tmp_16_cast_fu_1092_p1;

assign OFM_2_V_d1 = 32'd0;

assign OFM_3_V_address0 = tmp_14_cast_fu_805_p1;

assign OFM_3_V_address1 = tmp_16_cast_fu_1092_p1;

assign OFM_3_V_d1 = 32'd0;

assign OFM_4_V_address0 = tmp_14_cast_fu_805_p1;

assign OFM_4_V_address1 = tmp_16_cast_fu_1092_p1;

assign OFM_4_V_d1 = 32'd0;

assign OFM_5_V_address0 = tmp_14_cast_fu_805_p1;

assign OFM_5_V_address1 = tmp_16_cast_fu_1092_p1;

assign OFM_5_V_d1 = 32'd0;

assign OFM_6_V_address0 = tmp_14_cast_fu_805_p1;

assign OFM_6_V_address1 = tmp_16_cast_fu_1092_p1;

assign OFM_6_V_d1 = 32'd0;

assign OFM_7_V_address0 = tmp_14_cast_fu_805_p1;

assign OFM_7_V_address1 = tmp_16_cast_fu_1092_p1;

assign OFM_7_V_d1 = 32'd0;

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_block_state5_io));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_block_state5_io));
end

always @ (*) begin
    ap_block_state2 = ((input_dma_B_TVALID == 1'b0) & (exitcond1_fu_497_p2 == 1'd0));
end

assign ap_block_state4_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = ((ap_sig_ioackin_output_dma_O_TREADY == 1'b0) & (exitcond_flatten1_reg_1182 == 1'd0));
end

assign ap_block_state5_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_142 = ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten1_reg_1182 == 1'd0) & (1'b0 == ap_block_pp1_stage0));
end

always @ (*) begin
    ap_condition_796 = (~(tmp_4_mid2_v_reg_1191 == 3'd2) & ~(tmp_4_mid2_v_reg_1191 == 3'd1) & ~(tmp_4_mid2_v_reg_1191 == 3'd0));
end

always @ (*) begin
    ap_condition_801 = ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten1_reg_1182 == 1'd0));
end

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_phi_reg_pp1_iter1_p_Val2_s_reg_447 = 'bx;

assign bound_fu_535_p0 = bound_fu_535_p00;

assign bound_fu_535_p00 = custom_Tr;

assign bound_fu_535_p1 = bound_fu_535_p10;

assign bound_fu_535_p10 = custom_Tc;

assign bound_fu_535_p2 = (bound_fu_535_p0 * bound_fu_535_p1);

assign brmerge5_fu_1003_p2 = (p_Result_2_not_fu_997_p2 | newsignbit_1_fu_971_p3);

assign brmerge_fu_896_p2 = (p_Result_not_fu_890_p2 | newsignbit_fu_864_p3);

assign brmerge_i_i1_fu_884_p2 = (newsignbit_fu_864_p3 ^ isneg_fu_850_p3);

assign brmerge_i_i_fu_991_p2 = (newsignbit_1_fu_971_p3 ^ isneg_1_fu_957_p3);

assign exitcond1_fu_497_p2 = ((i_reg_381 == 4'd8) ? 1'b1 : 1'b0);

assign exitcond_flatten1_fu_578_p2 = ((indvar_flatten1_reg_392 == tmp_3_reg_1167) ? 1'b1 : 1'b0);

assign exitcond_flatten2_fu_1051_p2 = ((indvar_flatten2_reg_464 == bound_reg_1161) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_595_p2 = ((indvar_flatten_reg_414 == bound_reg_1161) ? 1'b1 : 1'b0);

assign grp_fu_1109_p0 = 9'd13;

assign grp_fu_1109_p1 = ((tmp_11_mid1_fu_710_p3[0:0] === 1'b1) ? tmp_11_fu_739_p3 : tmp_13_fu_747_p1);

assign grp_fu_1109_p2 = k_mid2_fu_723_p3[8:0];

assign grp_fu_1118_p0 = 9'd13;

assign grp_fu_1118_p1 = tmp_7_mid2_v_fu_1076_p3[8:0];

assign grp_fu_1118_p2 = k3_mid2_fu_1068_p3[8:0];

assign i_1_fu_503_p2 = (i_reg_381 + 4'd1);

assign i_2_fu_589_p2 = (3'd1 + ap_phi_mux_i1_phi_fu_407_p4);

assign indvar_flatten_next1_fu_1056_p2 = (indvar_flatten2_reg_464 + 64'd1);

assign indvar_flatten_next2_fu_583_p2 = (indvar_flatten1_reg_392 + 66'd1);

assign indvar_flatten_next_fu_828_p3 = ((exitcond_flatten_fu_595_p2[0:0] === 1'b1) ? 64'd1 : indvar_flatten_op_fu_822_p2);

assign indvar_flatten_op_fu_822_p2 = (indvar_flatten_reg_414 + 64'd1);

assign isneg_1_fu_957_p3 = p_Val2_5_fu_951_p2[32'd32];

assign isneg_fu_850_p3 = p_Val2_2_fu_844_p2[32'd32];

assign j_1_fu_1062_p2 = (31'd1 + j2_reg_475);

assign j_2_fu_717_p2 = (31'd1 + j_mid_fu_600_p3);

assign j_mid2_fu_776_p3 = ((tmp_11_mid1_fu_710_p3[0:0] === 1'b1) ? j_mid_fu_600_p3 : j_2_fu_717_p2);

assign j_mid_fu_600_p3 = ((exitcond_flatten_fu_595_p2[0:0] === 1'b1) ? 31'd0 : j_reg_425);

assign k3_cast_fu_1042_p1 = k3_reg_486;

assign k3_mid2_fu_1068_p3 = ((tmp_9_fu_1046_p2[0:0] === 1'b1) ? k3_reg_486 : 31'd0);

assign k_1_fu_1103_p2 = (31'd1 + k3_mid2_fu_1068_p3);

assign k_2_fu_816_p2 = (k_mid2_fu_723_p3 + 31'd1);

assign k_cast_fu_569_p1 = k_reg_436;

assign k_cast_mid2_cast_fu_772_p1 = k_mid2_fu_723_p3;

assign k_mid2_fu_723_p3 = ((tmp_11_mid1_fu_710_p3[0:0] === 1'b1) ? k_mid_fu_608_p3 : 31'd0);

assign k_mid_fu_608_p3 = ((exitcond_flatten_fu_595_p2[0:0] === 1'b1) ? 31'd0 : k_reg_436);

assign newsignbit_1_fu_971_p3 = p_Val2_6_fu_965_p2[32'd31];

assign newsignbit_fu_864_p3 = p_Val2_3_fu_858_p2[32'd31];

assign notlhs_fu_635_p2 = ((ap_phi_mux_i1_phi_fu_407_p4 == 3'd3) ? 1'b1 : 1'b0);

assign notlhs_mid1_fu_629_p2 = ((i_2_fu_589_p2 == 3'd3) ? 1'b1 : 1'b0);

assign notlhs_mid2_fu_641_p3 = ((exitcond_flatten_fu_595_p2[0:0] === 1'b1) ? notlhs_mid1_fu_629_p2 : notlhs_fu_635_p2);

assign notrhs_fu_564_p2 = ((tmp_4_fu_560_p1 == tmp_reg_1150) ? 1'b1 : 1'b0);

assign notrhs_mid1_fu_759_p2 = ((p_mid1_fu_731_p1 == tmp_reg_1150) ? 1'b1 : 1'b0);

assign notrhs_mid2_fu_764_p3 = ((tmp_11_mid1_fu_710_p3[0:0] === 1'b1) ? notrhs_mid3_fu_703_p3 : notrhs_mid1_fu_759_p2);

assign notrhs_mid3_fu_703_p3 = ((exitcond_flatten_fu_595_p2[0:0] === 1'b1) ? notrhs_mid_reg_1172 : notrhs_fu_564_p2);

assign notrhs_mid_fu_549_p2 = ((tmp_fu_519_p2 == 32'd0) ? 1'b1 : 1'b0);

assign output_dma_O_TDATA = {{tmp_data_data2_V_fu_1025_p3}, {tmp_data_data1_V_fu_918_p3}};

assign output_dma_O_TLAST = tmp_last_reg_1216;

assign p_Result_2_not_fu_997_p2 = (isneg_1_fu_957_p3 ^ 1'd1);

assign p_Result_not_fu_890_p2 = (isneg_fu_850_p3 ^ 1'd1);

assign p_Val2_2_fu_844_p2 = ($signed(tmp_18_fu_840_p1) + $signed(tmp_17_fu_836_p1));

assign p_Val2_3_31_fu_910_p3 = ((underflow_fu_878_p2[0:0] === 1'b1) ? 32'd2147483648 : p_Val2_3_fu_858_p2);

assign p_Val2_3_fu_858_p0 = BIAS_V_2_q0;

assign p_Val2_3_fu_858_p2 = ($signed(p_Val2_3_fu_858_p0) + $signed(ap_phi_mux_p_Val2_s_phi_fu_450_p8));

assign p_Val2_3_mux_fu_902_p3 = ((brmerge_i_i1_fu_884_p2[0:0] === 1'b1) ? 32'd2147483647 : p_Val2_3_fu_858_p2);

assign p_Val2_4_fu_940_p3 = ((sel_tmp4_mid2_reg_1206[0:0] === 1'b1) ? OFM_6_V_q0 : sel_tmp3_fu_933_p3);

assign p_Val2_5_fu_951_p2 = ($signed(tmp_20_fu_947_p1) + $signed(tmp_18_fu_840_p1));

assign p_Val2_6_32_fu_1017_p3 = ((underflow_1_fu_985_p2[0:0] === 1'b1) ? 32'd2147483648 : p_Val2_6_fu_965_p2);

assign p_Val2_6_fu_965_p0 = BIAS_V_2_q0;

assign p_Val2_6_fu_965_p2 = ($signed(p_Val2_6_fu_965_p0) + $signed(p_Val2_4_fu_940_p3));

assign p_Val2_6_mux_fu_1009_p3 = ((brmerge_i_i_fu_991_p2[0:0] === 1'b1) ? 32'd2147483647 : p_Val2_6_fu_965_p2);

assign p_mid1_fu_731_p1 = j_2_fu_717_p2;

assign sel_tmp1_fu_926_p3 = ((sel_tmp_mid2_reg_1196[0:0] === 1'b1) ? OFM_4_V_q0 : OFM_7_V_q0);

assign sel_tmp2_fu_669_p2 = ((ap_phi_mux_i1_phi_fu_407_p4 == 3'd1) ? 1'b1 : 1'b0);

assign sel_tmp2_mid2_fu_675_p3 = ((exitcond_flatten_fu_595_p2[0:0] === 1'b1) ? sel_tmp_fu_655_p2 : sel_tmp2_fu_669_p2);

assign sel_tmp3_fu_933_p3 = ((sel_tmp2_mid2_reg_1201[0:0] === 1'b1) ? OFM_5_V_q0 : sel_tmp1_fu_926_p3);

assign sel_tmp4_fu_689_p2 = ((ap_phi_mux_i1_phi_fu_407_p4 == 3'd2) ? 1'b1 : 1'b0);

assign sel_tmp4_mid1_fu_683_p2 = ((i_2_fu_589_p2 == 3'd2) ? 1'b1 : 1'b0);

assign sel_tmp4_mid2_fu_695_p3 = ((exitcond_flatten_fu_595_p2[0:0] === 1'b1) ? sel_tmp4_mid1_fu_683_p2 : sel_tmp4_fu_689_p2);

assign sel_tmp_fu_655_p2 = ((ap_phi_mux_i1_phi_fu_407_p4 == 3'd0) ? 1'b1 : 1'b0);

assign sel_tmp_mid1_fu_649_p2 = ((i_2_fu_589_p2 == 3'd0) ? 1'b1 : 1'b0);

assign sel_tmp_mid2_fu_661_p3 = ((exitcond_flatten_fu_595_p2[0:0] === 1'b1) ? sel_tmp_mid1_fu_649_p2 : sel_tmp_fu_655_p2);

assign tmp8_fu_789_p2 = (tmp_10_fu_784_p2 & notlhs_mid2_fu_641_p3);

assign tmp_10_fu_784_p2 = ((k_cast_mid2_cast_fu_772_p1 == tmp_s_reg_1156) ? 1'b1 : 1'b0);

assign tmp_11_fu_739_p3 = ((exitcond_flatten_fu_595_p2[0:0] === 1'b1) ? 9'd0 : tmp_5_fu_735_p1);

assign tmp_11_mid1_fu_710_p3 = ((exitcond_flatten_fu_595_p2[0:0] === 1'b1) ? tmp_11_mid_reg_1177 : tmp_6_fu_573_p2);

assign tmp_11_mid_fu_555_p2 = (($signed(custom_Tc) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign tmp_13_fu_747_p1 = j_2_fu_717_p2[8:0];

assign tmp_14_cast_fu_805_p1 = grp_fu_1109_p3;

assign tmp_16_cast_fu_1092_p1 = grp_fu_1118_p3;

assign tmp_17_fu_836_p1 = ap_phi_mux_p_Val2_s_phi_fu_450_p8;

assign tmp_18_fu_840_p0 = BIAS_V_2_q0;

assign tmp_18_fu_840_p1 = tmp_18_fu_840_p0;

assign tmp_19_fu_872_p2 = (newsignbit_fu_864_p3 ^ 1'd1);

assign tmp_20_fu_947_p1 = p_Val2_4_fu_940_p3;

assign tmp_21_fu_979_p2 = (newsignbit_1_fu_971_p3 ^ 1'd1);

assign tmp_2_fu_514_p1 = i_reg_381;

assign tmp_3_fu_541_p3 = {{bound_fu_535_p2}, {2'd0}};

assign tmp_4_fu_560_p1 = j_reg_425;

assign tmp_4_mid2_fu_624_p1 = tmp_4_mid2_v_fu_616_p3;

assign tmp_4_mid2_v_fu_616_p3 = ((exitcond_flatten_fu_595_p2[0:0] === 1'b1) ? i_2_fu_589_p2 : ap_phi_mux_i1_phi_fu_407_p4);

assign tmp_5_fu_735_p1 = j_reg_425[8:0];

assign tmp_6_fu_573_p2 = (($signed(k_cast_fu_569_p1) < $signed(custom_Tc)) ? 1'b1 : 1'b0);

assign tmp_7_mid2_v_fu_1076_p3 = ((tmp_9_fu_1046_p2[0:0] === 1'b1) ? j2_reg_475 : j_1_fu_1062_p2);

assign tmp_9_fu_1046_p2 = (($signed(k3_cast_fu_1042_p1) < $signed(custom_Tc)) ? 1'b1 : 1'b0);

assign tmp_data_data1_V_fu_918_p3 = ((brmerge_fu_896_p2[0:0] === 1'b1) ? p_Val2_3_mux_fu_902_p3 : p_Val2_3_31_fu_910_p3);

assign tmp_data_data2_V_fu_1025_p3 = ((brmerge5_fu_1003_p2[0:0] === 1'b1) ? p_Val2_6_mux_fu_1009_p3 : p_Val2_6_32_fu_1017_p3);

assign tmp_fu_519_p2 = ($signed(custom_Tr) + $signed(32'd4294967295));

assign tmp_last_fu_795_p2 = (tmp8_fu_789_p2 & notrhs_mid2_fu_764_p3);

assign tmp_s_fu_524_p2 = ($signed(custom_Tc) + $signed(32'd4294967295));

assign underflow_1_fu_985_p2 = (tmp_21_fu_979_p2 & isneg_1_fu_957_p3);

assign underflow_fu_878_p2 = (tmp_19_fu_872_p2 & isneg_fu_850_p3);

always @ (posedge ap_clk) begin
    tmp_3_reg_1167[1:0] <= 2'b00;
end

endmodule //OFM_STORE
