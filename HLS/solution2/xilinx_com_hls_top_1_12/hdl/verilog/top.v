// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="top,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.606000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=142,HLS_SYN_DSP=227,HLS_SYN_FF=6091,HLS_SYN_LUT=39322,HLS_VERSION=2018_2}" *)

module top (
        ap_clk,
        ap_rst_n,
        input_dma_W_TDATA,
        input_dma_W_TVALID,
        input_dma_W_TREADY,
        input_dma_W_TLAST,
        input_dma_I_TDATA,
        input_dma_I_TVALID,
        input_dma_I_TREADY,
        input_dma_I_TLAST,
        input_dma_B_TDATA,
        input_dma_B_TVALID,
        input_dma_B_TREADY,
        input_dma_B_TLAST,
        output_dma_O_TDATA,
        output_dma_O_TVALID,
        output_dma_O_TREADY,
        output_dma_O_TLAST,
        s_axi_CRTL_BUS_AWVALID,
        s_axi_CRTL_BUS_AWREADY,
        s_axi_CRTL_BUS_AWADDR,
        s_axi_CRTL_BUS_WVALID,
        s_axi_CRTL_BUS_WREADY,
        s_axi_CRTL_BUS_WDATA,
        s_axi_CRTL_BUS_WSTRB,
        s_axi_CRTL_BUS_ARVALID,
        s_axi_CRTL_BUS_ARREADY,
        s_axi_CRTL_BUS_ARADDR,
        s_axi_CRTL_BUS_RVALID,
        s_axi_CRTL_BUS_RREADY,
        s_axi_CRTL_BUS_RDATA,
        s_axi_CRTL_BUS_RRESP,
        s_axi_CRTL_BUS_BVALID,
        s_axi_CRTL_BUS_BREADY,
        s_axi_CRTL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;
parameter    C_S_AXI_CRTL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CRTL_BUS_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CRTL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [63:0] input_dma_W_TDATA;
input   input_dma_W_TVALID;
output   input_dma_W_TREADY;
input   input_dma_W_TLAST;
input  [63:0] input_dma_I_TDATA;
input   input_dma_I_TVALID;
output   input_dma_I_TREADY;
input   input_dma_I_TLAST;
input  [31:0] input_dma_B_TDATA;
input   input_dma_B_TVALID;
output   input_dma_B_TREADY;
input   input_dma_B_TLAST;
output  [63:0] output_dma_O_TDATA;
output   output_dma_O_TVALID;
input   output_dma_O_TREADY;
output   output_dma_O_TLAST;
input   s_axi_CRTL_BUS_AWVALID;
output   s_axi_CRTL_BUS_AWREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1:0] s_axi_CRTL_BUS_AWADDR;
input   s_axi_CRTL_BUS_WVALID;
output   s_axi_CRTL_BUS_WREADY;
input  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1:0] s_axi_CRTL_BUS_WDATA;
input  [C_S_AXI_CRTL_BUS_WSTRB_WIDTH - 1:0] s_axi_CRTL_BUS_WSTRB;
input   s_axi_CRTL_BUS_ARVALID;
output   s_axi_CRTL_BUS_ARREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1:0] s_axi_CRTL_BUS_ARADDR;
output   s_axi_CRTL_BUS_RVALID;
input   s_axi_CRTL_BUS_RREADY;
output  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1:0] s_axi_CRTL_BUS_RDATA;
output  [1:0] s_axi_CRTL_BUS_RRESP;
output   s_axi_CRTL_BUS_BVALID;
input   s_axi_CRTL_BUS_BREADY;
output  [1:0] s_axi_CRTL_BUS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [63:0] input_dma_W_V_data_0_data_out;
wire    input_dma_W_V_data_0_vld_in;
wire    input_dma_W_V_data_0_vld_out;
wire    input_dma_W_V_data_0_ack_in;
reg    input_dma_W_V_data_0_ack_out;
reg   [63:0] input_dma_W_V_data_0_payload_A;
reg   [63:0] input_dma_W_V_data_0_payload_B;
reg    input_dma_W_V_data_0_sel_rd;
reg    input_dma_W_V_data_0_sel_wr;
wire    input_dma_W_V_data_0_sel;
wire    input_dma_W_V_data_0_load_A;
wire    input_dma_W_V_data_0_load_B;
reg   [1:0] input_dma_W_V_data_0_state;
wire    input_dma_W_V_data_0_state_cmp_full;
reg    input_dma_W_V_last_0_data_out;
wire    input_dma_W_V_last_0_vld_in;
wire    input_dma_W_V_last_0_vld_out;
wire    input_dma_W_V_last_0_ack_in;
reg    input_dma_W_V_last_0_ack_out;
reg    input_dma_W_V_last_0_payload_A;
reg    input_dma_W_V_last_0_payload_B;
reg    input_dma_W_V_last_0_sel_rd;
reg    input_dma_W_V_last_0_sel_wr;
wire    input_dma_W_V_last_0_sel;
wire    input_dma_W_V_last_0_load_A;
wire    input_dma_W_V_last_0_load_B;
reg   [1:0] input_dma_W_V_last_0_state;
wire    input_dma_W_V_last_0_state_cmp_full;
reg   [63:0] input_dma_I_V_data_0_data_out;
wire    input_dma_I_V_data_0_vld_in;
wire    input_dma_I_V_data_0_vld_out;
wire    input_dma_I_V_data_0_ack_in;
reg    input_dma_I_V_data_0_ack_out;
reg   [63:0] input_dma_I_V_data_0_payload_A;
reg   [63:0] input_dma_I_V_data_0_payload_B;
reg    input_dma_I_V_data_0_sel_rd;
reg    input_dma_I_V_data_0_sel_wr;
wire    input_dma_I_V_data_0_sel;
wire    input_dma_I_V_data_0_load_A;
wire    input_dma_I_V_data_0_load_B;
reg   [1:0] input_dma_I_V_data_0_state;
wire    input_dma_I_V_data_0_state_cmp_full;
reg    input_dma_I_V_last_0_data_out;
wire    input_dma_I_V_last_0_vld_in;
wire    input_dma_I_V_last_0_vld_out;
wire    input_dma_I_V_last_0_ack_in;
reg    input_dma_I_V_last_0_ack_out;
reg    input_dma_I_V_last_0_payload_A;
reg    input_dma_I_V_last_0_payload_B;
reg    input_dma_I_V_last_0_sel_rd;
reg    input_dma_I_V_last_0_sel_wr;
wire    input_dma_I_V_last_0_sel;
wire    input_dma_I_V_last_0_load_A;
wire    input_dma_I_V_last_0_load_B;
reg   [1:0] input_dma_I_V_last_0_state;
wire    input_dma_I_V_last_0_state_cmp_full;
reg   [31:0] input_dma_B_V_data_V_0_data_out;
wire    input_dma_B_V_data_V_0_vld_in;
wire    input_dma_B_V_data_V_0_vld_out;
wire    input_dma_B_V_data_V_0_ack_in;
reg    input_dma_B_V_data_V_0_ack_out;
reg   [31:0] input_dma_B_V_data_V_0_payload_A;
reg   [31:0] input_dma_B_V_data_V_0_payload_B;
reg    input_dma_B_V_data_V_0_sel_rd;
reg    input_dma_B_V_data_V_0_sel_wr;
wire    input_dma_B_V_data_V_0_sel;
wire    input_dma_B_V_data_V_0_load_A;
wire    input_dma_B_V_data_V_0_load_B;
reg   [1:0] input_dma_B_V_data_V_0_state;
wire    input_dma_B_V_data_V_0_state_cmp_full;
reg    input_dma_B_V_last_0_data_out;
wire    input_dma_B_V_last_0_vld_in;
wire    input_dma_B_V_last_0_vld_out;
wire    input_dma_B_V_last_0_ack_in;
reg    input_dma_B_V_last_0_ack_out;
reg    input_dma_B_V_last_0_payload_A;
reg    input_dma_B_V_last_0_payload_B;
reg    input_dma_B_V_last_0_sel_rd;
reg    input_dma_B_V_last_0_sel_wr;
wire    input_dma_B_V_last_0_sel;
wire    input_dma_B_V_last_0_load_A;
wire    input_dma_B_V_last_0_load_B;
reg   [1:0] input_dma_B_V_last_0_state;
wire    input_dma_B_V_last_0_state_cmp_full;
reg   [63:0] output_dma_O_V_data_1_data_out;
reg    output_dma_O_V_data_1_vld_in;
wire    output_dma_O_V_data_1_vld_out;
wire    output_dma_O_V_data_1_ack_in;
wire    output_dma_O_V_data_1_ack_out;
reg   [63:0] output_dma_O_V_data_1_payload_A;
reg   [63:0] output_dma_O_V_data_1_payload_B;
reg    output_dma_O_V_data_1_sel_rd;
reg    output_dma_O_V_data_1_sel_wr;
wire    output_dma_O_V_data_1_sel;
wire    output_dma_O_V_data_1_load_A;
wire    output_dma_O_V_data_1_load_B;
reg   [1:0] output_dma_O_V_data_1_state;
wire    output_dma_O_V_data_1_state_cmp_full;
reg    output_dma_O_V_last_1_data_out;
reg    output_dma_O_V_last_1_vld_in;
wire    output_dma_O_V_last_1_vld_out;
wire    output_dma_O_V_last_1_ack_in;
wire    output_dma_O_V_last_1_ack_out;
reg    output_dma_O_V_last_1_payload_A;
reg    output_dma_O_V_last_1_payload_B;
reg    output_dma_O_V_last_1_sel_rd;
reg    output_dma_O_V_last_1_sel_wr;
wire    output_dma_O_V_last_1_sel;
wire    output_dma_O_V_last_1_load_A;
wire    output_dma_O_V_last_1_load_B;
reg   [1:0] output_dma_O_V_last_1_state;
wire    output_dma_O_V_last_1_state_cmp_full;
wire   [31:0] row;
wire   [31:0] col;
wire   [31:0] flag;
wire   [31:0] num;
wire   [31:0] N;
wire   [31:0] custom_k;
wire   [31:0] custom_Tr;
wire   [31:0] custom_Tc;
reg   [7:0] OFM_V_0_address0;
reg    OFM_V_0_ce0;
wire   [31:0] OFM_V_0_q0;
reg   [7:0] OFM_V_0_address1;
reg    OFM_V_0_ce1;
reg    OFM_V_0_we1;
reg   [31:0] OFM_V_0_d1;
reg   [7:0] OFM_V_1_address0;
reg    OFM_V_1_ce0;
wire   [31:0] OFM_V_1_q0;
reg   [7:0] OFM_V_1_address1;
reg    OFM_V_1_ce1;
reg    OFM_V_1_we1;
reg   [31:0] OFM_V_1_d1;
reg   [7:0] OFM_V_2_address0;
reg    OFM_V_2_ce0;
wire   [31:0] OFM_V_2_q0;
reg   [7:0] OFM_V_2_address1;
reg    OFM_V_2_ce1;
reg    OFM_V_2_we1;
reg   [31:0] OFM_V_2_d1;
reg   [7:0] OFM_V_3_address0;
reg    OFM_V_3_ce0;
wire   [31:0] OFM_V_3_q0;
reg   [7:0] OFM_V_3_address1;
reg    OFM_V_3_ce1;
reg    OFM_V_3_we1;
reg   [31:0] OFM_V_3_d1;
reg   [7:0] OFM_V_4_address0;
reg    OFM_V_4_ce0;
wire   [31:0] OFM_V_4_q0;
reg   [7:0] OFM_V_4_address1;
reg    OFM_V_4_ce1;
reg    OFM_V_4_we1;
reg   [31:0] OFM_V_4_d1;
reg   [7:0] OFM_V_5_address0;
reg    OFM_V_5_ce0;
wire   [31:0] OFM_V_5_q0;
reg   [7:0] OFM_V_5_address1;
reg    OFM_V_5_ce1;
reg    OFM_V_5_we1;
reg   [31:0] OFM_V_5_d1;
reg   [7:0] OFM_V_6_address0;
reg    OFM_V_6_ce0;
wire   [31:0] OFM_V_6_q0;
reg   [7:0] OFM_V_6_address1;
reg    OFM_V_6_ce1;
reg    OFM_V_6_we1;
reg   [31:0] OFM_V_6_d1;
reg   [7:0] OFM_V_7_address0;
reg    OFM_V_7_ce0;
wire   [31:0] OFM_V_7_q0;
reg   [7:0] OFM_V_7_address1;
reg    OFM_V_7_ce1;
reg    OFM_V_7_we1;
reg   [31:0] OFM_V_7_d1;
reg   [7:0] OFM_DB_V_0_address0;
reg    OFM_DB_V_0_ce0;
wire   [31:0] OFM_DB_V_0_q0;
reg   [7:0] OFM_DB_V_0_address1;
reg    OFM_DB_V_0_ce1;
reg    OFM_DB_V_0_we1;
reg   [31:0] OFM_DB_V_0_d1;
reg   [7:0] OFM_DB_V_1_address0;
reg    OFM_DB_V_1_ce0;
wire   [31:0] OFM_DB_V_1_q0;
reg   [7:0] OFM_DB_V_1_address1;
reg    OFM_DB_V_1_ce1;
reg    OFM_DB_V_1_we1;
reg   [31:0] OFM_DB_V_1_d1;
reg   [7:0] OFM_DB_V_2_address0;
reg    OFM_DB_V_2_ce0;
wire   [31:0] OFM_DB_V_2_q0;
reg   [7:0] OFM_DB_V_2_address1;
reg    OFM_DB_V_2_ce1;
reg    OFM_DB_V_2_we1;
reg   [31:0] OFM_DB_V_2_d1;
reg   [7:0] OFM_DB_V_3_address0;
reg    OFM_DB_V_3_ce0;
wire   [31:0] OFM_DB_V_3_q0;
reg   [7:0] OFM_DB_V_3_address1;
reg    OFM_DB_V_3_ce1;
reg    OFM_DB_V_3_we1;
reg   [31:0] OFM_DB_V_3_d1;
reg   [7:0] OFM_DB_V_4_address0;
reg    OFM_DB_V_4_ce0;
wire   [31:0] OFM_DB_V_4_q0;
reg   [7:0] OFM_DB_V_4_address1;
reg    OFM_DB_V_4_ce1;
reg    OFM_DB_V_4_we1;
reg   [31:0] OFM_DB_V_4_d1;
reg   [7:0] OFM_DB_V_5_address0;
reg    OFM_DB_V_5_ce0;
wire   [31:0] OFM_DB_V_5_q0;
reg   [7:0] OFM_DB_V_5_address1;
reg    OFM_DB_V_5_ce1;
reg    OFM_DB_V_5_we1;
reg   [31:0] OFM_DB_V_5_d1;
reg   [7:0] OFM_DB_V_6_address0;
reg    OFM_DB_V_6_ce0;
wire   [31:0] OFM_DB_V_6_q0;
reg   [7:0] OFM_DB_V_6_address1;
reg    OFM_DB_V_6_ce1;
reg    OFM_DB_V_6_we1;
reg   [31:0] OFM_DB_V_6_d1;
reg   [7:0] OFM_DB_V_7_address0;
reg    OFM_DB_V_7_ce0;
wire   [31:0] OFM_DB_V_7_q0;
reg   [7:0] OFM_DB_V_7_address1;
reg    OFM_DB_V_7_ce1;
reg    OFM_DB_V_7_we1;
reg   [31:0] OFM_DB_V_7_d1;
reg    BIAS_DB_V_ce0;
reg    BIAS_DB_V_we0;
wire   [31:0] BIAS_DB_V_q0;
reg    BIAS_V_ce0;
reg    BIAS_V_we0;
wire   [31:0] BIAS_V_q0;
reg   [31:0] custom_Tc_read_reg_745;
reg   [31:0] custom_Tr_read_reg_751;
reg   [31:0] custom_k_read_reg_757;
reg   [31:0] N_read_reg_762;
reg   [31:0] col_read_reg_767;
reg   [31:0] row_read_reg_772;
wire    grp_Load_Fire_fu_398_ap_start;
wire    grp_Load_Fire_fu_398_ap_done;
wire    grp_Load_Fire_fu_398_ap_idle;
wire    grp_Load_Fire_fu_398_ap_ready;
wire    grp_Load_Fire_fu_398_input_dma_W_TVALID;
wire    grp_Load_Fire_fu_398_input_dma_W_TREADY;
wire    grp_Load_Fire_fu_398_input_dma_I_TVALID;
wire    grp_Load_Fire_fu_398_input_dma_I_TREADY;
wire   [7:0] grp_Load_Fire_fu_398_OFM_0_V_address0;
wire    grp_Load_Fire_fu_398_OFM_0_V_ce0;
reg   [31:0] grp_Load_Fire_fu_398_OFM_0_V_q0;
wire   [7:0] grp_Load_Fire_fu_398_OFM_0_V_address1;
wire    grp_Load_Fire_fu_398_OFM_0_V_ce1;
wire    grp_Load_Fire_fu_398_OFM_0_V_we1;
wire   [31:0] grp_Load_Fire_fu_398_OFM_0_V_d1;
wire   [7:0] grp_Load_Fire_fu_398_OFM_1_V_address0;
wire    grp_Load_Fire_fu_398_OFM_1_V_ce0;
reg   [31:0] grp_Load_Fire_fu_398_OFM_1_V_q0;
wire   [7:0] grp_Load_Fire_fu_398_OFM_1_V_address1;
wire    grp_Load_Fire_fu_398_OFM_1_V_ce1;
wire    grp_Load_Fire_fu_398_OFM_1_V_we1;
wire   [31:0] grp_Load_Fire_fu_398_OFM_1_V_d1;
wire   [7:0] grp_Load_Fire_fu_398_OFM_2_V_address0;
wire    grp_Load_Fire_fu_398_OFM_2_V_ce0;
reg   [31:0] grp_Load_Fire_fu_398_OFM_2_V_q0;
wire   [7:0] grp_Load_Fire_fu_398_OFM_2_V_address1;
wire    grp_Load_Fire_fu_398_OFM_2_V_ce1;
wire    grp_Load_Fire_fu_398_OFM_2_V_we1;
wire   [31:0] grp_Load_Fire_fu_398_OFM_2_V_d1;
wire   [7:0] grp_Load_Fire_fu_398_OFM_3_V_address0;
wire    grp_Load_Fire_fu_398_OFM_3_V_ce0;
reg   [31:0] grp_Load_Fire_fu_398_OFM_3_V_q0;
wire   [7:0] grp_Load_Fire_fu_398_OFM_3_V_address1;
wire    grp_Load_Fire_fu_398_OFM_3_V_ce1;
wire    grp_Load_Fire_fu_398_OFM_3_V_we1;
wire   [31:0] grp_Load_Fire_fu_398_OFM_3_V_d1;
wire   [7:0] grp_Load_Fire_fu_398_OFM_4_V_address0;
wire    grp_Load_Fire_fu_398_OFM_4_V_ce0;
reg   [31:0] grp_Load_Fire_fu_398_OFM_4_V_q0;
wire   [7:0] grp_Load_Fire_fu_398_OFM_4_V_address1;
wire    grp_Load_Fire_fu_398_OFM_4_V_ce1;
wire    grp_Load_Fire_fu_398_OFM_4_V_we1;
wire   [31:0] grp_Load_Fire_fu_398_OFM_4_V_d1;
wire   [7:0] grp_Load_Fire_fu_398_OFM_5_V_address0;
wire    grp_Load_Fire_fu_398_OFM_5_V_ce0;
reg   [31:0] grp_Load_Fire_fu_398_OFM_5_V_q0;
wire   [7:0] grp_Load_Fire_fu_398_OFM_5_V_address1;
wire    grp_Load_Fire_fu_398_OFM_5_V_ce1;
wire    grp_Load_Fire_fu_398_OFM_5_V_we1;
wire   [31:0] grp_Load_Fire_fu_398_OFM_5_V_d1;
wire   [7:0] grp_Load_Fire_fu_398_OFM_6_V_address0;
wire    grp_Load_Fire_fu_398_OFM_6_V_ce0;
reg   [31:0] grp_Load_Fire_fu_398_OFM_6_V_q0;
wire   [7:0] grp_Load_Fire_fu_398_OFM_6_V_address1;
wire    grp_Load_Fire_fu_398_OFM_6_V_ce1;
wire    grp_Load_Fire_fu_398_OFM_6_V_we1;
wire   [31:0] grp_Load_Fire_fu_398_OFM_6_V_d1;
wire   [7:0] grp_Load_Fire_fu_398_OFM_7_V_address0;
wire    grp_Load_Fire_fu_398_OFM_7_V_ce0;
reg   [31:0] grp_Load_Fire_fu_398_OFM_7_V_q0;
wire   [7:0] grp_Load_Fire_fu_398_OFM_7_V_address1;
wire    grp_Load_Fire_fu_398_OFM_7_V_ce1;
wire    grp_Load_Fire_fu_398_OFM_7_V_we1;
wire   [31:0] grp_Load_Fire_fu_398_OFM_7_V_d1;
wire    grp_OFM_STORE_fu_698_ap_start;
wire    grp_OFM_STORE_fu_698_ap_done;
wire    grp_OFM_STORE_fu_698_ap_idle;
wire    grp_OFM_STORE_fu_698_ap_ready;
wire   [63:0] grp_OFM_STORE_fu_698_output_dma_O_TDATA;
wire    grp_OFM_STORE_fu_698_output_dma_O_TVALID;
wire    grp_OFM_STORE_fu_698_output_dma_O_TREADY;
wire    grp_OFM_STORE_fu_698_output_dma_O_TLAST;
wire    grp_OFM_STORE_fu_698_input_dma_B_TVALID;
wire    grp_OFM_STORE_fu_698_input_dma_B_TREADY;
wire   [7:0] grp_OFM_STORE_fu_698_OFM_0_V_address0;
wire    grp_OFM_STORE_fu_698_OFM_0_V_ce0;
reg   [31:0] grp_OFM_STORE_fu_698_OFM_0_V_q0;
wire   [7:0] grp_OFM_STORE_fu_698_OFM_0_V_address1;
wire    grp_OFM_STORE_fu_698_OFM_0_V_ce1;
wire    grp_OFM_STORE_fu_698_OFM_0_V_we1;
wire   [31:0] grp_OFM_STORE_fu_698_OFM_0_V_d1;
wire   [7:0] grp_OFM_STORE_fu_698_OFM_1_V_address0;
wire    grp_OFM_STORE_fu_698_OFM_1_V_ce0;
reg   [31:0] grp_OFM_STORE_fu_698_OFM_1_V_q0;
wire   [7:0] grp_OFM_STORE_fu_698_OFM_1_V_address1;
wire    grp_OFM_STORE_fu_698_OFM_1_V_ce1;
wire    grp_OFM_STORE_fu_698_OFM_1_V_we1;
wire   [31:0] grp_OFM_STORE_fu_698_OFM_1_V_d1;
wire   [7:0] grp_OFM_STORE_fu_698_OFM_2_V_address0;
wire    grp_OFM_STORE_fu_698_OFM_2_V_ce0;
reg   [31:0] grp_OFM_STORE_fu_698_OFM_2_V_q0;
wire   [7:0] grp_OFM_STORE_fu_698_OFM_2_V_address1;
wire    grp_OFM_STORE_fu_698_OFM_2_V_ce1;
wire    grp_OFM_STORE_fu_698_OFM_2_V_we1;
wire   [31:0] grp_OFM_STORE_fu_698_OFM_2_V_d1;
wire   [7:0] grp_OFM_STORE_fu_698_OFM_3_V_address0;
wire    grp_OFM_STORE_fu_698_OFM_3_V_ce0;
reg   [31:0] grp_OFM_STORE_fu_698_OFM_3_V_q0;
wire   [7:0] grp_OFM_STORE_fu_698_OFM_3_V_address1;
wire    grp_OFM_STORE_fu_698_OFM_3_V_ce1;
wire    grp_OFM_STORE_fu_698_OFM_3_V_we1;
wire   [31:0] grp_OFM_STORE_fu_698_OFM_3_V_d1;
wire   [7:0] grp_OFM_STORE_fu_698_OFM_4_V_address0;
wire    grp_OFM_STORE_fu_698_OFM_4_V_ce0;
reg   [31:0] grp_OFM_STORE_fu_698_OFM_4_V_q0;
wire   [7:0] grp_OFM_STORE_fu_698_OFM_4_V_address1;
wire    grp_OFM_STORE_fu_698_OFM_4_V_ce1;
wire    grp_OFM_STORE_fu_698_OFM_4_V_we1;
wire   [31:0] grp_OFM_STORE_fu_698_OFM_4_V_d1;
wire   [7:0] grp_OFM_STORE_fu_698_OFM_5_V_address0;
wire    grp_OFM_STORE_fu_698_OFM_5_V_ce0;
reg   [31:0] grp_OFM_STORE_fu_698_OFM_5_V_q0;
wire   [7:0] grp_OFM_STORE_fu_698_OFM_5_V_address1;
wire    grp_OFM_STORE_fu_698_OFM_5_V_ce1;
wire    grp_OFM_STORE_fu_698_OFM_5_V_we1;
wire   [31:0] grp_OFM_STORE_fu_698_OFM_5_V_d1;
wire   [7:0] grp_OFM_STORE_fu_698_OFM_6_V_address0;
wire    grp_OFM_STORE_fu_698_OFM_6_V_ce0;
reg   [31:0] grp_OFM_STORE_fu_698_OFM_6_V_q0;
wire   [7:0] grp_OFM_STORE_fu_698_OFM_6_V_address1;
wire    grp_OFM_STORE_fu_698_OFM_6_V_ce1;
wire    grp_OFM_STORE_fu_698_OFM_6_V_we1;
wire   [31:0] grp_OFM_STORE_fu_698_OFM_6_V_d1;
wire   [7:0] grp_OFM_STORE_fu_698_OFM_7_V_address0;
wire    grp_OFM_STORE_fu_698_OFM_7_V_ce0;
reg   [31:0] grp_OFM_STORE_fu_698_OFM_7_V_q0;
wire   [7:0] grp_OFM_STORE_fu_698_OFM_7_V_address1;
wire    grp_OFM_STORE_fu_698_OFM_7_V_ce1;
wire    grp_OFM_STORE_fu_698_OFM_7_V_we1;
wire   [31:0] grp_OFM_STORE_fu_698_OFM_7_V_d1;
wire   [2:0] grp_OFM_STORE_fu_698_BIAS_V_2_address0;
wire    grp_OFM_STORE_fu_698_BIAS_V_2_ce0;
wire    grp_OFM_STORE_fu_698_BIAS_V_2_we0;
wire   [31:0] grp_OFM_STORE_fu_698_BIAS_V_2_d0;
reg   [31:0] grp_OFM_STORE_fu_698_BIAS_V_2_q0;
reg    grp_Load_Fire_fu_398_ap_start_reg;
wire   [0:0] tmp_fu_741_p1;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg    grp_OFM_STORE_fu_698_ap_start_reg;
wire    ap_CS_fsm_state4;
reg    ap_block_state4;
reg   [3:0] ap_NS_fsm;
reg    ap_block_state2_on_subcall_done;
reg    ap_block_state3_on_subcall_done;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 input_dma_W_V_data_0_sel_rd = 1'b0;
#0 input_dma_W_V_data_0_sel_wr = 1'b0;
#0 input_dma_W_V_data_0_state = 2'd0;
#0 input_dma_W_V_last_0_sel_rd = 1'b0;
#0 input_dma_W_V_last_0_sel_wr = 1'b0;
#0 input_dma_W_V_last_0_state = 2'd0;
#0 input_dma_I_V_data_0_sel_rd = 1'b0;
#0 input_dma_I_V_data_0_sel_wr = 1'b0;
#0 input_dma_I_V_data_0_state = 2'd0;
#0 input_dma_I_V_last_0_sel_rd = 1'b0;
#0 input_dma_I_V_last_0_sel_wr = 1'b0;
#0 input_dma_I_V_last_0_state = 2'd0;
#0 input_dma_B_V_data_V_0_sel_rd = 1'b0;
#0 input_dma_B_V_data_V_0_sel_wr = 1'b0;
#0 input_dma_B_V_data_V_0_state = 2'd0;
#0 input_dma_B_V_last_0_sel_rd = 1'b0;
#0 input_dma_B_V_last_0_sel_wr = 1'b0;
#0 input_dma_B_V_last_0_state = 2'd0;
#0 output_dma_O_V_data_1_sel_rd = 1'b0;
#0 output_dma_O_V_data_1_sel_wr = 1'b0;
#0 output_dma_O_V_data_1_state = 2'd0;
#0 output_dma_O_V_last_1_sel_rd = 1'b0;
#0 output_dma_O_V_last_1_sel_wr = 1'b0;
#0 output_dma_O_V_last_1_state = 2'd0;
#0 grp_Load_Fire_fu_398_ap_start_reg = 1'b0;
#0 grp_OFM_STORE_fu_698_ap_start_reg = 1'b0;
end

top_OFM_V_0 #(
    .DataWidth( 32 ),
    .AddressRange( 169 ),
    .AddressWidth( 8 ))
OFM_V_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(OFM_V_0_address0),
    .ce0(OFM_V_0_ce0),
    .q0(OFM_V_0_q0),
    .address1(OFM_V_0_address1),
    .ce1(OFM_V_0_ce1),
    .we1(OFM_V_0_we1),
    .d1(OFM_V_0_d1)
);

top_OFM_V_0 #(
    .DataWidth( 32 ),
    .AddressRange( 169 ),
    .AddressWidth( 8 ))
OFM_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(OFM_V_1_address0),
    .ce0(OFM_V_1_ce0),
    .q0(OFM_V_1_q0),
    .address1(OFM_V_1_address1),
    .ce1(OFM_V_1_ce1),
    .we1(OFM_V_1_we1),
    .d1(OFM_V_1_d1)
);

top_OFM_V_0 #(
    .DataWidth( 32 ),
    .AddressRange( 169 ),
    .AddressWidth( 8 ))
OFM_V_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(OFM_V_2_address0),
    .ce0(OFM_V_2_ce0),
    .q0(OFM_V_2_q0),
    .address1(OFM_V_2_address1),
    .ce1(OFM_V_2_ce1),
    .we1(OFM_V_2_we1),
    .d1(OFM_V_2_d1)
);

top_OFM_V_0 #(
    .DataWidth( 32 ),
    .AddressRange( 169 ),
    .AddressWidth( 8 ))
OFM_V_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(OFM_V_3_address0),
    .ce0(OFM_V_3_ce0),
    .q0(OFM_V_3_q0),
    .address1(OFM_V_3_address1),
    .ce1(OFM_V_3_ce1),
    .we1(OFM_V_3_we1),
    .d1(OFM_V_3_d1)
);

top_OFM_V_0 #(
    .DataWidth( 32 ),
    .AddressRange( 169 ),
    .AddressWidth( 8 ))
OFM_V_4_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(OFM_V_4_address0),
    .ce0(OFM_V_4_ce0),
    .q0(OFM_V_4_q0),
    .address1(OFM_V_4_address1),
    .ce1(OFM_V_4_ce1),
    .we1(OFM_V_4_we1),
    .d1(OFM_V_4_d1)
);

top_OFM_V_0 #(
    .DataWidth( 32 ),
    .AddressRange( 169 ),
    .AddressWidth( 8 ))
OFM_V_5_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(OFM_V_5_address0),
    .ce0(OFM_V_5_ce0),
    .q0(OFM_V_5_q0),
    .address1(OFM_V_5_address1),
    .ce1(OFM_V_5_ce1),
    .we1(OFM_V_5_we1),
    .d1(OFM_V_5_d1)
);

top_OFM_V_0 #(
    .DataWidth( 32 ),
    .AddressRange( 169 ),
    .AddressWidth( 8 ))
OFM_V_6_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(OFM_V_6_address0),
    .ce0(OFM_V_6_ce0),
    .q0(OFM_V_6_q0),
    .address1(OFM_V_6_address1),
    .ce1(OFM_V_6_ce1),
    .we1(OFM_V_6_we1),
    .d1(OFM_V_6_d1)
);

top_OFM_V_0 #(
    .DataWidth( 32 ),
    .AddressRange( 169 ),
    .AddressWidth( 8 ))
OFM_V_7_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(OFM_V_7_address0),
    .ce0(OFM_V_7_ce0),
    .q0(OFM_V_7_q0),
    .address1(OFM_V_7_address1),
    .ce1(OFM_V_7_ce1),
    .we1(OFM_V_7_we1),
    .d1(OFM_V_7_d1)
);

top_OFM_V_0 #(
    .DataWidth( 32 ),
    .AddressRange( 169 ),
    .AddressWidth( 8 ))
OFM_DB_V_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(OFM_DB_V_0_address0),
    .ce0(OFM_DB_V_0_ce0),
    .q0(OFM_DB_V_0_q0),
    .address1(OFM_DB_V_0_address1),
    .ce1(OFM_DB_V_0_ce1),
    .we1(OFM_DB_V_0_we1),
    .d1(OFM_DB_V_0_d1)
);

top_OFM_V_0 #(
    .DataWidth( 32 ),
    .AddressRange( 169 ),
    .AddressWidth( 8 ))
OFM_DB_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(OFM_DB_V_1_address0),
    .ce0(OFM_DB_V_1_ce0),
    .q0(OFM_DB_V_1_q0),
    .address1(OFM_DB_V_1_address1),
    .ce1(OFM_DB_V_1_ce1),
    .we1(OFM_DB_V_1_we1),
    .d1(OFM_DB_V_1_d1)
);

top_OFM_V_0 #(
    .DataWidth( 32 ),
    .AddressRange( 169 ),
    .AddressWidth( 8 ))
OFM_DB_V_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(OFM_DB_V_2_address0),
    .ce0(OFM_DB_V_2_ce0),
    .q0(OFM_DB_V_2_q0),
    .address1(OFM_DB_V_2_address1),
    .ce1(OFM_DB_V_2_ce1),
    .we1(OFM_DB_V_2_we1),
    .d1(OFM_DB_V_2_d1)
);

top_OFM_V_0 #(
    .DataWidth( 32 ),
    .AddressRange( 169 ),
    .AddressWidth( 8 ))
OFM_DB_V_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(OFM_DB_V_3_address0),
    .ce0(OFM_DB_V_3_ce0),
    .q0(OFM_DB_V_3_q0),
    .address1(OFM_DB_V_3_address1),
    .ce1(OFM_DB_V_3_ce1),
    .we1(OFM_DB_V_3_we1),
    .d1(OFM_DB_V_3_d1)
);

top_OFM_V_0 #(
    .DataWidth( 32 ),
    .AddressRange( 169 ),
    .AddressWidth( 8 ))
OFM_DB_V_4_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(OFM_DB_V_4_address0),
    .ce0(OFM_DB_V_4_ce0),
    .q0(OFM_DB_V_4_q0),
    .address1(OFM_DB_V_4_address1),
    .ce1(OFM_DB_V_4_ce1),
    .we1(OFM_DB_V_4_we1),
    .d1(OFM_DB_V_4_d1)
);

top_OFM_V_0 #(
    .DataWidth( 32 ),
    .AddressRange( 169 ),
    .AddressWidth( 8 ))
OFM_DB_V_5_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(OFM_DB_V_5_address0),
    .ce0(OFM_DB_V_5_ce0),
    .q0(OFM_DB_V_5_q0),
    .address1(OFM_DB_V_5_address1),
    .ce1(OFM_DB_V_5_ce1),
    .we1(OFM_DB_V_5_we1),
    .d1(OFM_DB_V_5_d1)
);

top_OFM_V_0 #(
    .DataWidth( 32 ),
    .AddressRange( 169 ),
    .AddressWidth( 8 ))
OFM_DB_V_6_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(OFM_DB_V_6_address0),
    .ce0(OFM_DB_V_6_ce0),
    .q0(OFM_DB_V_6_q0),
    .address1(OFM_DB_V_6_address1),
    .ce1(OFM_DB_V_6_ce1),
    .we1(OFM_DB_V_6_we1),
    .d1(OFM_DB_V_6_d1)
);

top_OFM_V_0 #(
    .DataWidth( 32 ),
    .AddressRange( 169 ),
    .AddressWidth( 8 ))
OFM_DB_V_7_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(OFM_DB_V_7_address0),
    .ce0(OFM_DB_V_7_ce0),
    .q0(OFM_DB_V_7_q0),
    .address1(OFM_DB_V_7_address1),
    .ce1(OFM_DB_V_7_ce1),
    .we1(OFM_DB_V_7_we1),
    .d1(OFM_DB_V_7_d1)
);

top_BIAS_DB_V #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
BIAS_DB_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(grp_OFM_STORE_fu_698_BIAS_V_2_address0),
    .ce0(BIAS_DB_V_ce0),
    .we0(BIAS_DB_V_we0),
    .d0(grp_OFM_STORE_fu_698_BIAS_V_2_d0),
    .q0(BIAS_DB_V_q0)
);

top_BIAS_DB_V #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
BIAS_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(grp_OFM_STORE_fu_698_BIAS_V_2_address0),
    .ce0(BIAS_V_ce0),
    .we0(BIAS_V_we0),
    .d0(grp_OFM_STORE_fu_698_BIAS_V_2_d0),
    .q0(BIAS_V_q0)
);

top_CRTL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CRTL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CRTL_BUS_DATA_WIDTH ))
top_CRTL_BUS_s_axi_U(
    .AWVALID(s_axi_CRTL_BUS_AWVALID),
    .AWREADY(s_axi_CRTL_BUS_AWREADY),
    .AWADDR(s_axi_CRTL_BUS_AWADDR),
    .WVALID(s_axi_CRTL_BUS_WVALID),
    .WREADY(s_axi_CRTL_BUS_WREADY),
    .WDATA(s_axi_CRTL_BUS_WDATA),
    .WSTRB(s_axi_CRTL_BUS_WSTRB),
    .ARVALID(s_axi_CRTL_BUS_ARVALID),
    .ARREADY(s_axi_CRTL_BUS_ARREADY),
    .ARADDR(s_axi_CRTL_BUS_ARADDR),
    .RVALID(s_axi_CRTL_BUS_RVALID),
    .RREADY(s_axi_CRTL_BUS_RREADY),
    .RDATA(s_axi_CRTL_BUS_RDATA),
    .RRESP(s_axi_CRTL_BUS_RRESP),
    .BVALID(s_axi_CRTL_BUS_BVALID),
    .BREADY(s_axi_CRTL_BUS_BREADY),
    .BRESP(s_axi_CRTL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .row(row),
    .col(col),
    .flag(flag),
    .num(num),
    .N(N),
    .custom_k(custom_k),
    .custom_Tr(custom_Tr),
    .custom_Tc(custom_Tc)
);

Load_Fire grp_Load_Fire_fu_398(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_Load_Fire_fu_398_ap_start),
    .ap_done(grp_Load_Fire_fu_398_ap_done),
    .ap_idle(grp_Load_Fire_fu_398_ap_idle),
    .ap_ready(grp_Load_Fire_fu_398_ap_ready),
    .input_dma_W_TDATA(input_dma_W_V_data_0_data_out),
    .input_dma_W_TVALID(grp_Load_Fire_fu_398_input_dma_W_TVALID),
    .input_dma_W_TREADY(grp_Load_Fire_fu_398_input_dma_W_TREADY),
    .input_dma_W_TLAST(input_dma_W_V_last_0_data_out),
    .input_dma_I_TDATA(input_dma_I_V_data_0_data_out),
    .input_dma_I_TVALID(grp_Load_Fire_fu_398_input_dma_I_TVALID),
    .input_dma_I_TREADY(grp_Load_Fire_fu_398_input_dma_I_TREADY),
    .input_dma_I_TLAST(input_dma_I_V_last_0_data_out),
    .OFM_0_V_address0(grp_Load_Fire_fu_398_OFM_0_V_address0),
    .OFM_0_V_ce0(grp_Load_Fire_fu_398_OFM_0_V_ce0),
    .OFM_0_V_q0(grp_Load_Fire_fu_398_OFM_0_V_q0),
    .OFM_0_V_address1(grp_Load_Fire_fu_398_OFM_0_V_address1),
    .OFM_0_V_ce1(grp_Load_Fire_fu_398_OFM_0_V_ce1),
    .OFM_0_V_we1(grp_Load_Fire_fu_398_OFM_0_V_we1),
    .OFM_0_V_d1(grp_Load_Fire_fu_398_OFM_0_V_d1),
    .OFM_1_V_address0(grp_Load_Fire_fu_398_OFM_1_V_address0),
    .OFM_1_V_ce0(grp_Load_Fire_fu_398_OFM_1_V_ce0),
    .OFM_1_V_q0(grp_Load_Fire_fu_398_OFM_1_V_q0),
    .OFM_1_V_address1(grp_Load_Fire_fu_398_OFM_1_V_address1),
    .OFM_1_V_ce1(grp_Load_Fire_fu_398_OFM_1_V_ce1),
    .OFM_1_V_we1(grp_Load_Fire_fu_398_OFM_1_V_we1),
    .OFM_1_V_d1(grp_Load_Fire_fu_398_OFM_1_V_d1),
    .OFM_2_V_address0(grp_Load_Fire_fu_398_OFM_2_V_address0),
    .OFM_2_V_ce0(grp_Load_Fire_fu_398_OFM_2_V_ce0),
    .OFM_2_V_q0(grp_Load_Fire_fu_398_OFM_2_V_q0),
    .OFM_2_V_address1(grp_Load_Fire_fu_398_OFM_2_V_address1),
    .OFM_2_V_ce1(grp_Load_Fire_fu_398_OFM_2_V_ce1),
    .OFM_2_V_we1(grp_Load_Fire_fu_398_OFM_2_V_we1),
    .OFM_2_V_d1(grp_Load_Fire_fu_398_OFM_2_V_d1),
    .OFM_3_V_address0(grp_Load_Fire_fu_398_OFM_3_V_address0),
    .OFM_3_V_ce0(grp_Load_Fire_fu_398_OFM_3_V_ce0),
    .OFM_3_V_q0(grp_Load_Fire_fu_398_OFM_3_V_q0),
    .OFM_3_V_address1(grp_Load_Fire_fu_398_OFM_3_V_address1),
    .OFM_3_V_ce1(grp_Load_Fire_fu_398_OFM_3_V_ce1),
    .OFM_3_V_we1(grp_Load_Fire_fu_398_OFM_3_V_we1),
    .OFM_3_V_d1(grp_Load_Fire_fu_398_OFM_3_V_d1),
    .OFM_4_V_address0(grp_Load_Fire_fu_398_OFM_4_V_address0),
    .OFM_4_V_ce0(grp_Load_Fire_fu_398_OFM_4_V_ce0),
    .OFM_4_V_q0(grp_Load_Fire_fu_398_OFM_4_V_q0),
    .OFM_4_V_address1(grp_Load_Fire_fu_398_OFM_4_V_address1),
    .OFM_4_V_ce1(grp_Load_Fire_fu_398_OFM_4_V_ce1),
    .OFM_4_V_we1(grp_Load_Fire_fu_398_OFM_4_V_we1),
    .OFM_4_V_d1(grp_Load_Fire_fu_398_OFM_4_V_d1),
    .OFM_5_V_address0(grp_Load_Fire_fu_398_OFM_5_V_address0),
    .OFM_5_V_ce0(grp_Load_Fire_fu_398_OFM_5_V_ce0),
    .OFM_5_V_q0(grp_Load_Fire_fu_398_OFM_5_V_q0),
    .OFM_5_V_address1(grp_Load_Fire_fu_398_OFM_5_V_address1),
    .OFM_5_V_ce1(grp_Load_Fire_fu_398_OFM_5_V_ce1),
    .OFM_5_V_we1(grp_Load_Fire_fu_398_OFM_5_V_we1),
    .OFM_5_V_d1(grp_Load_Fire_fu_398_OFM_5_V_d1),
    .OFM_6_V_address0(grp_Load_Fire_fu_398_OFM_6_V_address0),
    .OFM_6_V_ce0(grp_Load_Fire_fu_398_OFM_6_V_ce0),
    .OFM_6_V_q0(grp_Load_Fire_fu_398_OFM_6_V_q0),
    .OFM_6_V_address1(grp_Load_Fire_fu_398_OFM_6_V_address1),
    .OFM_6_V_ce1(grp_Load_Fire_fu_398_OFM_6_V_ce1),
    .OFM_6_V_we1(grp_Load_Fire_fu_398_OFM_6_V_we1),
    .OFM_6_V_d1(grp_Load_Fire_fu_398_OFM_6_V_d1),
    .OFM_7_V_address0(grp_Load_Fire_fu_398_OFM_7_V_address0),
    .OFM_7_V_ce0(grp_Load_Fire_fu_398_OFM_7_V_ce0),
    .OFM_7_V_q0(grp_Load_Fire_fu_398_OFM_7_V_q0),
    .OFM_7_V_address1(grp_Load_Fire_fu_398_OFM_7_V_address1),
    .OFM_7_V_ce1(grp_Load_Fire_fu_398_OFM_7_V_ce1),
    .OFM_7_V_we1(grp_Load_Fire_fu_398_OFM_7_V_we1),
    .OFM_7_V_d1(grp_Load_Fire_fu_398_OFM_7_V_d1),
    .row(row_read_reg_772),
    .col(col_read_reg_767),
    .N(N_read_reg_762),
    .custom_k(custom_k_read_reg_757),
    .custom_Tr(custom_Tr_read_reg_751),
    .custom_Tc(custom_Tc_read_reg_745)
);

OFM_STORE grp_OFM_STORE_fu_698(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_OFM_STORE_fu_698_ap_start),
    .ap_done(grp_OFM_STORE_fu_698_ap_done),
    .ap_idle(grp_OFM_STORE_fu_698_ap_idle),
    .ap_ready(grp_OFM_STORE_fu_698_ap_ready),
    .output_dma_O_TDATA(grp_OFM_STORE_fu_698_output_dma_O_TDATA),
    .output_dma_O_TVALID(grp_OFM_STORE_fu_698_output_dma_O_TVALID),
    .output_dma_O_TREADY(grp_OFM_STORE_fu_698_output_dma_O_TREADY),
    .output_dma_O_TLAST(grp_OFM_STORE_fu_698_output_dma_O_TLAST),
    .input_dma_B_TDATA(input_dma_B_V_data_V_0_data_out),
    .input_dma_B_TVALID(grp_OFM_STORE_fu_698_input_dma_B_TVALID),
    .input_dma_B_TREADY(grp_OFM_STORE_fu_698_input_dma_B_TREADY),
    .input_dma_B_TLAST(input_dma_B_V_last_0_data_out),
    .OFM_0_V_address0(grp_OFM_STORE_fu_698_OFM_0_V_address0),
    .OFM_0_V_ce0(grp_OFM_STORE_fu_698_OFM_0_V_ce0),
    .OFM_0_V_q0(grp_OFM_STORE_fu_698_OFM_0_V_q0),
    .OFM_0_V_address1(grp_OFM_STORE_fu_698_OFM_0_V_address1),
    .OFM_0_V_ce1(grp_OFM_STORE_fu_698_OFM_0_V_ce1),
    .OFM_0_V_we1(grp_OFM_STORE_fu_698_OFM_0_V_we1),
    .OFM_0_V_d1(grp_OFM_STORE_fu_698_OFM_0_V_d1),
    .OFM_1_V_address0(grp_OFM_STORE_fu_698_OFM_1_V_address0),
    .OFM_1_V_ce0(grp_OFM_STORE_fu_698_OFM_1_V_ce0),
    .OFM_1_V_q0(grp_OFM_STORE_fu_698_OFM_1_V_q0),
    .OFM_1_V_address1(grp_OFM_STORE_fu_698_OFM_1_V_address1),
    .OFM_1_V_ce1(grp_OFM_STORE_fu_698_OFM_1_V_ce1),
    .OFM_1_V_we1(grp_OFM_STORE_fu_698_OFM_1_V_we1),
    .OFM_1_V_d1(grp_OFM_STORE_fu_698_OFM_1_V_d1),
    .OFM_2_V_address0(grp_OFM_STORE_fu_698_OFM_2_V_address0),
    .OFM_2_V_ce0(grp_OFM_STORE_fu_698_OFM_2_V_ce0),
    .OFM_2_V_q0(grp_OFM_STORE_fu_698_OFM_2_V_q0),
    .OFM_2_V_address1(grp_OFM_STORE_fu_698_OFM_2_V_address1),
    .OFM_2_V_ce1(grp_OFM_STORE_fu_698_OFM_2_V_ce1),
    .OFM_2_V_we1(grp_OFM_STORE_fu_698_OFM_2_V_we1),
    .OFM_2_V_d1(grp_OFM_STORE_fu_698_OFM_2_V_d1),
    .OFM_3_V_address0(grp_OFM_STORE_fu_698_OFM_3_V_address0),
    .OFM_3_V_ce0(grp_OFM_STORE_fu_698_OFM_3_V_ce0),
    .OFM_3_V_q0(grp_OFM_STORE_fu_698_OFM_3_V_q0),
    .OFM_3_V_address1(grp_OFM_STORE_fu_698_OFM_3_V_address1),
    .OFM_3_V_ce1(grp_OFM_STORE_fu_698_OFM_3_V_ce1),
    .OFM_3_V_we1(grp_OFM_STORE_fu_698_OFM_3_V_we1),
    .OFM_3_V_d1(grp_OFM_STORE_fu_698_OFM_3_V_d1),
    .OFM_4_V_address0(grp_OFM_STORE_fu_698_OFM_4_V_address0),
    .OFM_4_V_ce0(grp_OFM_STORE_fu_698_OFM_4_V_ce0),
    .OFM_4_V_q0(grp_OFM_STORE_fu_698_OFM_4_V_q0),
    .OFM_4_V_address1(grp_OFM_STORE_fu_698_OFM_4_V_address1),
    .OFM_4_V_ce1(grp_OFM_STORE_fu_698_OFM_4_V_ce1),
    .OFM_4_V_we1(grp_OFM_STORE_fu_698_OFM_4_V_we1),
    .OFM_4_V_d1(grp_OFM_STORE_fu_698_OFM_4_V_d1),
    .OFM_5_V_address0(grp_OFM_STORE_fu_698_OFM_5_V_address0),
    .OFM_5_V_ce0(grp_OFM_STORE_fu_698_OFM_5_V_ce0),
    .OFM_5_V_q0(grp_OFM_STORE_fu_698_OFM_5_V_q0),
    .OFM_5_V_address1(grp_OFM_STORE_fu_698_OFM_5_V_address1),
    .OFM_5_V_ce1(grp_OFM_STORE_fu_698_OFM_5_V_ce1),
    .OFM_5_V_we1(grp_OFM_STORE_fu_698_OFM_5_V_we1),
    .OFM_5_V_d1(grp_OFM_STORE_fu_698_OFM_5_V_d1),
    .OFM_6_V_address0(grp_OFM_STORE_fu_698_OFM_6_V_address0),
    .OFM_6_V_ce0(grp_OFM_STORE_fu_698_OFM_6_V_ce0),
    .OFM_6_V_q0(grp_OFM_STORE_fu_698_OFM_6_V_q0),
    .OFM_6_V_address1(grp_OFM_STORE_fu_698_OFM_6_V_address1),
    .OFM_6_V_ce1(grp_OFM_STORE_fu_698_OFM_6_V_ce1),
    .OFM_6_V_we1(grp_OFM_STORE_fu_698_OFM_6_V_we1),
    .OFM_6_V_d1(grp_OFM_STORE_fu_698_OFM_6_V_d1),
    .OFM_7_V_address0(grp_OFM_STORE_fu_698_OFM_7_V_address0),
    .OFM_7_V_ce0(grp_OFM_STORE_fu_698_OFM_7_V_ce0),
    .OFM_7_V_q0(grp_OFM_STORE_fu_698_OFM_7_V_q0),
    .OFM_7_V_address1(grp_OFM_STORE_fu_698_OFM_7_V_address1),
    .OFM_7_V_ce1(grp_OFM_STORE_fu_698_OFM_7_V_ce1),
    .OFM_7_V_we1(grp_OFM_STORE_fu_698_OFM_7_V_we1),
    .OFM_7_V_d1(grp_OFM_STORE_fu_698_OFM_7_V_d1),
    .BIAS_V_2_address0(grp_OFM_STORE_fu_698_BIAS_V_2_address0),
    .BIAS_V_2_ce0(grp_OFM_STORE_fu_698_BIAS_V_2_ce0),
    .BIAS_V_2_we0(grp_OFM_STORE_fu_698_BIAS_V_2_we0),
    .BIAS_V_2_d0(grp_OFM_STORE_fu_698_BIAS_V_2_d0),
    .BIAS_V_2_q0(grp_OFM_STORE_fu_698_BIAS_V_2_q0),
    .custom_Tr(custom_Tr_read_reg_751),
    .custom_Tc(custom_Tc_read_reg_745)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_Load_Fire_fu_398_ap_start_reg <= 1'b0;
    end else begin
        if ((((tmp_fu_741_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | ((tmp_fu_741_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
            grp_Load_Fire_fu_398_ap_start_reg <= 1'b1;
        end else if ((grp_Load_Fire_fu_398_ap_ready == 1'b1)) begin
            grp_Load_Fire_fu_398_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_OFM_STORE_fu_698_ap_start_reg <= 1'b0;
    end else begin
        if ((((tmp_fu_741_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | ((tmp_fu_741_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
            grp_OFM_STORE_fu_698_ap_start_reg <= 1'b1;
        end else if ((grp_OFM_STORE_fu_698_ap_ready == 1'b1)) begin
            grp_OFM_STORE_fu_698_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_dma_B_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((input_dma_B_V_data_V_0_ack_out == 1'b1) & (input_dma_B_V_data_V_0_vld_out == 1'b1))) begin
            input_dma_B_V_data_V_0_sel_rd <= ~input_dma_B_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_dma_B_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((input_dma_B_V_data_V_0_ack_in == 1'b1) & (input_dma_B_V_data_V_0_vld_in == 1'b1))) begin
            input_dma_B_V_data_V_0_sel_wr <= ~input_dma_B_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_dma_B_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((input_dma_B_V_data_V_0_state == 2'd2) & (input_dma_B_V_data_V_0_vld_in == 1'b0)) | ((input_dma_B_V_data_V_0_state == 2'd3) & (input_dma_B_V_data_V_0_vld_in == 1'b0) & (input_dma_B_V_data_V_0_ack_out == 1'b1)))) begin
            input_dma_B_V_data_V_0_state <= 2'd2;
        end else if ((((input_dma_B_V_data_V_0_state == 2'd1) & (input_dma_B_V_data_V_0_ack_out == 1'b0)) | ((input_dma_B_V_data_V_0_state == 2'd3) & (input_dma_B_V_data_V_0_ack_out == 1'b0) & (input_dma_B_V_data_V_0_vld_in == 1'b1)))) begin
            input_dma_B_V_data_V_0_state <= 2'd1;
        end else if (((~((input_dma_B_V_data_V_0_vld_in == 1'b0) & (input_dma_B_V_data_V_0_ack_out == 1'b1)) & ~((input_dma_B_V_data_V_0_ack_out == 1'b0) & (input_dma_B_V_data_V_0_vld_in == 1'b1)) & (input_dma_B_V_data_V_0_state == 2'd3)) | ((input_dma_B_V_data_V_0_state == 2'd1) & (input_dma_B_V_data_V_0_ack_out == 1'b1)) | ((input_dma_B_V_data_V_0_state == 2'd2) & (input_dma_B_V_data_V_0_vld_in == 1'b1)))) begin
            input_dma_B_V_data_V_0_state <= 2'd3;
        end else begin
            input_dma_B_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_dma_B_V_last_0_sel_rd <= 1'b0;
    end else begin
        if (((input_dma_B_V_last_0_ack_out == 1'b1) & (input_dma_B_V_last_0_vld_out == 1'b1))) begin
            input_dma_B_V_last_0_sel_rd <= ~input_dma_B_V_last_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_dma_B_V_last_0_sel_wr <= 1'b0;
    end else begin
        if (((input_dma_B_V_last_0_ack_in == 1'b1) & (input_dma_B_V_last_0_vld_in == 1'b1))) begin
            input_dma_B_V_last_0_sel_wr <= ~input_dma_B_V_last_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_dma_B_V_last_0_state <= 2'd0;
    end else begin
        if ((((input_dma_B_V_last_0_state == 2'd2) & (input_dma_B_V_last_0_vld_in == 1'b0)) | ((input_dma_B_V_last_0_state == 2'd3) & (input_dma_B_V_last_0_vld_in == 1'b0) & (input_dma_B_V_last_0_ack_out == 1'b1)))) begin
            input_dma_B_V_last_0_state <= 2'd2;
        end else if ((((input_dma_B_V_last_0_state == 2'd1) & (input_dma_B_V_last_0_ack_out == 1'b0)) | ((input_dma_B_V_last_0_state == 2'd3) & (input_dma_B_V_last_0_ack_out == 1'b0) & (input_dma_B_V_last_0_vld_in == 1'b1)))) begin
            input_dma_B_V_last_0_state <= 2'd1;
        end else if (((~((input_dma_B_V_last_0_vld_in == 1'b0) & (input_dma_B_V_last_0_ack_out == 1'b1)) & ~((input_dma_B_V_last_0_ack_out == 1'b0) & (input_dma_B_V_last_0_vld_in == 1'b1)) & (input_dma_B_V_last_0_state == 2'd3)) | ((input_dma_B_V_last_0_state == 2'd1) & (input_dma_B_V_last_0_ack_out == 1'b1)) | ((input_dma_B_V_last_0_state == 2'd2) & (input_dma_B_V_last_0_vld_in == 1'b1)))) begin
            input_dma_B_V_last_0_state <= 2'd3;
        end else begin
            input_dma_B_V_last_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_dma_I_V_data_0_sel_rd <= 1'b0;
    end else begin
        if (((input_dma_I_V_data_0_ack_out == 1'b1) & (input_dma_I_V_data_0_vld_out == 1'b1))) begin
            input_dma_I_V_data_0_sel_rd <= ~input_dma_I_V_data_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_dma_I_V_data_0_sel_wr <= 1'b0;
    end else begin
        if (((input_dma_I_V_data_0_ack_in == 1'b1) & (input_dma_I_V_data_0_vld_in == 1'b1))) begin
            input_dma_I_V_data_0_sel_wr <= ~input_dma_I_V_data_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_dma_I_V_data_0_state <= 2'd0;
    end else begin
        if ((((input_dma_I_V_data_0_state == 2'd2) & (input_dma_I_V_data_0_vld_in == 1'b0)) | ((input_dma_I_V_data_0_state == 2'd3) & (input_dma_I_V_data_0_vld_in == 1'b0) & (input_dma_I_V_data_0_ack_out == 1'b1)))) begin
            input_dma_I_V_data_0_state <= 2'd2;
        end else if ((((input_dma_I_V_data_0_state == 2'd1) & (input_dma_I_V_data_0_ack_out == 1'b0)) | ((input_dma_I_V_data_0_state == 2'd3) & (input_dma_I_V_data_0_ack_out == 1'b0) & (input_dma_I_V_data_0_vld_in == 1'b1)))) begin
            input_dma_I_V_data_0_state <= 2'd1;
        end else if (((~((input_dma_I_V_data_0_vld_in == 1'b0) & (input_dma_I_V_data_0_ack_out == 1'b1)) & ~((input_dma_I_V_data_0_ack_out == 1'b0) & (input_dma_I_V_data_0_vld_in == 1'b1)) & (input_dma_I_V_data_0_state == 2'd3)) | ((input_dma_I_V_data_0_state == 2'd1) & (input_dma_I_V_data_0_ack_out == 1'b1)) | ((input_dma_I_V_data_0_state == 2'd2) & (input_dma_I_V_data_0_vld_in == 1'b1)))) begin
            input_dma_I_V_data_0_state <= 2'd3;
        end else begin
            input_dma_I_V_data_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_dma_I_V_last_0_sel_rd <= 1'b0;
    end else begin
        if (((input_dma_I_V_last_0_ack_out == 1'b1) & (input_dma_I_V_last_0_vld_out == 1'b1))) begin
            input_dma_I_V_last_0_sel_rd <= ~input_dma_I_V_last_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_dma_I_V_last_0_sel_wr <= 1'b0;
    end else begin
        if (((input_dma_I_V_last_0_ack_in == 1'b1) & (input_dma_I_V_last_0_vld_in == 1'b1))) begin
            input_dma_I_V_last_0_sel_wr <= ~input_dma_I_V_last_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_dma_I_V_last_0_state <= 2'd0;
    end else begin
        if ((((input_dma_I_V_last_0_state == 2'd2) & (input_dma_I_V_last_0_vld_in == 1'b0)) | ((input_dma_I_V_last_0_state == 2'd3) & (input_dma_I_V_last_0_vld_in == 1'b0) & (input_dma_I_V_last_0_ack_out == 1'b1)))) begin
            input_dma_I_V_last_0_state <= 2'd2;
        end else if ((((input_dma_I_V_last_0_state == 2'd1) & (input_dma_I_V_last_0_ack_out == 1'b0)) | ((input_dma_I_V_last_0_state == 2'd3) & (input_dma_I_V_last_0_ack_out == 1'b0) & (input_dma_I_V_last_0_vld_in == 1'b1)))) begin
            input_dma_I_V_last_0_state <= 2'd1;
        end else if (((~((input_dma_I_V_last_0_vld_in == 1'b0) & (input_dma_I_V_last_0_ack_out == 1'b1)) & ~((input_dma_I_V_last_0_ack_out == 1'b0) & (input_dma_I_V_last_0_vld_in == 1'b1)) & (input_dma_I_V_last_0_state == 2'd3)) | ((input_dma_I_V_last_0_state == 2'd1) & (input_dma_I_V_last_0_ack_out == 1'b1)) | ((input_dma_I_V_last_0_state == 2'd2) & (input_dma_I_V_last_0_vld_in == 1'b1)))) begin
            input_dma_I_V_last_0_state <= 2'd3;
        end else begin
            input_dma_I_V_last_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_dma_W_V_data_0_sel_rd <= 1'b0;
    end else begin
        if (((input_dma_W_V_data_0_ack_out == 1'b1) & (input_dma_W_V_data_0_vld_out == 1'b1))) begin
            input_dma_W_V_data_0_sel_rd <= ~input_dma_W_V_data_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_dma_W_V_data_0_sel_wr <= 1'b0;
    end else begin
        if (((input_dma_W_V_data_0_ack_in == 1'b1) & (input_dma_W_V_data_0_vld_in == 1'b1))) begin
            input_dma_W_V_data_0_sel_wr <= ~input_dma_W_V_data_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_dma_W_V_data_0_state <= 2'd0;
    end else begin
        if ((((input_dma_W_V_data_0_state == 2'd2) & (input_dma_W_V_data_0_vld_in == 1'b0)) | ((input_dma_W_V_data_0_state == 2'd3) & (input_dma_W_V_data_0_vld_in == 1'b0) & (input_dma_W_V_data_0_ack_out == 1'b1)))) begin
            input_dma_W_V_data_0_state <= 2'd2;
        end else if ((((input_dma_W_V_data_0_state == 2'd1) & (input_dma_W_V_data_0_ack_out == 1'b0)) | ((input_dma_W_V_data_0_state == 2'd3) & (input_dma_W_V_data_0_ack_out == 1'b0) & (input_dma_W_V_data_0_vld_in == 1'b1)))) begin
            input_dma_W_V_data_0_state <= 2'd1;
        end else if (((~((input_dma_W_V_data_0_vld_in == 1'b0) & (input_dma_W_V_data_0_ack_out == 1'b1)) & ~((input_dma_W_V_data_0_ack_out == 1'b0) & (input_dma_W_V_data_0_vld_in == 1'b1)) & (input_dma_W_V_data_0_state == 2'd3)) | ((input_dma_W_V_data_0_state == 2'd1) & (input_dma_W_V_data_0_ack_out == 1'b1)) | ((input_dma_W_V_data_0_state == 2'd2) & (input_dma_W_V_data_0_vld_in == 1'b1)))) begin
            input_dma_W_V_data_0_state <= 2'd3;
        end else begin
            input_dma_W_V_data_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_dma_W_V_last_0_sel_rd <= 1'b0;
    end else begin
        if (((input_dma_W_V_last_0_vld_out == 1'b1) & (input_dma_W_V_last_0_ack_out == 1'b1))) begin
            input_dma_W_V_last_0_sel_rd <= ~input_dma_W_V_last_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_dma_W_V_last_0_sel_wr <= 1'b0;
    end else begin
        if (((input_dma_W_V_last_0_ack_in == 1'b1) & (input_dma_W_V_last_0_vld_in == 1'b1))) begin
            input_dma_W_V_last_0_sel_wr <= ~input_dma_W_V_last_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_dma_W_V_last_0_state <= 2'd0;
    end else begin
        if ((((input_dma_W_V_last_0_state == 2'd2) & (input_dma_W_V_last_0_vld_in == 1'b0)) | ((input_dma_W_V_last_0_state == 2'd3) & (input_dma_W_V_last_0_vld_in == 1'b0) & (input_dma_W_V_last_0_ack_out == 1'b1)))) begin
            input_dma_W_V_last_0_state <= 2'd2;
        end else if ((((input_dma_W_V_last_0_state == 2'd1) & (input_dma_W_V_last_0_ack_out == 1'b0)) | ((input_dma_W_V_last_0_state == 2'd3) & (input_dma_W_V_last_0_ack_out == 1'b0) & (input_dma_W_V_last_0_vld_in == 1'b1)))) begin
            input_dma_W_V_last_0_state <= 2'd1;
        end else if (((~((input_dma_W_V_last_0_vld_in == 1'b0) & (input_dma_W_V_last_0_ack_out == 1'b1)) & ~((input_dma_W_V_last_0_ack_out == 1'b0) & (input_dma_W_V_last_0_vld_in == 1'b1)) & (input_dma_W_V_last_0_state == 2'd3)) | ((input_dma_W_V_last_0_state == 2'd1) & (input_dma_W_V_last_0_ack_out == 1'b1)) | ((input_dma_W_V_last_0_state == 2'd2) & (input_dma_W_V_last_0_vld_in == 1'b1)))) begin
            input_dma_W_V_last_0_state <= 2'd3;
        end else begin
            input_dma_W_V_last_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_dma_O_V_data_1_sel_rd <= 1'b0;
    end else begin
        if (((output_dma_O_V_data_1_ack_out == 1'b1) & (output_dma_O_V_data_1_vld_out == 1'b1))) begin
            output_dma_O_V_data_1_sel_rd <= ~output_dma_O_V_data_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_dma_O_V_data_1_sel_wr <= 1'b0;
    end else begin
        if (((output_dma_O_V_data_1_ack_in == 1'b1) & (output_dma_O_V_data_1_vld_in == 1'b1))) begin
            output_dma_O_V_data_1_sel_wr <= ~output_dma_O_V_data_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_dma_O_V_data_1_state <= 2'd0;
    end else begin
        if ((((output_dma_O_V_data_1_state == 2'd2) & (output_dma_O_V_data_1_vld_in == 1'b0)) | ((output_dma_O_V_data_1_state == 2'd3) & (output_dma_O_V_data_1_vld_in == 1'b0) & (output_dma_O_V_data_1_ack_out == 1'b1)))) begin
            output_dma_O_V_data_1_state <= 2'd2;
        end else if ((((output_dma_O_V_data_1_state == 2'd1) & (output_dma_O_V_data_1_ack_out == 1'b0)) | ((output_dma_O_V_data_1_state == 2'd3) & (output_dma_O_V_data_1_ack_out == 1'b0) & (output_dma_O_V_data_1_vld_in == 1'b1)))) begin
            output_dma_O_V_data_1_state <= 2'd1;
        end else if (((~((output_dma_O_V_data_1_vld_in == 1'b0) & (output_dma_O_V_data_1_ack_out == 1'b1)) & ~((output_dma_O_V_data_1_ack_out == 1'b0) & (output_dma_O_V_data_1_vld_in == 1'b1)) & (output_dma_O_V_data_1_state == 2'd3)) | ((output_dma_O_V_data_1_state == 2'd1) & (output_dma_O_V_data_1_ack_out == 1'b1)) | ((output_dma_O_V_data_1_state == 2'd2) & (output_dma_O_V_data_1_vld_in == 1'b1)))) begin
            output_dma_O_V_data_1_state <= 2'd3;
        end else begin
            output_dma_O_V_data_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_dma_O_V_last_1_sel_rd <= 1'b0;
    end else begin
        if (((output_dma_O_V_last_1_ack_out == 1'b1) & (output_dma_O_V_last_1_vld_out == 1'b1))) begin
            output_dma_O_V_last_1_sel_rd <= ~output_dma_O_V_last_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_dma_O_V_last_1_sel_wr <= 1'b0;
    end else begin
        if (((output_dma_O_V_last_1_ack_in == 1'b1) & (output_dma_O_V_last_1_vld_in == 1'b1))) begin
            output_dma_O_V_last_1_sel_wr <= ~output_dma_O_V_last_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_dma_O_V_last_1_state <= 2'd0;
    end else begin
        if ((((output_dma_O_V_last_1_state == 2'd2) & (output_dma_O_V_last_1_vld_in == 1'b0)) | ((output_dma_O_V_last_1_state == 2'd3) & (output_dma_O_V_last_1_vld_in == 1'b0) & (output_dma_O_V_last_1_ack_out == 1'b1)))) begin
            output_dma_O_V_last_1_state <= 2'd2;
        end else if ((((output_dma_O_V_last_1_state == 2'd1) & (output_dma_O_V_last_1_ack_out == 1'b0)) | ((output_dma_O_V_last_1_state == 2'd3) & (output_dma_O_V_last_1_ack_out == 1'b0) & (output_dma_O_V_last_1_vld_in == 1'b1)))) begin
            output_dma_O_V_last_1_state <= 2'd1;
        end else if (((~((output_dma_O_V_last_1_vld_in == 1'b0) & (output_dma_O_V_last_1_ack_out == 1'b1)) & ~((output_dma_O_V_last_1_ack_out == 1'b0) & (output_dma_O_V_last_1_vld_in == 1'b1)) & (output_dma_O_V_last_1_state == 2'd3)) | ((output_dma_O_V_last_1_state == 2'd1) & (output_dma_O_V_last_1_ack_out == 1'b1)) | ((output_dma_O_V_last_1_state == 2'd2) & (output_dma_O_V_last_1_vld_in == 1'b1)))) begin
            output_dma_O_V_last_1_state <= 2'd3;
        end else begin
            output_dma_O_V_last_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        N_read_reg_762 <= N;
        col_read_reg_767 <= col;
        custom_Tc_read_reg_745 <= custom_Tc;
        custom_Tr_read_reg_751 <= custom_Tr;
        custom_k_read_reg_757 <= custom_k;
        row_read_reg_772 <= row;
    end
end

always @ (posedge ap_clk) begin
    if ((input_dma_B_V_data_V_0_load_A == 1'b1)) begin
        input_dma_B_V_data_V_0_payload_A <= input_dma_B_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((input_dma_B_V_data_V_0_load_B == 1'b1)) begin
        input_dma_B_V_data_V_0_payload_B <= input_dma_B_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((input_dma_B_V_last_0_load_A == 1'b1)) begin
        input_dma_B_V_last_0_payload_A <= input_dma_B_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((input_dma_B_V_last_0_load_B == 1'b1)) begin
        input_dma_B_V_last_0_payload_B <= input_dma_B_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((input_dma_I_V_data_0_load_A == 1'b1)) begin
        input_dma_I_V_data_0_payload_A <= input_dma_I_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((input_dma_I_V_data_0_load_B == 1'b1)) begin
        input_dma_I_V_data_0_payload_B <= input_dma_I_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((input_dma_I_V_last_0_load_A == 1'b1)) begin
        input_dma_I_V_last_0_payload_A <= input_dma_I_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((input_dma_I_V_last_0_load_B == 1'b1)) begin
        input_dma_I_V_last_0_payload_B <= input_dma_I_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((input_dma_W_V_data_0_load_A == 1'b1)) begin
        input_dma_W_V_data_0_payload_A <= input_dma_W_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((input_dma_W_V_data_0_load_B == 1'b1)) begin
        input_dma_W_V_data_0_payload_B <= input_dma_W_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((input_dma_W_V_last_0_load_A == 1'b1)) begin
        input_dma_W_V_last_0_payload_A <= input_dma_W_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((input_dma_W_V_last_0_load_B == 1'b1)) begin
        input_dma_W_V_last_0_payload_B <= input_dma_W_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((output_dma_O_V_data_1_load_A == 1'b1)) begin
        output_dma_O_V_data_1_payload_A <= grp_OFM_STORE_fu_698_output_dma_O_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((output_dma_O_V_data_1_load_B == 1'b1)) begin
        output_dma_O_V_data_1_payload_B <= grp_OFM_STORE_fu_698_output_dma_O_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((output_dma_O_V_last_1_load_A == 1'b1)) begin
        output_dma_O_V_last_1_payload_A <= grp_OFM_STORE_fu_698_output_dma_O_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((output_dma_O_V_last_1_load_B == 1'b1)) begin
        output_dma_O_V_last_1_payload_B <= grp_OFM_STORE_fu_698_output_dma_O_TLAST;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        BIAS_DB_V_ce0 = grp_OFM_STORE_fu_698_BIAS_V_2_ce0;
    end else begin
        BIAS_DB_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        BIAS_DB_V_we0 = grp_OFM_STORE_fu_698_BIAS_V_2_we0;
    end else begin
        BIAS_DB_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BIAS_V_ce0 = grp_OFM_STORE_fu_698_BIAS_V_2_ce0;
    end else begin
        BIAS_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        BIAS_V_we0 = grp_OFM_STORE_fu_698_BIAS_V_2_we0;
    end else begin
        BIAS_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_DB_V_0_address0 = grp_OFM_STORE_fu_698_OFM_0_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_DB_V_0_address0 = grp_Load_Fire_fu_398_OFM_0_V_address0;
    end else begin
        OFM_DB_V_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_DB_V_0_address1 = grp_OFM_STORE_fu_698_OFM_0_V_address1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_DB_V_0_address1 = grp_Load_Fire_fu_398_OFM_0_V_address1;
    end else begin
        OFM_DB_V_0_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_DB_V_0_ce0 = grp_OFM_STORE_fu_698_OFM_0_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_DB_V_0_ce0 = grp_Load_Fire_fu_398_OFM_0_V_ce0;
    end else begin
        OFM_DB_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_DB_V_0_ce1 = grp_OFM_STORE_fu_698_OFM_0_V_ce1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_DB_V_0_ce1 = grp_Load_Fire_fu_398_OFM_0_V_ce1;
    end else begin
        OFM_DB_V_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_DB_V_0_d1 = grp_OFM_STORE_fu_698_OFM_0_V_d1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_DB_V_0_d1 = grp_Load_Fire_fu_398_OFM_0_V_d1;
    end else begin
        OFM_DB_V_0_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_DB_V_0_we1 = grp_OFM_STORE_fu_698_OFM_0_V_we1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_DB_V_0_we1 = grp_Load_Fire_fu_398_OFM_0_V_we1;
    end else begin
        OFM_DB_V_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_DB_V_1_address0 = grp_OFM_STORE_fu_698_OFM_1_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_DB_V_1_address0 = grp_Load_Fire_fu_398_OFM_1_V_address0;
    end else begin
        OFM_DB_V_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_DB_V_1_address1 = grp_OFM_STORE_fu_698_OFM_1_V_address1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_DB_V_1_address1 = grp_Load_Fire_fu_398_OFM_1_V_address1;
    end else begin
        OFM_DB_V_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_DB_V_1_ce0 = grp_OFM_STORE_fu_698_OFM_1_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_DB_V_1_ce0 = grp_Load_Fire_fu_398_OFM_1_V_ce0;
    end else begin
        OFM_DB_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_DB_V_1_ce1 = grp_OFM_STORE_fu_698_OFM_1_V_ce1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_DB_V_1_ce1 = grp_Load_Fire_fu_398_OFM_1_V_ce1;
    end else begin
        OFM_DB_V_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_DB_V_1_d1 = grp_OFM_STORE_fu_698_OFM_1_V_d1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_DB_V_1_d1 = grp_Load_Fire_fu_398_OFM_1_V_d1;
    end else begin
        OFM_DB_V_1_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_DB_V_1_we1 = grp_OFM_STORE_fu_698_OFM_1_V_we1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_DB_V_1_we1 = grp_Load_Fire_fu_398_OFM_1_V_we1;
    end else begin
        OFM_DB_V_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_DB_V_2_address0 = grp_OFM_STORE_fu_698_OFM_2_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_DB_V_2_address0 = grp_Load_Fire_fu_398_OFM_2_V_address0;
    end else begin
        OFM_DB_V_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_DB_V_2_address1 = grp_OFM_STORE_fu_698_OFM_2_V_address1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_DB_V_2_address1 = grp_Load_Fire_fu_398_OFM_2_V_address1;
    end else begin
        OFM_DB_V_2_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_DB_V_2_ce0 = grp_OFM_STORE_fu_698_OFM_2_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_DB_V_2_ce0 = grp_Load_Fire_fu_398_OFM_2_V_ce0;
    end else begin
        OFM_DB_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_DB_V_2_ce1 = grp_OFM_STORE_fu_698_OFM_2_V_ce1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_DB_V_2_ce1 = grp_Load_Fire_fu_398_OFM_2_V_ce1;
    end else begin
        OFM_DB_V_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_DB_V_2_d1 = grp_OFM_STORE_fu_698_OFM_2_V_d1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_DB_V_2_d1 = grp_Load_Fire_fu_398_OFM_2_V_d1;
    end else begin
        OFM_DB_V_2_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_DB_V_2_we1 = grp_OFM_STORE_fu_698_OFM_2_V_we1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_DB_V_2_we1 = grp_Load_Fire_fu_398_OFM_2_V_we1;
    end else begin
        OFM_DB_V_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_DB_V_3_address0 = grp_OFM_STORE_fu_698_OFM_3_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_DB_V_3_address0 = grp_Load_Fire_fu_398_OFM_3_V_address0;
    end else begin
        OFM_DB_V_3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_DB_V_3_address1 = grp_OFM_STORE_fu_698_OFM_3_V_address1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_DB_V_3_address1 = grp_Load_Fire_fu_398_OFM_3_V_address1;
    end else begin
        OFM_DB_V_3_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_DB_V_3_ce0 = grp_OFM_STORE_fu_698_OFM_3_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_DB_V_3_ce0 = grp_Load_Fire_fu_398_OFM_3_V_ce0;
    end else begin
        OFM_DB_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_DB_V_3_ce1 = grp_OFM_STORE_fu_698_OFM_3_V_ce1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_DB_V_3_ce1 = grp_Load_Fire_fu_398_OFM_3_V_ce1;
    end else begin
        OFM_DB_V_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_DB_V_3_d1 = grp_OFM_STORE_fu_698_OFM_3_V_d1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_DB_V_3_d1 = grp_Load_Fire_fu_398_OFM_3_V_d1;
    end else begin
        OFM_DB_V_3_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_DB_V_3_we1 = grp_OFM_STORE_fu_698_OFM_3_V_we1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_DB_V_3_we1 = grp_Load_Fire_fu_398_OFM_3_V_we1;
    end else begin
        OFM_DB_V_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_DB_V_4_address0 = grp_OFM_STORE_fu_698_OFM_4_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_DB_V_4_address0 = grp_Load_Fire_fu_398_OFM_4_V_address0;
    end else begin
        OFM_DB_V_4_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_DB_V_4_address1 = grp_OFM_STORE_fu_698_OFM_4_V_address1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_DB_V_4_address1 = grp_Load_Fire_fu_398_OFM_4_V_address1;
    end else begin
        OFM_DB_V_4_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_DB_V_4_ce0 = grp_OFM_STORE_fu_698_OFM_4_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_DB_V_4_ce0 = grp_Load_Fire_fu_398_OFM_4_V_ce0;
    end else begin
        OFM_DB_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_DB_V_4_ce1 = grp_OFM_STORE_fu_698_OFM_4_V_ce1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_DB_V_4_ce1 = grp_Load_Fire_fu_398_OFM_4_V_ce1;
    end else begin
        OFM_DB_V_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_DB_V_4_d1 = grp_OFM_STORE_fu_698_OFM_4_V_d1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_DB_V_4_d1 = grp_Load_Fire_fu_398_OFM_4_V_d1;
    end else begin
        OFM_DB_V_4_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_DB_V_4_we1 = grp_OFM_STORE_fu_698_OFM_4_V_we1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_DB_V_4_we1 = grp_Load_Fire_fu_398_OFM_4_V_we1;
    end else begin
        OFM_DB_V_4_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_DB_V_5_address0 = grp_OFM_STORE_fu_698_OFM_5_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_DB_V_5_address0 = grp_Load_Fire_fu_398_OFM_5_V_address0;
    end else begin
        OFM_DB_V_5_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_DB_V_5_address1 = grp_OFM_STORE_fu_698_OFM_5_V_address1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_DB_V_5_address1 = grp_Load_Fire_fu_398_OFM_5_V_address1;
    end else begin
        OFM_DB_V_5_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_DB_V_5_ce0 = grp_OFM_STORE_fu_698_OFM_5_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_DB_V_5_ce0 = grp_Load_Fire_fu_398_OFM_5_V_ce0;
    end else begin
        OFM_DB_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_DB_V_5_ce1 = grp_OFM_STORE_fu_698_OFM_5_V_ce1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_DB_V_5_ce1 = grp_Load_Fire_fu_398_OFM_5_V_ce1;
    end else begin
        OFM_DB_V_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_DB_V_5_d1 = grp_OFM_STORE_fu_698_OFM_5_V_d1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_DB_V_5_d1 = grp_Load_Fire_fu_398_OFM_5_V_d1;
    end else begin
        OFM_DB_V_5_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_DB_V_5_we1 = grp_OFM_STORE_fu_698_OFM_5_V_we1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_DB_V_5_we1 = grp_Load_Fire_fu_398_OFM_5_V_we1;
    end else begin
        OFM_DB_V_5_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_DB_V_6_address0 = grp_OFM_STORE_fu_698_OFM_6_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_DB_V_6_address0 = grp_Load_Fire_fu_398_OFM_6_V_address0;
    end else begin
        OFM_DB_V_6_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_DB_V_6_address1 = grp_OFM_STORE_fu_698_OFM_6_V_address1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_DB_V_6_address1 = grp_Load_Fire_fu_398_OFM_6_V_address1;
    end else begin
        OFM_DB_V_6_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_DB_V_6_ce0 = grp_OFM_STORE_fu_698_OFM_6_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_DB_V_6_ce0 = grp_Load_Fire_fu_398_OFM_6_V_ce0;
    end else begin
        OFM_DB_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_DB_V_6_ce1 = grp_OFM_STORE_fu_698_OFM_6_V_ce1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_DB_V_6_ce1 = grp_Load_Fire_fu_398_OFM_6_V_ce1;
    end else begin
        OFM_DB_V_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_DB_V_6_d1 = grp_OFM_STORE_fu_698_OFM_6_V_d1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_DB_V_6_d1 = grp_Load_Fire_fu_398_OFM_6_V_d1;
    end else begin
        OFM_DB_V_6_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_DB_V_6_we1 = grp_OFM_STORE_fu_698_OFM_6_V_we1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_DB_V_6_we1 = grp_Load_Fire_fu_398_OFM_6_V_we1;
    end else begin
        OFM_DB_V_6_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_DB_V_7_address0 = grp_OFM_STORE_fu_698_OFM_7_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_DB_V_7_address0 = grp_Load_Fire_fu_398_OFM_7_V_address0;
    end else begin
        OFM_DB_V_7_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_DB_V_7_address1 = grp_OFM_STORE_fu_698_OFM_7_V_address1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_DB_V_7_address1 = grp_Load_Fire_fu_398_OFM_7_V_address1;
    end else begin
        OFM_DB_V_7_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_DB_V_7_ce0 = grp_OFM_STORE_fu_698_OFM_7_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_DB_V_7_ce0 = grp_Load_Fire_fu_398_OFM_7_V_ce0;
    end else begin
        OFM_DB_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_DB_V_7_ce1 = grp_OFM_STORE_fu_698_OFM_7_V_ce1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_DB_V_7_ce1 = grp_Load_Fire_fu_398_OFM_7_V_ce1;
    end else begin
        OFM_DB_V_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_DB_V_7_d1 = grp_OFM_STORE_fu_698_OFM_7_V_d1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_DB_V_7_d1 = grp_Load_Fire_fu_398_OFM_7_V_d1;
    end else begin
        OFM_DB_V_7_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_DB_V_7_we1 = grp_OFM_STORE_fu_698_OFM_7_V_we1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_DB_V_7_we1 = grp_Load_Fire_fu_398_OFM_7_V_we1;
    end else begin
        OFM_DB_V_7_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_V_0_address0 = grp_OFM_STORE_fu_698_OFM_0_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_V_0_address0 = grp_Load_Fire_fu_398_OFM_0_V_address0;
    end else begin
        OFM_V_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_V_0_address1 = grp_OFM_STORE_fu_698_OFM_0_V_address1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_V_0_address1 = grp_Load_Fire_fu_398_OFM_0_V_address1;
    end else begin
        OFM_V_0_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_V_0_ce0 = grp_OFM_STORE_fu_698_OFM_0_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_V_0_ce0 = grp_Load_Fire_fu_398_OFM_0_V_ce0;
    end else begin
        OFM_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_V_0_ce1 = grp_OFM_STORE_fu_698_OFM_0_V_ce1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_V_0_ce1 = grp_Load_Fire_fu_398_OFM_0_V_ce1;
    end else begin
        OFM_V_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_V_0_d1 = grp_OFM_STORE_fu_698_OFM_0_V_d1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_V_0_d1 = grp_Load_Fire_fu_398_OFM_0_V_d1;
    end else begin
        OFM_V_0_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_V_0_we1 = grp_OFM_STORE_fu_698_OFM_0_V_we1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_V_0_we1 = grp_Load_Fire_fu_398_OFM_0_V_we1;
    end else begin
        OFM_V_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_V_1_address0 = grp_OFM_STORE_fu_698_OFM_1_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_V_1_address0 = grp_Load_Fire_fu_398_OFM_1_V_address0;
    end else begin
        OFM_V_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_V_1_address1 = grp_OFM_STORE_fu_698_OFM_1_V_address1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_V_1_address1 = grp_Load_Fire_fu_398_OFM_1_V_address1;
    end else begin
        OFM_V_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_V_1_ce0 = grp_OFM_STORE_fu_698_OFM_1_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_V_1_ce0 = grp_Load_Fire_fu_398_OFM_1_V_ce0;
    end else begin
        OFM_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_V_1_ce1 = grp_OFM_STORE_fu_698_OFM_1_V_ce1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_V_1_ce1 = grp_Load_Fire_fu_398_OFM_1_V_ce1;
    end else begin
        OFM_V_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_V_1_d1 = grp_OFM_STORE_fu_698_OFM_1_V_d1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_V_1_d1 = grp_Load_Fire_fu_398_OFM_1_V_d1;
    end else begin
        OFM_V_1_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_V_1_we1 = grp_OFM_STORE_fu_698_OFM_1_V_we1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_V_1_we1 = grp_Load_Fire_fu_398_OFM_1_V_we1;
    end else begin
        OFM_V_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_V_2_address0 = grp_OFM_STORE_fu_698_OFM_2_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_V_2_address0 = grp_Load_Fire_fu_398_OFM_2_V_address0;
    end else begin
        OFM_V_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_V_2_address1 = grp_OFM_STORE_fu_698_OFM_2_V_address1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_V_2_address1 = grp_Load_Fire_fu_398_OFM_2_V_address1;
    end else begin
        OFM_V_2_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_V_2_ce0 = grp_OFM_STORE_fu_698_OFM_2_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_V_2_ce0 = grp_Load_Fire_fu_398_OFM_2_V_ce0;
    end else begin
        OFM_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_V_2_ce1 = grp_OFM_STORE_fu_698_OFM_2_V_ce1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_V_2_ce1 = grp_Load_Fire_fu_398_OFM_2_V_ce1;
    end else begin
        OFM_V_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_V_2_d1 = grp_OFM_STORE_fu_698_OFM_2_V_d1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_V_2_d1 = grp_Load_Fire_fu_398_OFM_2_V_d1;
    end else begin
        OFM_V_2_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_V_2_we1 = grp_OFM_STORE_fu_698_OFM_2_V_we1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_V_2_we1 = grp_Load_Fire_fu_398_OFM_2_V_we1;
    end else begin
        OFM_V_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_V_3_address0 = grp_OFM_STORE_fu_698_OFM_3_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_V_3_address0 = grp_Load_Fire_fu_398_OFM_3_V_address0;
    end else begin
        OFM_V_3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_V_3_address1 = grp_OFM_STORE_fu_698_OFM_3_V_address1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_V_3_address1 = grp_Load_Fire_fu_398_OFM_3_V_address1;
    end else begin
        OFM_V_3_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_V_3_ce0 = grp_OFM_STORE_fu_698_OFM_3_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_V_3_ce0 = grp_Load_Fire_fu_398_OFM_3_V_ce0;
    end else begin
        OFM_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_V_3_ce1 = grp_OFM_STORE_fu_698_OFM_3_V_ce1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_V_3_ce1 = grp_Load_Fire_fu_398_OFM_3_V_ce1;
    end else begin
        OFM_V_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_V_3_d1 = grp_OFM_STORE_fu_698_OFM_3_V_d1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_V_3_d1 = grp_Load_Fire_fu_398_OFM_3_V_d1;
    end else begin
        OFM_V_3_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_V_3_we1 = grp_OFM_STORE_fu_698_OFM_3_V_we1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_V_3_we1 = grp_Load_Fire_fu_398_OFM_3_V_we1;
    end else begin
        OFM_V_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_V_4_address0 = grp_OFM_STORE_fu_698_OFM_4_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_V_4_address0 = grp_Load_Fire_fu_398_OFM_4_V_address0;
    end else begin
        OFM_V_4_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_V_4_address1 = grp_OFM_STORE_fu_698_OFM_4_V_address1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_V_4_address1 = grp_Load_Fire_fu_398_OFM_4_V_address1;
    end else begin
        OFM_V_4_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_V_4_ce0 = grp_OFM_STORE_fu_698_OFM_4_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_V_4_ce0 = grp_Load_Fire_fu_398_OFM_4_V_ce0;
    end else begin
        OFM_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_V_4_ce1 = grp_OFM_STORE_fu_698_OFM_4_V_ce1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_V_4_ce1 = grp_Load_Fire_fu_398_OFM_4_V_ce1;
    end else begin
        OFM_V_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_V_4_d1 = grp_OFM_STORE_fu_698_OFM_4_V_d1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_V_4_d1 = grp_Load_Fire_fu_398_OFM_4_V_d1;
    end else begin
        OFM_V_4_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_V_4_we1 = grp_OFM_STORE_fu_698_OFM_4_V_we1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_V_4_we1 = grp_Load_Fire_fu_398_OFM_4_V_we1;
    end else begin
        OFM_V_4_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_V_5_address0 = grp_OFM_STORE_fu_698_OFM_5_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_V_5_address0 = grp_Load_Fire_fu_398_OFM_5_V_address0;
    end else begin
        OFM_V_5_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_V_5_address1 = grp_OFM_STORE_fu_698_OFM_5_V_address1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_V_5_address1 = grp_Load_Fire_fu_398_OFM_5_V_address1;
    end else begin
        OFM_V_5_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_V_5_ce0 = grp_OFM_STORE_fu_698_OFM_5_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_V_5_ce0 = grp_Load_Fire_fu_398_OFM_5_V_ce0;
    end else begin
        OFM_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_V_5_ce1 = grp_OFM_STORE_fu_698_OFM_5_V_ce1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_V_5_ce1 = grp_Load_Fire_fu_398_OFM_5_V_ce1;
    end else begin
        OFM_V_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_V_5_d1 = grp_OFM_STORE_fu_698_OFM_5_V_d1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_V_5_d1 = grp_Load_Fire_fu_398_OFM_5_V_d1;
    end else begin
        OFM_V_5_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_V_5_we1 = grp_OFM_STORE_fu_698_OFM_5_V_we1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_V_5_we1 = grp_Load_Fire_fu_398_OFM_5_V_we1;
    end else begin
        OFM_V_5_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_V_6_address0 = grp_OFM_STORE_fu_698_OFM_6_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_V_6_address0 = grp_Load_Fire_fu_398_OFM_6_V_address0;
    end else begin
        OFM_V_6_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_V_6_address1 = grp_OFM_STORE_fu_698_OFM_6_V_address1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_V_6_address1 = grp_Load_Fire_fu_398_OFM_6_V_address1;
    end else begin
        OFM_V_6_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_V_6_ce0 = grp_OFM_STORE_fu_698_OFM_6_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_V_6_ce0 = grp_Load_Fire_fu_398_OFM_6_V_ce0;
    end else begin
        OFM_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_V_6_ce1 = grp_OFM_STORE_fu_698_OFM_6_V_ce1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_V_6_ce1 = grp_Load_Fire_fu_398_OFM_6_V_ce1;
    end else begin
        OFM_V_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_V_6_d1 = grp_OFM_STORE_fu_698_OFM_6_V_d1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_V_6_d1 = grp_Load_Fire_fu_398_OFM_6_V_d1;
    end else begin
        OFM_V_6_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_V_6_we1 = grp_OFM_STORE_fu_698_OFM_6_V_we1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_V_6_we1 = grp_Load_Fire_fu_398_OFM_6_V_we1;
    end else begin
        OFM_V_6_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_V_7_address0 = grp_OFM_STORE_fu_698_OFM_7_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_V_7_address0 = grp_Load_Fire_fu_398_OFM_7_V_address0;
    end else begin
        OFM_V_7_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_V_7_address1 = grp_OFM_STORE_fu_698_OFM_7_V_address1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_V_7_address1 = grp_Load_Fire_fu_398_OFM_7_V_address1;
    end else begin
        OFM_V_7_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_V_7_ce0 = grp_OFM_STORE_fu_698_OFM_7_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_V_7_ce0 = grp_Load_Fire_fu_398_OFM_7_V_ce0;
    end else begin
        OFM_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_V_7_ce1 = grp_OFM_STORE_fu_698_OFM_7_V_ce1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_V_7_ce1 = grp_Load_Fire_fu_398_OFM_7_V_ce1;
    end else begin
        OFM_V_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_V_7_d1 = grp_OFM_STORE_fu_698_OFM_7_V_d1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_V_7_d1 = grp_Load_Fire_fu_398_OFM_7_V_d1;
    end else begin
        OFM_V_7_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        OFM_V_7_we1 = grp_OFM_STORE_fu_698_OFM_7_V_we1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        OFM_V_7_we1 = grp_Load_Fire_fu_398_OFM_7_V_we1;
    end else begin
        OFM_V_7_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((output_dma_O_V_last_1_ack_in == 1'b0) | (output_dma_O_V_data_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((output_dma_O_V_last_1_ack_in == 1'b0) | (output_dma_O_V_data_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_Load_Fire_fu_398_OFM_0_V_q0 = OFM_DB_V_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_Load_Fire_fu_398_OFM_0_V_q0 = OFM_V_0_q0;
    end else begin
        grp_Load_Fire_fu_398_OFM_0_V_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_Load_Fire_fu_398_OFM_1_V_q0 = OFM_DB_V_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_Load_Fire_fu_398_OFM_1_V_q0 = OFM_V_1_q0;
    end else begin
        grp_Load_Fire_fu_398_OFM_1_V_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_Load_Fire_fu_398_OFM_2_V_q0 = OFM_DB_V_2_q0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_Load_Fire_fu_398_OFM_2_V_q0 = OFM_V_2_q0;
    end else begin
        grp_Load_Fire_fu_398_OFM_2_V_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_Load_Fire_fu_398_OFM_3_V_q0 = OFM_DB_V_3_q0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_Load_Fire_fu_398_OFM_3_V_q0 = OFM_V_3_q0;
    end else begin
        grp_Load_Fire_fu_398_OFM_3_V_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_Load_Fire_fu_398_OFM_4_V_q0 = OFM_DB_V_4_q0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_Load_Fire_fu_398_OFM_4_V_q0 = OFM_V_4_q0;
    end else begin
        grp_Load_Fire_fu_398_OFM_4_V_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_Load_Fire_fu_398_OFM_5_V_q0 = OFM_DB_V_5_q0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_Load_Fire_fu_398_OFM_5_V_q0 = OFM_V_5_q0;
    end else begin
        grp_Load_Fire_fu_398_OFM_5_V_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_Load_Fire_fu_398_OFM_6_V_q0 = OFM_DB_V_6_q0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_Load_Fire_fu_398_OFM_6_V_q0 = OFM_V_6_q0;
    end else begin
        grp_Load_Fire_fu_398_OFM_6_V_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_Load_Fire_fu_398_OFM_7_V_q0 = OFM_DB_V_7_q0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_Load_Fire_fu_398_OFM_7_V_q0 = OFM_V_7_q0;
    end else begin
        grp_Load_Fire_fu_398_OFM_7_V_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_OFM_STORE_fu_698_BIAS_V_2_q0 = BIAS_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_OFM_STORE_fu_698_BIAS_V_2_q0 = BIAS_DB_V_q0;
    end else begin
        grp_OFM_STORE_fu_698_BIAS_V_2_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_OFM_STORE_fu_698_OFM_0_V_q0 = OFM_V_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_OFM_STORE_fu_698_OFM_0_V_q0 = OFM_DB_V_0_q0;
    end else begin
        grp_OFM_STORE_fu_698_OFM_0_V_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_OFM_STORE_fu_698_OFM_1_V_q0 = OFM_V_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_OFM_STORE_fu_698_OFM_1_V_q0 = OFM_DB_V_1_q0;
    end else begin
        grp_OFM_STORE_fu_698_OFM_1_V_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_OFM_STORE_fu_698_OFM_2_V_q0 = OFM_V_2_q0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_OFM_STORE_fu_698_OFM_2_V_q0 = OFM_DB_V_2_q0;
    end else begin
        grp_OFM_STORE_fu_698_OFM_2_V_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_OFM_STORE_fu_698_OFM_3_V_q0 = OFM_V_3_q0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_OFM_STORE_fu_698_OFM_3_V_q0 = OFM_DB_V_3_q0;
    end else begin
        grp_OFM_STORE_fu_698_OFM_3_V_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_OFM_STORE_fu_698_OFM_4_V_q0 = OFM_V_4_q0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_OFM_STORE_fu_698_OFM_4_V_q0 = OFM_DB_V_4_q0;
    end else begin
        grp_OFM_STORE_fu_698_OFM_4_V_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_OFM_STORE_fu_698_OFM_5_V_q0 = OFM_V_5_q0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_OFM_STORE_fu_698_OFM_5_V_q0 = OFM_DB_V_5_q0;
    end else begin
        grp_OFM_STORE_fu_698_OFM_5_V_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_OFM_STORE_fu_698_OFM_6_V_q0 = OFM_V_6_q0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_OFM_STORE_fu_698_OFM_6_V_q0 = OFM_DB_V_6_q0;
    end else begin
        grp_OFM_STORE_fu_698_OFM_6_V_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_OFM_STORE_fu_698_OFM_7_V_q0 = OFM_V_7_q0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_OFM_STORE_fu_698_OFM_7_V_q0 = OFM_DB_V_7_q0;
    end else begin
        grp_OFM_STORE_fu_698_OFM_7_V_q0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        input_dma_B_V_data_V_0_ack_out = grp_OFM_STORE_fu_698_input_dma_B_TREADY;
    end else begin
        input_dma_B_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((input_dma_B_V_data_V_0_sel == 1'b1)) begin
        input_dma_B_V_data_V_0_data_out = input_dma_B_V_data_V_0_payload_B;
    end else begin
        input_dma_B_V_data_V_0_data_out = input_dma_B_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        input_dma_B_V_last_0_ack_out = grp_OFM_STORE_fu_698_input_dma_B_TREADY;
    end else begin
        input_dma_B_V_last_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((input_dma_B_V_last_0_sel == 1'b1)) begin
        input_dma_B_V_last_0_data_out = input_dma_B_V_last_0_payload_B;
    end else begin
        input_dma_B_V_last_0_data_out = input_dma_B_V_last_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        input_dma_I_V_data_0_ack_out = grp_Load_Fire_fu_398_input_dma_I_TREADY;
    end else begin
        input_dma_I_V_data_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((input_dma_I_V_data_0_sel == 1'b1)) begin
        input_dma_I_V_data_0_data_out = input_dma_I_V_data_0_payload_B;
    end else begin
        input_dma_I_V_data_0_data_out = input_dma_I_V_data_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        input_dma_I_V_last_0_ack_out = grp_Load_Fire_fu_398_input_dma_I_TREADY;
    end else begin
        input_dma_I_V_last_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((input_dma_I_V_last_0_sel == 1'b1)) begin
        input_dma_I_V_last_0_data_out = input_dma_I_V_last_0_payload_B;
    end else begin
        input_dma_I_V_last_0_data_out = input_dma_I_V_last_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        input_dma_W_V_data_0_ack_out = grp_Load_Fire_fu_398_input_dma_W_TREADY;
    end else begin
        input_dma_W_V_data_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((input_dma_W_V_data_0_sel == 1'b1)) begin
        input_dma_W_V_data_0_data_out = input_dma_W_V_data_0_payload_B;
    end else begin
        input_dma_W_V_data_0_data_out = input_dma_W_V_data_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        input_dma_W_V_last_0_ack_out = grp_Load_Fire_fu_398_input_dma_W_TREADY;
    end else begin
        input_dma_W_V_last_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((input_dma_W_V_last_0_sel == 1'b1)) begin
        input_dma_W_V_last_0_data_out = input_dma_W_V_last_0_payload_B;
    end else begin
        input_dma_W_V_last_0_data_out = input_dma_W_V_last_0_payload_A;
    end
end

always @ (*) begin
    if ((output_dma_O_V_data_1_sel == 1'b1)) begin
        output_dma_O_V_data_1_data_out = output_dma_O_V_data_1_payload_B;
    end else begin
        output_dma_O_V_data_1_data_out = output_dma_O_V_data_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        output_dma_O_V_data_1_vld_in = grp_OFM_STORE_fu_698_output_dma_O_TVALID;
    end else begin
        output_dma_O_V_data_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((output_dma_O_V_last_1_sel == 1'b1)) begin
        output_dma_O_V_last_1_data_out = output_dma_O_V_last_1_payload_B;
    end else begin
        output_dma_O_V_last_1_data_out = output_dma_O_V_last_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        output_dma_O_V_last_1_vld_in = grp_OFM_STORE_fu_698_output_dma_O_TVALID;
    end else begin
        output_dma_O_V_last_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((tmp_fu_741_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if (((tmp_fu_741_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((output_dma_O_V_last_1_ack_in == 1'b0) | (output_dma_O_V_data_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state2_on_subcall_done = ((grp_OFM_STORE_fu_698_ap_done == 1'b0) | (grp_Load_Fire_fu_398_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state3_on_subcall_done = ((grp_OFM_STORE_fu_698_ap_done == 1'b0) | (grp_Load_Fire_fu_398_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state4 = ((output_dma_O_V_last_1_ack_in == 1'b0) | (output_dma_O_V_data_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_Load_Fire_fu_398_ap_start = grp_Load_Fire_fu_398_ap_start_reg;

assign grp_Load_Fire_fu_398_input_dma_I_TVALID = input_dma_I_V_last_0_state[1'd0];

assign grp_Load_Fire_fu_398_input_dma_W_TVALID = input_dma_W_V_last_0_state[1'd0];

assign grp_OFM_STORE_fu_698_ap_start = grp_OFM_STORE_fu_698_ap_start_reg;

assign grp_OFM_STORE_fu_698_input_dma_B_TVALID = input_dma_B_V_last_0_state[1'd0];

assign grp_OFM_STORE_fu_698_output_dma_O_TREADY = output_dma_O_V_last_1_state[1'd1];

assign input_dma_B_TREADY = input_dma_B_V_last_0_state[1'd1];

assign input_dma_B_V_data_V_0_ack_in = input_dma_B_V_data_V_0_state[1'd1];

assign input_dma_B_V_data_V_0_load_A = (input_dma_B_V_data_V_0_state_cmp_full & ~input_dma_B_V_data_V_0_sel_wr);

assign input_dma_B_V_data_V_0_load_B = (input_dma_B_V_data_V_0_state_cmp_full & input_dma_B_V_data_V_0_sel_wr);

assign input_dma_B_V_data_V_0_sel = input_dma_B_V_data_V_0_sel_rd;

assign input_dma_B_V_data_V_0_state_cmp_full = ((input_dma_B_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_dma_B_V_data_V_0_vld_in = input_dma_B_TVALID;

assign input_dma_B_V_data_V_0_vld_out = input_dma_B_V_data_V_0_state[1'd0];

assign input_dma_B_V_last_0_ack_in = input_dma_B_V_last_0_state[1'd1];

assign input_dma_B_V_last_0_load_A = (input_dma_B_V_last_0_state_cmp_full & ~input_dma_B_V_last_0_sel_wr);

assign input_dma_B_V_last_0_load_B = (input_dma_B_V_last_0_state_cmp_full & input_dma_B_V_last_0_sel_wr);

assign input_dma_B_V_last_0_sel = input_dma_B_V_last_0_sel_rd;

assign input_dma_B_V_last_0_state_cmp_full = ((input_dma_B_V_last_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_dma_B_V_last_0_vld_in = input_dma_B_TVALID;

assign input_dma_B_V_last_0_vld_out = input_dma_B_V_last_0_state[1'd0];

assign input_dma_I_TREADY = input_dma_I_V_last_0_state[1'd1];

assign input_dma_I_V_data_0_ack_in = input_dma_I_V_data_0_state[1'd1];

assign input_dma_I_V_data_0_load_A = (input_dma_I_V_data_0_state_cmp_full & ~input_dma_I_V_data_0_sel_wr);

assign input_dma_I_V_data_0_load_B = (input_dma_I_V_data_0_state_cmp_full & input_dma_I_V_data_0_sel_wr);

assign input_dma_I_V_data_0_sel = input_dma_I_V_data_0_sel_rd;

assign input_dma_I_V_data_0_state_cmp_full = ((input_dma_I_V_data_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_dma_I_V_data_0_vld_in = input_dma_I_TVALID;

assign input_dma_I_V_data_0_vld_out = input_dma_I_V_data_0_state[1'd0];

assign input_dma_I_V_last_0_ack_in = input_dma_I_V_last_0_state[1'd1];

assign input_dma_I_V_last_0_load_A = (input_dma_I_V_last_0_state_cmp_full & ~input_dma_I_V_last_0_sel_wr);

assign input_dma_I_V_last_0_load_B = (input_dma_I_V_last_0_state_cmp_full & input_dma_I_V_last_0_sel_wr);

assign input_dma_I_V_last_0_sel = input_dma_I_V_last_0_sel_rd;

assign input_dma_I_V_last_0_state_cmp_full = ((input_dma_I_V_last_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_dma_I_V_last_0_vld_in = input_dma_I_TVALID;

assign input_dma_I_V_last_0_vld_out = input_dma_I_V_last_0_state[1'd0];

assign input_dma_W_TREADY = input_dma_W_V_last_0_state[1'd1];

assign input_dma_W_V_data_0_ack_in = input_dma_W_V_data_0_state[1'd1];

assign input_dma_W_V_data_0_load_A = (input_dma_W_V_data_0_state_cmp_full & ~input_dma_W_V_data_0_sel_wr);

assign input_dma_W_V_data_0_load_B = (input_dma_W_V_data_0_state_cmp_full & input_dma_W_V_data_0_sel_wr);

assign input_dma_W_V_data_0_sel = input_dma_W_V_data_0_sel_rd;

assign input_dma_W_V_data_0_state_cmp_full = ((input_dma_W_V_data_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_dma_W_V_data_0_vld_in = input_dma_W_TVALID;

assign input_dma_W_V_data_0_vld_out = input_dma_W_V_data_0_state[1'd0];

assign input_dma_W_V_last_0_ack_in = input_dma_W_V_last_0_state[1'd1];

assign input_dma_W_V_last_0_load_A = (input_dma_W_V_last_0_state_cmp_full & ~input_dma_W_V_last_0_sel_wr);

assign input_dma_W_V_last_0_load_B = (input_dma_W_V_last_0_state_cmp_full & input_dma_W_V_last_0_sel_wr);

assign input_dma_W_V_last_0_sel = input_dma_W_V_last_0_sel_rd;

assign input_dma_W_V_last_0_state_cmp_full = ((input_dma_W_V_last_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_dma_W_V_last_0_vld_in = input_dma_W_TVALID;

assign input_dma_W_V_last_0_vld_out = input_dma_W_V_last_0_state[1'd0];

assign output_dma_O_TDATA = output_dma_O_V_data_1_data_out;

assign output_dma_O_TLAST = output_dma_O_V_last_1_data_out;

assign output_dma_O_TVALID = output_dma_O_V_last_1_state[1'd0];

assign output_dma_O_V_data_1_ack_in = output_dma_O_V_data_1_state[1'd1];

assign output_dma_O_V_data_1_ack_out = output_dma_O_TREADY;

assign output_dma_O_V_data_1_load_A = (output_dma_O_V_data_1_state_cmp_full & ~output_dma_O_V_data_1_sel_wr);

assign output_dma_O_V_data_1_load_B = (output_dma_O_V_data_1_state_cmp_full & output_dma_O_V_data_1_sel_wr);

assign output_dma_O_V_data_1_sel = output_dma_O_V_data_1_sel_rd;

assign output_dma_O_V_data_1_state_cmp_full = ((output_dma_O_V_data_1_state != 2'd1) ? 1'b1 : 1'b0);

assign output_dma_O_V_data_1_vld_out = output_dma_O_V_data_1_state[1'd0];

assign output_dma_O_V_last_1_ack_in = output_dma_O_V_last_1_state[1'd1];

assign output_dma_O_V_last_1_ack_out = output_dma_O_TREADY;

assign output_dma_O_V_last_1_load_A = (output_dma_O_V_last_1_state_cmp_full & ~output_dma_O_V_last_1_sel_wr);

assign output_dma_O_V_last_1_load_B = (output_dma_O_V_last_1_state_cmp_full & output_dma_O_V_last_1_sel_wr);

assign output_dma_O_V_last_1_sel = output_dma_O_V_last_1_sel_rd;

assign output_dma_O_V_last_1_state_cmp_full = ((output_dma_O_V_last_1_state != 2'd1) ? 1'b1 : 1'b0);

assign output_dma_O_V_last_1_vld_out = output_dma_O_V_last_1_state[1'd0];

assign tmp_fu_741_p1 = num[0:0];

endmodule //top
