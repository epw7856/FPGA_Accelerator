-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity OFM_STORE is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_dma_O_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    output_dma_O_TVALID : OUT STD_LOGIC;
    output_dma_O_TREADY : IN STD_LOGIC;
    output_dma_O_TLAST : OUT STD_LOGIC;
    input_dma_B_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input_dma_B_TVALID : IN STD_LOGIC;
    input_dma_B_TREADY : OUT STD_LOGIC;
    input_dma_B_TLAST : IN STD_LOGIC;
    OFM_0_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OFM_0_V_ce0 : OUT STD_LOGIC;
    OFM_0_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    OFM_0_V_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OFM_0_V_ce1 : OUT STD_LOGIC;
    OFM_0_V_we1 : OUT STD_LOGIC;
    OFM_0_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OFM_1_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OFM_1_V_ce0 : OUT STD_LOGIC;
    OFM_1_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    OFM_1_V_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OFM_1_V_ce1 : OUT STD_LOGIC;
    OFM_1_V_we1 : OUT STD_LOGIC;
    OFM_1_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OFM_2_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OFM_2_V_ce0 : OUT STD_LOGIC;
    OFM_2_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    OFM_2_V_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OFM_2_V_ce1 : OUT STD_LOGIC;
    OFM_2_V_we1 : OUT STD_LOGIC;
    OFM_2_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OFM_3_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OFM_3_V_ce0 : OUT STD_LOGIC;
    OFM_3_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    OFM_3_V_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OFM_3_V_ce1 : OUT STD_LOGIC;
    OFM_3_V_we1 : OUT STD_LOGIC;
    OFM_3_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OFM_4_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OFM_4_V_ce0 : OUT STD_LOGIC;
    OFM_4_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    OFM_4_V_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OFM_4_V_ce1 : OUT STD_LOGIC;
    OFM_4_V_we1 : OUT STD_LOGIC;
    OFM_4_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OFM_5_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OFM_5_V_ce0 : OUT STD_LOGIC;
    OFM_5_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    OFM_5_V_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OFM_5_V_ce1 : OUT STD_LOGIC;
    OFM_5_V_we1 : OUT STD_LOGIC;
    OFM_5_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OFM_6_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OFM_6_V_ce0 : OUT STD_LOGIC;
    OFM_6_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    OFM_6_V_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OFM_6_V_ce1 : OUT STD_LOGIC;
    OFM_6_V_we1 : OUT STD_LOGIC;
    OFM_6_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OFM_7_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OFM_7_V_ce0 : OUT STD_LOGIC;
    OFM_7_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    OFM_7_V_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OFM_7_V_ce1 : OUT STD_LOGIC;
    OFM_7_V_we1 : OUT STD_LOGIC;
    OFM_7_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    BIAS_V_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    BIAS_V_2_ce0 : OUT STD_LOGIC;
    BIAS_V_2_we0 : OUT STD_LOGIC;
    BIAS_V_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    BIAS_V_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    custom_Tr : IN STD_LOGIC_VECTOR (31 downto 0);
    custom_Tc : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of OFM_STORE is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv66_0 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv66_1 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_7FFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "01111111111111111111111111111111";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv9_D : STD_LOGIC_VECTOR (8 downto 0) := "000001101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal output_dma_O_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal exitcond_flatten1_reg_1182 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_dma_B_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond1_fu_497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten1_reg_392 : STD_LOGIC_VECTOR (65 downto 0);
    signal i1_reg_403 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_reg_414 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_reg_425 : STD_LOGIC_VECTOR (30 downto 0);
    signal k_reg_436 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_1_fu_503_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal tmp_fu_519_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_1150 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_s_fu_524_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_1156 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_535_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_reg_1161 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_541_p3 : STD_LOGIC_VECTOR (65 downto 0);
    signal tmp_3_reg_1167 : STD_LOGIC_VECTOR (65 downto 0);
    signal notrhs_mid_fu_549_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs_mid_reg_1172 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_mid_fu_555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_mid_reg_1177 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten1_fu_578_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state4_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp1_stage0_iter1 : BOOLEAN;
    signal ap_sig_ioackin_output_dma_O_TREADY : STD_LOGIC;
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal indvar_flatten_next2_fu_583_p2 : STD_LOGIC_VECTOR (65 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal tmp_4_mid2_v_fu_616_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_mid2_v_reg_1191 : STD_LOGIC_VECTOR (2 downto 0);
    signal sel_tmp_mid2_fu_661_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_mid2_reg_1196 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_mid2_fu_675_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_mid2_reg_1201 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_mid2_fu_695_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_mid2_reg_1206 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_mid2_fu_776_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_last_fu_795_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_reg_1216 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_2_fu_816_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvar_flatten_next_fu_828_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvar_flatten_next1_fu_1056_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_7_mid2_v_fu_1076_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal exitcond_flatten2_fu_1051_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_1_fu_1103_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state4 : STD_LOGIC;
    signal i_reg_381 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_i1_phi_fu_407_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_p_Val2_s_phi_fu_450_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter1_p_Val2_s_reg_447 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten2_reg_464 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal j2_reg_475 : STD_LOGIC_VECTOR (30 downto 0);
    signal k3_reg_486 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_2_fu_514_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_cast_fu_805_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_mid2_fu_624_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_cast_fu_1092_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal ap_reg_ioackin_output_dma_O_TREADY : STD_LOGIC := '0';
    signal bound_fu_535_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_535_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_560_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_cast_fu_569_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_flatten_fu_595_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_589_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal notlhs_mid1_fu_629_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_635_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_mid1_fu_649_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_655_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_669_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_mid1_fu_683_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_fu_689_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs_fu_564_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_573_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_mid_fu_600_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_11_mid1_fu_710_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_mid_fu_608_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_2_fu_717_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_5_fu_735_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_11_fu_739_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_13_fu_747_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_mid1_fu_731_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal notrhs_mid3_fu_703_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs_mid1_fu_759_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_mid2_fu_723_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal k_cast_mid2_cast_fu_772_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal notlhs_mid2_fu_641_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_784_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp8_fu_789_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs_mid2_fu_764_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1109_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvar_flatten_op_fu_822_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_fu_840_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_840_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_17_fu_836_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Val2_2_fu_844_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Val2_3_fu_858_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_3_fu_858_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal newsignbit_fu_864_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_fu_850_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_872_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_not_fu_890_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i1_fu_884_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_878_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_fu_896_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_3_mux_fu_902_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_3_31_fu_910_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp1_fu_926_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp3_fu_933_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_4_fu_940_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_947_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Val2_5_fu_951_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Val2_6_fu_965_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_6_fu_965_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal newsignbit_1_fu_971_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_1_fu_957_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_979_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_2_not_fu_997_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_fu_991_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_1_fu_985_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge5_fu_1003_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_6_mux_fu_1009_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_6_32_fu_1017_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_data2_V_fu_1025_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_data1_V_fu_918_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal k3_cast_fu_1042_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_1046_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_1062_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal k3_mid2_fu_1068_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_1118_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1109_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_1109_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1109_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1118_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_1118_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1118_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal bound_fu_535_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_fu_535_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_condition_796 : BOOLEAN;
    signal ap_condition_142 : BOOLEAN;
    signal ap_condition_801 : BOOLEAN;

    component top_mac_muladd_5ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;



begin
    top_mac_muladd_5ncud_U173 : component top_mac_muladd_5ncud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 9,
        din2_WIDTH => 9,
        dout_WIDTH => 9)
    port map (
        din0 => grp_fu_1109_p0,
        din1 => grp_fu_1109_p1,
        din2 => grp_fu_1109_p2,
        dout => grp_fu_1109_p3);

    top_mac_muladd_5ncud_U174 : component top_mac_muladd_5ncud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 9,
        din2_WIDTH => 9,
        dout_WIDTH => 9)
    port map (
        din0 => grp_fu_1118_p0,
        din1 => grp_fu_1118_p1,
        din2 => grp_fu_1118_p2,
        dout => grp_fu_1118_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state4) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state4))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state4);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_output_dma_O_TREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_output_dma_O_TREADY <= ap_const_logic_0;
            else
                if ((ap_const_boolean_1 = ap_condition_801)) then
                    if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then 
                        ap_reg_ioackin_output_dma_O_TREADY <= ap_const_logic_0;
                    elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_01001) and (output_dma_O_TREADY = ap_const_logic_1))) then 
                        ap_reg_ioackin_output_dma_O_TREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    i1_reg_403_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten1_reg_1182 = ap_const_lv1_0))) then 
                i1_reg_403 <= tmp_4_mid2_v_reg_1191;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i1_reg_403 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_reg_381_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((input_dma_B_TVALID = ap_const_logic_0) and (exitcond1_fu_497_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_497_p2 = ap_const_lv1_0))) then 
                i_reg_381 <= i_1_fu_503_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_381 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    indvar_flatten1_reg_392_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten1_fu_578_p2 = ap_const_lv1_0))) then 
                indvar_flatten1_reg_392 <= indvar_flatten_next2_fu_583_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                indvar_flatten1_reg_392 <= ap_const_lv66_0;
            end if; 
        end if;
    end process;

    indvar_flatten2_reg_464_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                indvar_flatten2_reg_464 <= ap_const_lv64_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond_flatten2_fu_1051_p2 = ap_const_lv1_0))) then 
                indvar_flatten2_reg_464 <= indvar_flatten_next1_fu_1056_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_414_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten1_fu_578_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_414 <= indvar_flatten_next_fu_828_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                indvar_flatten_reg_414 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    j2_reg_475_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                j2_reg_475 <= ap_const_lv31_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond_flatten2_fu_1051_p2 = ap_const_lv1_0))) then 
                j2_reg_475 <= tmp_7_mid2_v_fu_1076_p3;
            end if; 
        end if;
    end process;

    j_reg_425_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten1_fu_578_p2 = ap_const_lv1_0))) then 
                j_reg_425 <= j_mid2_fu_776_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                j_reg_425 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    k3_reg_486_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                k3_reg_486 <= ap_const_lv31_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond_flatten2_fu_1051_p2 = ap_const_lv1_0))) then 
                k3_reg_486 <= k_1_fu_1103_p2;
            end if; 
        end if;
    end process;

    k_reg_436_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten1_fu_578_p2 = ap_const_lv1_0))) then 
                k_reg_436 <= k_2_fu_816_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                k_reg_436 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                bound_reg_1161 <= bound_fu_535_p2;
                notrhs_mid_reg_1172 <= notrhs_mid_fu_549_p2;
                tmp_11_mid_reg_1177 <= tmp_11_mid_fu_555_p2;
                    tmp_3_reg_1167(65 downto 2) <= tmp_3_fu_541_p3(65 downto 2);
                tmp_reg_1150 <= tmp_fu_519_p2;
                tmp_s_reg_1156 <= tmp_s_fu_524_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                exitcond_flatten1_reg_1182 <= exitcond_flatten1_fu_578_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten1_fu_578_p2 = ap_const_lv1_0))) then
                sel_tmp2_mid2_reg_1201 <= sel_tmp2_mid2_fu_675_p3;
                sel_tmp4_mid2_reg_1206 <= sel_tmp4_mid2_fu_695_p3;
                sel_tmp_mid2_reg_1196 <= sel_tmp_mid2_fu_661_p3;
                tmp_last_reg_1216 <= tmp_last_fu_795_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten1_fu_578_p2 = ap_const_lv1_0))) then
                tmp_4_mid2_v_reg_1191 <= tmp_4_mid2_v_fu_616_p3;
            end if;
        end if;
    end process;
    tmp_3_reg_1167(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, input_dma_B_TVALID, ap_CS_fsm_state2, exitcond1_fu_497_p2, exitcond_flatten1_fu_578_p2, ap_enable_reg_pp1_iter0, ap_CS_fsm_state7, exitcond_flatten2_fu_1051_p2, ap_block_pp1_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((input_dma_B_TVALID = ap_const_logic_0) and (exitcond1_fu_497_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_497_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not(((input_dma_B_TVALID = ap_const_logic_0) and (exitcond1_fu_497_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_497_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond_flatten1_fu_578_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond_flatten1_fu_578_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond_flatten2_fu_1051_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;

    BIAS_V_2_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, ap_CS_fsm_state2, ap_enable_reg_pp1_iter0, tmp_2_fu_514_p1, tmp_4_mid2_fu_624_p1)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            BIAS_V_2_address0 <= tmp_4_mid2_fu_624_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            BIAS_V_2_address0 <= tmp_2_fu_514_p1(3 - 1 downto 0);
        else 
            BIAS_V_2_address0 <= "XXX";
        end if; 
    end process;


    BIAS_V_2_ce0_assign_proc : process(input_dma_B_TVALID, ap_CS_fsm_pp1_stage0, ap_CS_fsm_state2, exitcond1_fu_497_p2, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((not(((input_dma_B_TVALID = ap_const_logic_0) and (exitcond1_fu_497_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            BIAS_V_2_ce0 <= ap_const_logic_1;
        else 
            BIAS_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    BIAS_V_2_d0 <= input_dma_B_TDATA;

    BIAS_V_2_we0_assign_proc : process(input_dma_B_TVALID, ap_CS_fsm_state2, exitcond1_fu_497_p2)
    begin
        if ((not(((input_dma_B_TVALID = ap_const_logic_0) and (exitcond1_fu_497_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_497_p2 = ap_const_lv1_0))) then 
            BIAS_V_2_we0 <= ap_const_logic_1;
        else 
            BIAS_V_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    OFM_0_V_address0 <= tmp_14_cast_fu_805_p1(8 - 1 downto 0);
    OFM_0_V_address1 <= tmp_16_cast_fu_1092_p1(8 - 1 downto 0);

    OFM_0_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            OFM_0_V_ce0 <= ap_const_logic_1;
        else 
            OFM_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OFM_0_V_ce1_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            OFM_0_V_ce1 <= ap_const_logic_1;
        else 
            OFM_0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    OFM_0_V_d1 <= ap_const_lv32_0;

    OFM_0_V_we1_assign_proc : process(ap_CS_fsm_state7, exitcond_flatten2_fu_1051_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond_flatten2_fu_1051_p2 = ap_const_lv1_0))) then 
            OFM_0_V_we1 <= ap_const_logic_1;
        else 
            OFM_0_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    OFM_1_V_address0 <= tmp_14_cast_fu_805_p1(8 - 1 downto 0);
    OFM_1_V_address1 <= tmp_16_cast_fu_1092_p1(8 - 1 downto 0);

    OFM_1_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            OFM_1_V_ce0 <= ap_const_logic_1;
        else 
            OFM_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OFM_1_V_ce1_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            OFM_1_V_ce1 <= ap_const_logic_1;
        else 
            OFM_1_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    OFM_1_V_d1 <= ap_const_lv32_0;

    OFM_1_V_we1_assign_proc : process(ap_CS_fsm_state7, exitcond_flatten2_fu_1051_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond_flatten2_fu_1051_p2 = ap_const_lv1_0))) then 
            OFM_1_V_we1 <= ap_const_logic_1;
        else 
            OFM_1_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    OFM_2_V_address0 <= tmp_14_cast_fu_805_p1(8 - 1 downto 0);
    OFM_2_V_address1 <= tmp_16_cast_fu_1092_p1(8 - 1 downto 0);

    OFM_2_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            OFM_2_V_ce0 <= ap_const_logic_1;
        else 
            OFM_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OFM_2_V_ce1_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            OFM_2_V_ce1 <= ap_const_logic_1;
        else 
            OFM_2_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    OFM_2_V_d1 <= ap_const_lv32_0;

    OFM_2_V_we1_assign_proc : process(ap_CS_fsm_state7, exitcond_flatten2_fu_1051_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond_flatten2_fu_1051_p2 = ap_const_lv1_0))) then 
            OFM_2_V_we1 <= ap_const_logic_1;
        else 
            OFM_2_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    OFM_3_V_address0 <= tmp_14_cast_fu_805_p1(8 - 1 downto 0);
    OFM_3_V_address1 <= tmp_16_cast_fu_1092_p1(8 - 1 downto 0);

    OFM_3_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            OFM_3_V_ce0 <= ap_const_logic_1;
        else 
            OFM_3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OFM_3_V_ce1_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            OFM_3_V_ce1 <= ap_const_logic_1;
        else 
            OFM_3_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    OFM_3_V_d1 <= ap_const_lv32_0;

    OFM_3_V_we1_assign_proc : process(ap_CS_fsm_state7, exitcond_flatten2_fu_1051_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond_flatten2_fu_1051_p2 = ap_const_lv1_0))) then 
            OFM_3_V_we1 <= ap_const_logic_1;
        else 
            OFM_3_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    OFM_4_V_address0 <= tmp_14_cast_fu_805_p1(8 - 1 downto 0);
    OFM_4_V_address1 <= tmp_16_cast_fu_1092_p1(8 - 1 downto 0);

    OFM_4_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            OFM_4_V_ce0 <= ap_const_logic_1;
        else 
            OFM_4_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OFM_4_V_ce1_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            OFM_4_V_ce1 <= ap_const_logic_1;
        else 
            OFM_4_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    OFM_4_V_d1 <= ap_const_lv32_0;

    OFM_4_V_we1_assign_proc : process(ap_CS_fsm_state7, exitcond_flatten2_fu_1051_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond_flatten2_fu_1051_p2 = ap_const_lv1_0))) then 
            OFM_4_V_we1 <= ap_const_logic_1;
        else 
            OFM_4_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    OFM_5_V_address0 <= tmp_14_cast_fu_805_p1(8 - 1 downto 0);
    OFM_5_V_address1 <= tmp_16_cast_fu_1092_p1(8 - 1 downto 0);

    OFM_5_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            OFM_5_V_ce0 <= ap_const_logic_1;
        else 
            OFM_5_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OFM_5_V_ce1_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            OFM_5_V_ce1 <= ap_const_logic_1;
        else 
            OFM_5_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    OFM_5_V_d1 <= ap_const_lv32_0;

    OFM_5_V_we1_assign_proc : process(ap_CS_fsm_state7, exitcond_flatten2_fu_1051_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond_flatten2_fu_1051_p2 = ap_const_lv1_0))) then 
            OFM_5_V_we1 <= ap_const_logic_1;
        else 
            OFM_5_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    OFM_6_V_address0 <= tmp_14_cast_fu_805_p1(8 - 1 downto 0);
    OFM_6_V_address1 <= tmp_16_cast_fu_1092_p1(8 - 1 downto 0);

    OFM_6_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            OFM_6_V_ce0 <= ap_const_logic_1;
        else 
            OFM_6_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OFM_6_V_ce1_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            OFM_6_V_ce1 <= ap_const_logic_1;
        else 
            OFM_6_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    OFM_6_V_d1 <= ap_const_lv32_0;

    OFM_6_V_we1_assign_proc : process(ap_CS_fsm_state7, exitcond_flatten2_fu_1051_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond_flatten2_fu_1051_p2 = ap_const_lv1_0))) then 
            OFM_6_V_we1 <= ap_const_logic_1;
        else 
            OFM_6_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    OFM_7_V_address0 <= tmp_14_cast_fu_805_p1(8 - 1 downto 0);
    OFM_7_V_address1 <= tmp_16_cast_fu_1092_p1(8 - 1 downto 0);

    OFM_7_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            OFM_7_V_ce0 <= ap_const_logic_1;
        else 
            OFM_7_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OFM_7_V_ce1_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            OFM_7_V_ce1 <= ap_const_logic_1;
        else 
            OFM_7_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    OFM_7_V_d1 <= ap_const_lv32_0;

    OFM_7_V_we1_assign_proc : process(ap_CS_fsm_state7, exitcond_flatten2_fu_1051_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond_flatten2_fu_1051_p2 = ap_const_lv1_0))) then 
            OFM_7_V_we1 <= ap_const_logic_1;
        else 
            OFM_7_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter1, ap_block_state5_io)
    begin
                ap_block_pp1_stage0_11001 <= ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_io));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter1, ap_block_state5_io)
    begin
                ap_block_pp1_stage0_subdone <= ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_io));
    end process;


    ap_block_state2_assign_proc : process(input_dma_B_TVALID, exitcond1_fu_497_p2)
    begin
                ap_block_state2 <= ((input_dma_B_TVALID = ap_const_logic_0) and (exitcond1_fu_497_p2 = ap_const_lv1_0));
    end process;

        ap_block_state4_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_io_assign_proc : process(exitcond_flatten1_reg_1182, ap_sig_ioackin_output_dma_O_TREADY)
    begin
                ap_block_state5_io <= ((ap_sig_ioackin_output_dma_O_TREADY = ap_const_logic_0) and (exitcond_flatten1_reg_1182 = ap_const_lv1_0));
    end process;

        ap_block_state5_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_142_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond_flatten1_reg_1182)
    begin
                ap_condition_142 <= ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten1_reg_1182 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0));
    end process;


    ap_condition_796_assign_proc : process(tmp_4_mid2_v_reg_1191)
    begin
                ap_condition_796 <= (not((tmp_4_mid2_v_reg_1191 = ap_const_lv3_2)) and not((tmp_4_mid2_v_reg_1191 = ap_const_lv3_1)) and not((tmp_4_mid2_v_reg_1191 = ap_const_lv3_0)));
    end process;


    ap_condition_801_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond_flatten1_reg_1182)
    begin
                ap_condition_801 <= ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten1_reg_1182 = ap_const_lv1_0));
    end process;


    ap_condition_pp1_exit_iter0_state4_assign_proc : process(exitcond_flatten1_fu_578_p2)
    begin
        if ((exitcond_flatten1_fu_578_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i1_phi_fu_407_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond_flatten1_reg_1182, i1_reg_403, tmp_4_mid2_v_reg_1191)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten1_reg_1182 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            ap_phi_mux_i1_phi_fu_407_p4 <= tmp_4_mid2_v_reg_1191;
        else 
            ap_phi_mux_i1_phi_fu_407_p4 <= i1_reg_403;
        end if; 
    end process;


    ap_phi_mux_p_Val2_s_phi_fu_450_p8_assign_proc : process(OFM_0_V_q0, OFM_1_V_q0, OFM_2_V_q0, OFM_3_V_q0, tmp_4_mid2_v_reg_1191, ap_phi_reg_pp1_iter1_p_Val2_s_reg_447, ap_condition_796, ap_condition_142)
    begin
        if ((ap_const_boolean_1 = ap_condition_142)) then
            if ((ap_const_boolean_1 = ap_condition_796)) then 
                ap_phi_mux_p_Val2_s_phi_fu_450_p8 <= OFM_3_V_q0;
            elsif ((tmp_4_mid2_v_reg_1191 = ap_const_lv3_2)) then 
                ap_phi_mux_p_Val2_s_phi_fu_450_p8 <= OFM_2_V_q0;
            elsif ((tmp_4_mid2_v_reg_1191 = ap_const_lv3_1)) then 
                ap_phi_mux_p_Val2_s_phi_fu_450_p8 <= OFM_1_V_q0;
            elsif ((tmp_4_mid2_v_reg_1191 = ap_const_lv3_0)) then 
                ap_phi_mux_p_Val2_s_phi_fu_450_p8 <= OFM_0_V_q0;
            else 
                ap_phi_mux_p_Val2_s_phi_fu_450_p8 <= ap_phi_reg_pp1_iter1_p_Val2_s_reg_447;
            end if;
        else 
            ap_phi_mux_p_Val2_s_phi_fu_450_p8 <= ap_phi_reg_pp1_iter1_p_Val2_s_reg_447;
        end if; 
    end process;

    ap_phi_reg_pp1_iter1_p_Val2_s_reg_447 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_ready_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_output_dma_O_TREADY_assign_proc : process(output_dma_O_TREADY, ap_reg_ioackin_output_dma_O_TREADY)
    begin
        if ((ap_reg_ioackin_output_dma_O_TREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_output_dma_O_TREADY <= output_dma_O_TREADY;
        else 
            ap_sig_ioackin_output_dma_O_TREADY <= ap_const_logic_1;
        end if; 
    end process;

    bound_fu_535_p0 <= bound_fu_535_p00(32 - 1 downto 0);
    bound_fu_535_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(custom_Tr),64));
    bound_fu_535_p1 <= bound_fu_535_p10(32 - 1 downto 0);
    bound_fu_535_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(custom_Tc),64));
    bound_fu_535_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound_fu_535_p0) * unsigned(bound_fu_535_p1), 64));
    brmerge5_fu_1003_p2 <= (p_Result_2_not_fu_997_p2 or newsignbit_1_fu_971_p3);
    brmerge_fu_896_p2 <= (p_Result_not_fu_890_p2 or newsignbit_fu_864_p3);
    brmerge_i_i1_fu_884_p2 <= (newsignbit_fu_864_p3 xor isneg_fu_850_p3);
    brmerge_i_i_fu_991_p2 <= (newsignbit_1_fu_971_p3 xor isneg_1_fu_957_p3);
    exitcond1_fu_497_p2 <= "1" when (i_reg_381 = ap_const_lv4_8) else "0";
    exitcond_flatten1_fu_578_p2 <= "1" when (indvar_flatten1_reg_392 = tmp_3_reg_1167) else "0";
    exitcond_flatten2_fu_1051_p2 <= "1" when (indvar_flatten2_reg_464 = bound_reg_1161) else "0";
    exitcond_flatten_fu_595_p2 <= "1" when (indvar_flatten_reg_414 = bound_reg_1161) else "0";
    grp_fu_1109_p0 <= ap_const_lv9_D(5 - 1 downto 0);
    grp_fu_1109_p1 <= 
        tmp_11_fu_739_p3 when (tmp_11_mid1_fu_710_p3(0) = '1') else 
        tmp_13_fu_747_p1;
    grp_fu_1109_p2 <= k_mid2_fu_723_p3(9 - 1 downto 0);
    grp_fu_1118_p0 <= ap_const_lv9_D(5 - 1 downto 0);
    grp_fu_1118_p1 <= tmp_7_mid2_v_fu_1076_p3(9 - 1 downto 0);
    grp_fu_1118_p2 <= k3_mid2_fu_1068_p3(9 - 1 downto 0);
    i_1_fu_503_p2 <= std_logic_vector(unsigned(i_reg_381) + unsigned(ap_const_lv4_1));
    i_2_fu_589_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(ap_phi_mux_i1_phi_fu_407_p4));
    indvar_flatten_next1_fu_1056_p2 <= std_logic_vector(unsigned(indvar_flatten2_reg_464) + unsigned(ap_const_lv64_1));
    indvar_flatten_next2_fu_583_p2 <= std_logic_vector(unsigned(indvar_flatten1_reg_392) + unsigned(ap_const_lv66_1));
    indvar_flatten_next_fu_828_p3 <= 
        ap_const_lv64_1 when (exitcond_flatten_fu_595_p2(0) = '1') else 
        indvar_flatten_op_fu_822_p2;
    indvar_flatten_op_fu_822_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_414) + unsigned(ap_const_lv64_1));

    input_dma_B_TDATA_blk_n_assign_proc : process(input_dma_B_TVALID, ap_CS_fsm_state2, exitcond1_fu_497_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_497_p2 = ap_const_lv1_0))) then 
            input_dma_B_TDATA_blk_n <= input_dma_B_TVALID;
        else 
            input_dma_B_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_dma_B_TREADY_assign_proc : process(input_dma_B_TVALID, ap_CS_fsm_state2, exitcond1_fu_497_p2)
    begin
        if ((not(((input_dma_B_TVALID = ap_const_logic_0) and (exitcond1_fu_497_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_497_p2 = ap_const_lv1_0))) then 
            input_dma_B_TREADY <= ap_const_logic_1;
        else 
            input_dma_B_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    isneg_1_fu_957_p3 <= p_Val2_5_fu_951_p2(32 downto 32);
    isneg_fu_850_p3 <= p_Val2_2_fu_844_p2(32 downto 32);
    j_1_fu_1062_p2 <= std_logic_vector(unsigned(ap_const_lv31_1) + unsigned(j2_reg_475));
    j_2_fu_717_p2 <= std_logic_vector(unsigned(ap_const_lv31_1) + unsigned(j_mid_fu_600_p3));
    j_mid2_fu_776_p3 <= 
        j_mid_fu_600_p3 when (tmp_11_mid1_fu_710_p3(0) = '1') else 
        j_2_fu_717_p2;
    j_mid_fu_600_p3 <= 
        ap_const_lv31_0 when (exitcond_flatten_fu_595_p2(0) = '1') else 
        j_reg_425;
    k3_cast_fu_1042_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k3_reg_486),32));
    k3_mid2_fu_1068_p3 <= 
        k3_reg_486 when (tmp_9_fu_1046_p2(0) = '1') else 
        ap_const_lv31_0;
    k_1_fu_1103_p2 <= std_logic_vector(unsigned(ap_const_lv31_1) + unsigned(k3_mid2_fu_1068_p3));
    k_2_fu_816_p2 <= std_logic_vector(unsigned(k_mid2_fu_723_p3) + unsigned(ap_const_lv31_1));
    k_cast_fu_569_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_436),32));
    k_cast_mid2_cast_fu_772_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_mid2_fu_723_p3),32));
    k_mid2_fu_723_p3 <= 
        k_mid_fu_608_p3 when (tmp_11_mid1_fu_710_p3(0) = '1') else 
        ap_const_lv31_0;
    k_mid_fu_608_p3 <= 
        ap_const_lv31_0 when (exitcond_flatten_fu_595_p2(0) = '1') else 
        k_reg_436;
    newsignbit_1_fu_971_p3 <= p_Val2_6_fu_965_p2(31 downto 31);
    newsignbit_fu_864_p3 <= p_Val2_3_fu_858_p2(31 downto 31);
    notlhs_fu_635_p2 <= "1" when (ap_phi_mux_i1_phi_fu_407_p4 = ap_const_lv3_3) else "0";
    notlhs_mid1_fu_629_p2 <= "1" when (i_2_fu_589_p2 = ap_const_lv3_3) else "0";
    notlhs_mid2_fu_641_p3 <= 
        notlhs_mid1_fu_629_p2 when (exitcond_flatten_fu_595_p2(0) = '1') else 
        notlhs_fu_635_p2;
    notrhs_fu_564_p2 <= "1" when (tmp_4_fu_560_p1 = tmp_reg_1150) else "0";
    notrhs_mid1_fu_759_p2 <= "1" when (p_mid1_fu_731_p1 = tmp_reg_1150) else "0";
    notrhs_mid2_fu_764_p3 <= 
        notrhs_mid3_fu_703_p3 when (tmp_11_mid1_fu_710_p3(0) = '1') else 
        notrhs_mid1_fu_759_p2;
    notrhs_mid3_fu_703_p3 <= 
        notrhs_mid_reg_1172 when (exitcond_flatten_fu_595_p2(0) = '1') else 
        notrhs_fu_564_p2;
    notrhs_mid_fu_549_p2 <= "1" when (tmp_fu_519_p2 = ap_const_lv32_0) else "0";
    output_dma_O_TDATA <= (tmp_data_data2_V_fu_1025_p3 & tmp_data_data1_V_fu_918_p3);

    output_dma_O_TDATA_blk_n_assign_proc : process(output_dma_O_TREADY, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond_flatten1_reg_1182)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten1_reg_1182 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            output_dma_O_TDATA_blk_n <= output_dma_O_TREADY;
        else 
            output_dma_O_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_dma_O_TLAST <= tmp_last_reg_1216(0);

    output_dma_O_TVALID_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond_flatten1_reg_1182, ap_block_pp1_stage0_01001, ap_reg_ioackin_output_dma_O_TREADY)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_01001) and (ap_reg_ioackin_output_dma_O_TREADY = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten1_reg_1182 = ap_const_lv1_0))) then 
            output_dma_O_TVALID <= ap_const_logic_1;
        else 
            output_dma_O_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_2_not_fu_997_p2 <= (isneg_1_fu_957_p3 xor ap_const_lv1_1);
    p_Result_not_fu_890_p2 <= (isneg_fu_850_p3 xor ap_const_lv1_1);
    p_Val2_2_fu_844_p2 <= std_logic_vector(signed(tmp_18_fu_840_p1) + signed(tmp_17_fu_836_p1));
    p_Val2_3_31_fu_910_p3 <= 
        ap_const_lv32_80000000 when (underflow_fu_878_p2(0) = '1') else 
        p_Val2_3_fu_858_p2;
    p_Val2_3_fu_858_p0 <= BIAS_V_2_q0;
    p_Val2_3_fu_858_p2 <= std_logic_vector(signed(p_Val2_3_fu_858_p0) + signed(ap_phi_mux_p_Val2_s_phi_fu_450_p8));
    p_Val2_3_mux_fu_902_p3 <= 
        ap_const_lv32_7FFFFFFF when (brmerge_i_i1_fu_884_p2(0) = '1') else 
        p_Val2_3_fu_858_p2;
    p_Val2_4_fu_940_p3 <= 
        OFM_6_V_q0 when (sel_tmp4_mid2_reg_1206(0) = '1') else 
        sel_tmp3_fu_933_p3;
    p_Val2_5_fu_951_p2 <= std_logic_vector(signed(tmp_20_fu_947_p1) + signed(tmp_18_fu_840_p1));
    p_Val2_6_32_fu_1017_p3 <= 
        ap_const_lv32_80000000 when (underflow_1_fu_985_p2(0) = '1') else 
        p_Val2_6_fu_965_p2;
    p_Val2_6_fu_965_p0 <= BIAS_V_2_q0;
    p_Val2_6_fu_965_p2 <= std_logic_vector(signed(p_Val2_6_fu_965_p0) + signed(p_Val2_4_fu_940_p3));
    p_Val2_6_mux_fu_1009_p3 <= 
        ap_const_lv32_7FFFFFFF when (brmerge_i_i_fu_991_p2(0) = '1') else 
        p_Val2_6_fu_965_p2;
    p_mid1_fu_731_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_2_fu_717_p2),32));
    sel_tmp1_fu_926_p3 <= 
        OFM_4_V_q0 when (sel_tmp_mid2_reg_1196(0) = '1') else 
        OFM_7_V_q0;
    sel_tmp2_fu_669_p2 <= "1" when (ap_phi_mux_i1_phi_fu_407_p4 = ap_const_lv3_1) else "0";
    sel_tmp2_mid2_fu_675_p3 <= 
        sel_tmp_fu_655_p2 when (exitcond_flatten_fu_595_p2(0) = '1') else 
        sel_tmp2_fu_669_p2;
    sel_tmp3_fu_933_p3 <= 
        OFM_5_V_q0 when (sel_tmp2_mid2_reg_1201(0) = '1') else 
        sel_tmp1_fu_926_p3;
    sel_tmp4_fu_689_p2 <= "1" when (ap_phi_mux_i1_phi_fu_407_p4 = ap_const_lv3_2) else "0";
    sel_tmp4_mid1_fu_683_p2 <= "1" when (i_2_fu_589_p2 = ap_const_lv3_2) else "0";
    sel_tmp4_mid2_fu_695_p3 <= 
        sel_tmp4_mid1_fu_683_p2 when (exitcond_flatten_fu_595_p2(0) = '1') else 
        sel_tmp4_fu_689_p2;
    sel_tmp_fu_655_p2 <= "1" when (ap_phi_mux_i1_phi_fu_407_p4 = ap_const_lv3_0) else "0";
    sel_tmp_mid1_fu_649_p2 <= "1" when (i_2_fu_589_p2 = ap_const_lv3_0) else "0";
    sel_tmp_mid2_fu_661_p3 <= 
        sel_tmp_mid1_fu_649_p2 when (exitcond_flatten_fu_595_p2(0) = '1') else 
        sel_tmp_fu_655_p2;
    tmp8_fu_789_p2 <= (tmp_10_fu_784_p2 and notlhs_mid2_fu_641_p3);
    tmp_10_fu_784_p2 <= "1" when (k_cast_mid2_cast_fu_772_p1 = tmp_s_reg_1156) else "0";
    tmp_11_fu_739_p3 <= 
        ap_const_lv9_0 when (exitcond_flatten_fu_595_p2(0) = '1') else 
        tmp_5_fu_735_p1;
    tmp_11_mid1_fu_710_p3 <= 
        tmp_11_mid_reg_1177 when (exitcond_flatten_fu_595_p2(0) = '1') else 
        tmp_6_fu_573_p2;
    tmp_11_mid_fu_555_p2 <= "1" when (signed(custom_Tc) > signed(ap_const_lv32_0)) else "0";
    tmp_13_fu_747_p1 <= j_2_fu_717_p2(9 - 1 downto 0);
        tmp_14_cast_fu_805_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1109_p3),64));

        tmp_16_cast_fu_1092_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1118_p3),64));

        tmp_17_fu_836_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_phi_mux_p_Val2_s_phi_fu_450_p8),33));

    tmp_18_fu_840_p0 <= BIAS_V_2_q0;
        tmp_18_fu_840_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_18_fu_840_p0),33));

    tmp_19_fu_872_p2 <= (newsignbit_fu_864_p3 xor ap_const_lv1_1);
        tmp_20_fu_947_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_4_fu_940_p3),33));

    tmp_21_fu_979_p2 <= (newsignbit_1_fu_971_p3 xor ap_const_lv1_1);
    tmp_2_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_381),64));
    tmp_3_fu_541_p3 <= (bound_fu_535_p2 & ap_const_lv2_0);
    tmp_4_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_425),32));
    tmp_4_mid2_fu_624_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_mid2_v_fu_616_p3),64));
    tmp_4_mid2_v_fu_616_p3 <= 
        i_2_fu_589_p2 when (exitcond_flatten_fu_595_p2(0) = '1') else 
        ap_phi_mux_i1_phi_fu_407_p4;
    tmp_5_fu_735_p1 <= j_reg_425(9 - 1 downto 0);
    tmp_6_fu_573_p2 <= "1" when (signed(k_cast_fu_569_p1) < signed(custom_Tc)) else "0";
    tmp_7_mid2_v_fu_1076_p3 <= 
        j2_reg_475 when (tmp_9_fu_1046_p2(0) = '1') else 
        j_1_fu_1062_p2;
    tmp_9_fu_1046_p2 <= "1" when (signed(k3_cast_fu_1042_p1) < signed(custom_Tc)) else "0";
    tmp_data_data1_V_fu_918_p3 <= 
        p_Val2_3_mux_fu_902_p3 when (brmerge_fu_896_p2(0) = '1') else 
        p_Val2_3_31_fu_910_p3;
    tmp_data_data2_V_fu_1025_p3 <= 
        p_Val2_6_mux_fu_1009_p3 when (brmerge5_fu_1003_p2(0) = '1') else 
        p_Val2_6_32_fu_1017_p3;
    tmp_fu_519_p2 <= std_logic_vector(unsigned(custom_Tr) + unsigned(ap_const_lv32_FFFFFFFF));
    tmp_last_fu_795_p2 <= (tmp8_fu_789_p2 and notrhs_mid2_fu_764_p3);
    tmp_s_fu_524_p2 <= std_logic_vector(unsigned(custom_Tc) + unsigned(ap_const_lv32_FFFFFFFF));
    underflow_1_fu_985_p2 <= (tmp_21_fu_979_p2 and isneg_1_fu_957_p3);
    underflow_fu_878_p2 <= (tmp_19_fu_872_p2 and isneg_fu_850_p3);
end behav;
